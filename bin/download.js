(function() {
  /*
  0000000     0000000   000   000  000   000  000       0000000    0000000   0000000    
  000   000  000   000  000 0 000  0000  000  000      000   000  000   000  000   000  
  000   000  000   000  000000000  000 0 000  000      000   000  000000000  000   000  
  000   000  000   000  000   000  000  0000  000      000   000  000   000  000   000  
  0000000     0000000   00     00  000   000  0000000   0000000   000   000  0000000    
  */
  var app, childp, dmg, download, fs, log, mount, open, slash, src, unpack, version;

  ({fs, slash, childp, log} = require('kxk'));

  download = require('download');

  mount = require('dmg');

  version = require('../package.json').version;

  app = "/Applications/ko.app";

  dmg = `${__dirname}/ko-${version}.dmg`;

  open = function() {
    var args;
    log(`open ${app}`);
    args = process.argv.slice(2).join(" ");
    return childp.exec(`open -a ${app} ` + args);
  };

  unpack = function() {
    log(`mounting ${dmg} ...`);
    return mount.mount(dmg, function(err, dmgPath) {
      var src;
      if (err) {
        return log(err);
      } else {
        src = slash.join(dmgPath, "ko.app");
        log(`copy ${src} to ${app}`);
        return fs.copy(src, app, (err) => {
          if (err != null) {
            return log(err);
          } else {
            log(`unmounting ${dmgPath} ...`);
            return mount.unmount(dmgPath, (err) => {
              if (err != null) {
                return log(err);
              } else {
                return open();
              }
            });
          }
        });
      }
    });
  };

  if (!fs.existsSync(app)) {
    log('app not found ...');
    if (!fs.existsSync(dmg)) {
      src = `https://github.com/monsterkodi/ko/releases/download/v${version}/ko-${version}.dmg`;
      log("downloading from github (this might take a while) ...");
      log(src);
      download(src, __dirname).then(() => {
        return unpack();
      });
    } else {
      unpack();
    }
  } else {
    open();
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG93bmxvYWQuanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiZG93bmxvYWQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQUE7Ozs7Ozs7QUFBQSxNQUFBLEdBQUEsRUFBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLFFBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxNQUFBLEVBQUE7O0VBUUEsQ0FBQSxDQUFFLEVBQUYsRUFBTSxLQUFOLEVBQWEsTUFBYixFQUFxQixHQUFyQixDQUFBLEdBQTZCLE9BQUEsQ0FBUSxLQUFSLENBQTdCOztFQUVBLFFBQUEsR0FBVyxPQUFBLENBQVEsVUFBUjs7RUFDWCxLQUFBLEdBQVcsT0FBQSxDQUFRLEtBQVI7O0VBRVgsT0FBQSxHQUFXLE9BQUEsQ0FBUSxpQkFBUixDQUEwQixDQUFDOztFQUN0QyxHQUFBLEdBQVc7O0VBQ1gsR0FBQSxHQUFXLENBQUEsQ0FBQSxDQUFHLFNBQUgsQ0FBYSxJQUFiLENBQUEsQ0FBbUIsT0FBbkIsQ0FBMkIsSUFBM0I7O0VBRVgsSUFBQSxHQUFPLFFBQUEsQ0FBQSxDQUFBO0FBQ0gsUUFBQTtJQUFBLEdBQUEsQ0FBSSxDQUFBLEtBQUEsQ0FBQSxDQUFRLEdBQVIsQ0FBQSxDQUFKO0lBQ0EsSUFBQSxHQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBYixDQUFtQixDQUFuQixDQUFxQixDQUFDLElBQXRCLENBQTJCLEdBQTNCO1dBQ1AsTUFBTSxDQUFDLElBQVAsQ0FBWSxDQUFBLFFBQUEsQ0FBQSxDQUFXLEdBQVgsRUFBQSxDQUFBLEdBQW9CLElBQWhDO0VBSEc7O0VBS1AsTUFBQSxHQUFTLFFBQUEsQ0FBQSxDQUFBO0lBQ0wsR0FBQSxDQUFJLENBQUEsU0FBQSxDQUFBLENBQVksR0FBWixDQUFnQixJQUFoQixDQUFKO1dBQ0EsS0FBSyxDQUFDLEtBQU4sQ0FBWSxHQUFaLEVBQWlCLFFBQUEsQ0FBQyxHQUFELEVBQU0sT0FBTixDQUFBO0FBQ2IsVUFBQTtNQUFBLElBQUcsR0FBSDtlQUNJLEdBQUEsQ0FBSSxHQUFKLEVBREo7T0FBQSxNQUFBO1FBR0ksR0FBQSxHQUFNLEtBQUssQ0FBQyxJQUFOLENBQVcsT0FBWCxFQUFvQixRQUFwQjtRQUNOLEdBQUEsQ0FBSSxDQUFBLEtBQUEsQ0FBQSxDQUFRLEdBQVIsQ0FBWSxJQUFaLENBQUEsQ0FBa0IsR0FBbEIsQ0FBQSxDQUFKO2VBQ0EsRUFBRSxDQUFDLElBQUgsQ0FBUSxHQUFSLEVBQWEsR0FBYixFQUFrQixDQUFDLEdBQUQsQ0FBQSxHQUFBO1VBQ2QsSUFBRyxXQUFIO21CQUNJLEdBQUEsQ0FBSSxHQUFKLEVBREo7V0FBQSxNQUFBO1lBR0ksR0FBQSxDQUFJLENBQUEsV0FBQSxDQUFBLENBQWMsT0FBZCxDQUFzQixJQUF0QixDQUFKO21CQUNBLEtBQUssQ0FBQyxPQUFOLENBQWMsT0FBZCxFQUF1QixDQUFDLEdBQUQsQ0FBQSxHQUFBO2NBQ25CLElBQUcsV0FBSDt1QkFDSSxHQUFBLENBQUksR0FBSixFQURKO2VBQUEsTUFBQTt1QkFHSSxJQUFBLENBQUEsRUFISjs7WUFEbUIsQ0FBdkIsRUFKSjs7UUFEYyxDQUFsQixFQUxKOztJQURhLENBQWpCO0VBRks7O0VBbUJULElBQUcsQ0FBSSxFQUFFLENBQUMsVUFBSCxDQUFjLEdBQWQsQ0FBUDtJQUNJLEdBQUEsQ0FBSSxtQkFBSjtJQUNBLElBQUcsQ0FBSSxFQUFFLENBQUMsVUFBSCxDQUFjLEdBQWQsQ0FBUDtNQUNJLEdBQUEsR0FBTSxDQUFBLHFEQUFBLENBQUEsQ0FBd0QsT0FBeEQsQ0FBZ0UsSUFBaEUsQ0FBQSxDQUFzRSxPQUF0RSxDQUE4RSxJQUE5RTtNQUNOLEdBQUEsQ0FBSSx1REFBSjtNQUNBLEdBQUEsQ0FBSSxHQUFKO01BQ0EsUUFBQSxDQUFTLEdBQVQsRUFBYyxTQUFkLENBQXdCLENBQUMsSUFBekIsQ0FBOEIsQ0FBQSxDQUFBLEdBQUE7ZUFDMUIsTUFBQSxDQUFBO01BRDBCLENBQTlCLEVBSko7S0FBQSxNQUFBO01BT0ksTUFBQSxDQUFBLEVBUEo7S0FGSjtHQUFBLE1BQUE7SUFXSSxJQUFBLENBQUEsRUFYSjs7QUF6Q0EiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbjAwMDAwMDAgICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgMDAwIDAgMDAwICAwMDAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgMDAwICAgMDAwICBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4wMDAwMDAwICAgICAwMDAwMDAwICAgMDAgICAgIDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwICAgIFxuIyMjXG5cbnsgZnMsIHNsYXNoLCBjaGlsZHAsIGxvZyB9ID0gcmVxdWlyZSAna3hrJ1xuXG5kb3dubG9hZCA9IHJlcXVpcmUgJ2Rvd25sb2FkJ1xubW91bnQgICAgPSByZXF1aXJlICdkbWcnXG5cbnZlcnNpb24gID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvblxuYXBwICAgICAgPSBcIi9BcHBsaWNhdGlvbnMva28uYXBwXCJcbmRtZyAgICAgID0gXCIje19fZGlybmFtZX0va28tI3t2ZXJzaW9ufS5kbWdcIlxuXG5vcGVuID0gKCkgLT5cbiAgICBsb2cgXCJvcGVuICN7YXBwfVwiXG4gICAgYXJncyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKS5qb2luIFwiIFwiXG4gICAgY2hpbGRwLmV4ZWMgXCJvcGVuIC1hICN7YXBwfSBcIiArIGFyZ3NcblxudW5wYWNrID0gKCkgLT5cbiAgICBsb2cgXCJtb3VudGluZyAje2RtZ30gLi4uXCJcbiAgICBtb3VudC5tb3VudCBkbWcsIChlcnIsIGRtZ1BhdGgpIC0+XG4gICAgICAgIGlmIGVyclxuICAgICAgICAgICAgbG9nIGVyclxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBzcmMgPSBzbGFzaC5qb2luIGRtZ1BhdGgsIFwia28uYXBwXCJcbiAgICAgICAgICAgIGxvZyBcImNvcHkgI3tzcmN9IHRvICN7YXBwfVwiXG4gICAgICAgICAgICBmcy5jb3B5IHNyYywgYXBwLCAoZXJyKSA9PlxuICAgICAgICAgICAgICAgIGlmIGVycj9cbiAgICAgICAgICAgICAgICAgICAgbG9nIGVyciBcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGxvZyBcInVubW91bnRpbmcgI3tkbWdQYXRofSAuLi5cIlxuICAgICAgICAgICAgICAgICAgICBtb3VudC51bm1vdW50IGRtZ1BhdGgsIChlcnIpID0+IFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgZXJyP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZyBlcnIgXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oKVxuXG5pZiBub3QgZnMuZXhpc3RzU3luYyBhcHBcbiAgICBsb2cgJ2FwcCBub3QgZm91bmQgLi4uJ1xuICAgIGlmIG5vdCBmcy5leGlzdHNTeW5jIGRtZyAgICAgICAgXG4gICAgICAgIHNyYyA9IFwiaHR0cHM6Ly9naXRodWIuY29tL21vbnN0ZXJrb2RpL2tvL3JlbGVhc2VzL2Rvd25sb2FkL3Yje3ZlcnNpb259L2tvLSN7dmVyc2lvbn0uZG1nXCJcbiAgICAgICAgbG9nIFwiZG93bmxvYWRpbmcgZnJvbSBnaXRodWIgKHRoaXMgbWlnaHQgdGFrZSBhIHdoaWxlKSAuLi5cIlxuICAgICAgICBsb2cgc3JjXG4gICAgICAgIGRvd25sb2FkKHNyYywgX19kaXJuYW1lKS50aGVuICgpID0+IFxuICAgICAgICAgICAgdW5wYWNrKClcbiAgICBlbHNlXG4gICAgICAgIHVucGFjaygpXG5lbHNlXG4gICAgb3BlbigpXG4gICAgIl19
//# sourceURL=download.coffee