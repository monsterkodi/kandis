// koffee 1.6.0

/*
00000000   0000000   00000000   000   000  00000000  000   000  000   000   0000000    
000       000   000  000   000  000  000   000       000   000  0000  000  000         
000000    000   000  0000000    0000000    000000    000   000  000 0 000  000         
000       000   000  000   000  000  000   000       000   000  000  0000  000         
000        0000000   000   000  000   000  000        0000000   000   000   0000000
 */
var args, callFunc, childp, forkfunc, ref, sendResult, slash,
    slice = [].slice;

if (module.parent) {
    ref = require('kxk'), childp = ref.childp, slash = ref.slash, args = ref.args;
    forkfunc = function() {
        var args, callback, cp, dirname, err, file, i, match, onExit, onResult, regx, stack;
        file = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), callback = arguments[i++];
        if (/^[.]?\.\//.test(file)) {
            stack = new Error().stack.split(/\r\n|\n/);
            regx = /\(([^\)]*)\)/;
            match = regx.exec(stack[3]);
            dirname = slash.dir(match[1]);
            file = slash.join(dirname, file);
        }
        try {
            cp = childp.fork(__filename);
            onExit = function() {
                cp.removeListener('message', onResult);
                cp.removeListener('exit', onExit);
                if (cp.connected) {
                    cp.disconnect();
                }
                return cp.kill();
            };
            onResult = function(msg) {
                var result;
                result = msg;
                callback(result.err, result.result);
                return onExit();
            };
            cp.on('error', function(err) {
                return callback(err, null);
            });
            cp.on('message', onResult);
            cp.on('exit', onExit);
            cp.send({
                file: file,
                args: args
            });
        } catch (error) {
            err = error;
            callback(err, null);
        }
        return cp;
    };
    module.exports = forkfunc;
} else {
    sendResult = function(err, result) {
        process.removeListener('message', callFunc);
        return process.send({
            err: err,
            result: result
        }, function() {
            if (process.connected) {
                process.disconnect();
            }
            return process.exit(0);
        });
    };
    callFunc = function(msg) {
        var err, func, result;
        try {
            func = require(msg.file);
            result = func.apply(func, msg.args);
            return sendResult(null, result);
        } catch (error) {
            err = error;
            return sendResult(err.stack);
        }
    };
    process.on('message', callFunc);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ya2Z1bmMuanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBLHdEQUFBO0lBQUE7O0FBUUEsSUFBRyxNQUFNLENBQUMsTUFBVjtJQVFJLE1BQTBCLE9BQUEsQ0FBUSxLQUFSLENBQTFCLEVBQUUsbUJBQUYsRUFBVSxpQkFBVixFQUFpQjtJQUVqQixRQUFBLEdBQVcsU0FBQTtBQUVQLFlBQUE7UUFGUSxxQkFBTSxpR0FBUztRQUV2QixJQUFHLFdBQVcsQ0FBQyxJQUFaLENBQWlCLElBQWpCLENBQUg7WUFDSSxLQUFBLEdBQVUsSUFBSSxLQUFKLENBQUEsQ0FBVyxDQUFDLEtBQUssQ0FBQyxLQUFsQixDQUF3QixTQUF4QjtZQUNWLElBQUEsR0FBVTtZQUNWLEtBQUEsR0FBVSxJQUFJLENBQUMsSUFBTCxDQUFVLEtBQU0sQ0FBQSxDQUFBLENBQWhCO1lBQ1YsT0FBQSxHQUFVLEtBQUssQ0FBQyxHQUFOLENBQVUsS0FBTSxDQUFBLENBQUEsQ0FBaEI7WUFDVixJQUFBLEdBQVUsS0FBSyxDQUFDLElBQU4sQ0FBVyxPQUFYLEVBQW9CLElBQXBCLEVBTGQ7O0FBT0E7WUFDSSxFQUFBLEdBQUssTUFBTSxDQUFDLElBQVAsQ0FBWSxVQUFaO1lBRUwsTUFBQSxHQUFTLFNBQUE7Z0JBQ0wsRUFBRSxDQUFDLGNBQUgsQ0FBa0IsU0FBbEIsRUFBNEIsUUFBNUI7Z0JBQ0EsRUFBRSxDQUFDLGNBQUgsQ0FBa0IsTUFBbEIsRUFBNEIsTUFBNUI7Z0JBQ0EsSUFBbUIsRUFBRSxDQUFDLFNBQXRCO29CQUFBLEVBQUUsQ0FBQyxVQUFILENBQUEsRUFBQTs7dUJBQ0EsRUFBRSxDQUFDLElBQUgsQ0FBQTtZQUpLO1lBTVQsUUFBQSxHQUFXLFNBQUMsR0FBRDtBQUNQLG9CQUFBO2dCQUFBLE1BQUEsR0FBUztnQkFDVCxRQUFBLENBQVMsTUFBTSxDQUFDLEdBQWhCLEVBQXFCLE1BQU0sQ0FBQyxNQUE1Qjt1QkFDQSxNQUFBLENBQUE7WUFITztZQUtYLEVBQUUsQ0FBQyxFQUFILENBQU0sT0FBTixFQUFnQixTQUFDLEdBQUQ7dUJBQVMsUUFBQSxDQUFTLEdBQVQsRUFBYyxJQUFkO1lBQVQsQ0FBaEI7WUFDQSxFQUFFLENBQUMsRUFBSCxDQUFNLFNBQU4sRUFBZ0IsUUFBaEI7WUFDQSxFQUFFLENBQUMsRUFBSCxDQUFNLE1BQU4sRUFBZ0IsTUFBaEI7WUFFQSxFQUFFLENBQUMsSUFBSCxDQUNJO2dCQUFBLElBQUEsRUFBTyxJQUFQO2dCQUNBLElBQUEsRUFBTyxJQURQO2FBREosRUFsQko7U0FBQSxhQUFBO1lBc0JNO1lBRUYsUUFBQSxDQUFTLEdBQVQsRUFBYyxJQUFkLEVBeEJKOztlQTBCQTtJQW5DTztJQXFDWCxNQUFNLENBQUMsT0FBUCxHQUFpQixTQS9DckI7Q0FBQSxNQUFBO0lBeURJLFVBQUEsR0FBYSxTQUFDLEdBQUQsRUFBTSxNQUFOO1FBRVQsT0FBTyxDQUFDLGNBQVIsQ0FBdUIsU0FBdkIsRUFBaUMsUUFBakM7ZUFDQSxPQUFPLENBQUMsSUFBUixDQUFhO1lBQUMsR0FBQSxFQUFJLEdBQUw7WUFBVSxNQUFBLEVBQU8sTUFBakI7U0FBYixFQUF1QyxTQUFBO1lBQ25DLElBQXdCLE9BQU8sQ0FBQyxTQUFoQztnQkFBQSxPQUFPLENBQUMsVUFBUixDQUFBLEVBQUE7O21CQUNBLE9BQU8sQ0FBQyxJQUFSLENBQWEsQ0FBYjtRQUZtQyxDQUF2QztJQUhTO0lBT2IsUUFBQSxHQUFXLFNBQUMsR0FBRDtBQUVQLFlBQUE7QUFBQTtZQUVJLElBQUEsR0FBTyxPQUFBLENBQVEsR0FBRyxDQUFDLElBQVo7WUFDUCxNQUFBLEdBQVMsSUFBSSxDQUFDLEtBQUwsQ0FBVyxJQUFYLEVBQWlCLEdBQUcsQ0FBQyxJQUFyQjttQkFDVCxVQUFBLENBQVcsSUFBWCxFQUFpQixNQUFqQixFQUpKO1NBQUEsYUFBQTtZQU1NO21CQUVGLFVBQUEsQ0FBVyxHQUFHLENBQUMsS0FBZixFQVJKOztJQUZPO0lBWVgsT0FBTyxDQUFDLEVBQVIsQ0FBVyxTQUFYLEVBQXFCLFFBQXJCLEVBNUVKIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgICBcbjAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgICAgIFxuMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwICAgIDAwMDAwMCAgICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgICAgICAgXG4wMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAwMDAgICAgICAgICBcbjAwMCAgICAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgIDAwMDAwMDAgICAwMDAgICAwMDAgICAwMDAwMDAwICAgIFxuIyMjXG5cbmlmIG1vZHVsZS5wYXJlbnRcblxuICAgICMgMDAgICAgIDAwICAgMDAwMDAwMCAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAwMDBcbiAgICAjIDAwMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAgIDAwMCAwIDAwMFxuICAgICMgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwICAwMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAgICAwMDBcblxuICAgIHsgY2hpbGRwLCBzbGFzaCwgYXJncyB9ID0gcmVxdWlyZSAna3hrJ1xuICAgIFxuICAgIGZvcmtmdW5jID0gKGZpbGUsIGFyZ3MuLi4sIGNhbGxiYWNrKSAtPlxuICAgICAgICBcbiAgICAgICAgaWYgL15bLl0/XFwuXFwvLy50ZXN0IGZpbGVcbiAgICAgICAgICAgIHN0YWNrICAgPSBuZXcgRXJyb3IoKS5zdGFjay5zcGxpdCAvXFxyXFxufFxcbi9cbiAgICAgICAgICAgIHJlZ3ggICAgPSAvXFwoKFteXFwpXSopXFwpL1xuICAgICAgICAgICAgbWF0Y2ggICA9IHJlZ3guZXhlYyBzdGFja1szXVxuICAgICAgICAgICAgZGlybmFtZSA9IHNsYXNoLmRpciBtYXRjaFsxXVxuICAgICAgICAgICAgZmlsZSAgICA9IHNsYXNoLmpvaW4gZGlybmFtZSwgZmlsZVxuICAgICAgICAgICAgXG4gICAgICAgIHRyeVxuICAgICAgICAgICAgY3AgPSBjaGlsZHAuZm9yayBfX2ZpbGVuYW1lXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIG9uRXhpdCA9IC0+XG4gICAgICAgICAgICAgICAgY3AucmVtb3ZlTGlzdGVuZXIgJ21lc3NhZ2UnIG9uUmVzdWx0XG4gICAgICAgICAgICAgICAgY3AucmVtb3ZlTGlzdGVuZXIgJ2V4aXQnICAgIG9uRXhpdFxuICAgICAgICAgICAgICAgIGNwLmRpc2Nvbm5lY3QoKSBpZiBjcC5jb25uZWN0ZWRcbiAgICAgICAgICAgICAgICBjcC5raWxsKClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIG9uUmVzdWx0ID0gKG1zZykgLT4gXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbXNnXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgcmVzdWx0LmVyciwgcmVzdWx0LnJlc3VsdFxuICAgICAgICAgICAgICAgIG9uRXhpdCgpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjcC5vbiAnZXJyb3InICAgKGVycikgLT4gY2FsbGJhY2sgZXJyLCBudWxsXG4gICAgICAgICAgICBjcC5vbiAnbWVzc2FnZScgb25SZXN1bHRcbiAgICAgICAgICAgIGNwLm9uICdleGl0JyAgICBvbkV4aXRcblxuICAgICAgICAgICAgY3Auc2VuZFxuICAgICAgICAgICAgICAgIGZpbGU6ICBmaWxlXG4gICAgICAgICAgICAgICAgYXJnczogIGFyZ3NcblxuICAgICAgICBjYXRjaCBlcnJcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FsbGJhY2sgZXJyLCBudWxsXG4gICAgICAgICAgICBcbiAgICAgICAgY3BcblxuICAgIG1vZHVsZS5leHBvcnRzID0gZm9ya2Z1bmNcblxuZWxzZVxuXG4gICAgIyAgMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMCAgICAgIDAwMDAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAgICAgICAwMDAgICAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAwMDAwMDAgIDAwMCAgMDAwICAgICAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgIDAwMCAgICAgIDAwMCAgIDAwMFxuICAgICMgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwMDAwICAwMDAwMDAwXG5cbiAgICBzZW5kUmVzdWx0ID0gKGVyciwgcmVzdWx0KSAtPlxuICAgICAgICBcbiAgICAgICAgcHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciAnbWVzc2FnZScgY2FsbEZ1bmNcbiAgICAgICAgcHJvY2Vzcy5zZW5kIHtlcnI6ZXJyLCByZXN1bHQ6cmVzdWx0fSwgLT5cbiAgICAgICAgICAgIHByb2Nlc3MuZGlzY29ubmVjdCgpIGlmIHByb2Nlc3MuY29ubmVjdGVkXG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQgMFxuICAgICAgICBcbiAgICBjYWxsRnVuYyA9IChtc2cpIC0+XG4gICAgICAgIFxuICAgICAgICB0cnlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZnVuYyA9IHJlcXVpcmUgbXNnLmZpbGVcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkgZnVuYywgbXNnLmFyZ3NcbiAgICAgICAgICAgIHNlbmRSZXN1bHQgbnVsbCwgcmVzdWx0XG4gICAgICAgICAgICBcbiAgICAgICAgY2F0Y2ggZXJyXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNlbmRSZXN1bHQgZXJyLnN0YWNrXG5cbiAgICBwcm9jZXNzLm9uICdtZXNzYWdlJyBjYWxsRnVuY1xuIl19
//# sourceURL=../../coffee/tools/forkfunc.coffee