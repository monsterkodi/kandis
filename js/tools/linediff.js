// koffee 1.4.0

/*
000      000  000   000  00000000  0000000    000  00000000  00000000  
000      000  0000  000  000       000   000  000  000       000       
000      000  000 0 000  0000000   000   000  000  000000    000000    
000      000  000  0000  000       000   000  000  000       000       
0000000  000  000   000  00000000  0000000    000  000       000
 */
var empty, last, lineDiff, ref;

ref = require('kxk'), empty = ref.empty, last = ref.last;

lineDiff = function(oldLine, newLine) {
    var changes, deletes, inserts, lst, nc, ni, oc, oi;
    changes = [];
    oi = 0;
    ni = 0;
    if (oldLine !== newLine) {
        oc = oldLine[oi];
        nc = newLine[ni];
        while (oi < oldLine.length) {
            if (nc == null) {
                changes.push({
                    change: 'delete',
                    old: oi,
                    "new": ni,
                    length: oldLine.length - oi
                });
                break;
            } else if (oc === nc) {
                oi += 1;
                oc = oldLine[oi];
                ni += 1;
                nc = newLine[ni];
            } else {
                inserts = newLine.slice(ni).indexOf(oc);
                deletes = oldLine.slice(oi).indexOf(nc);
                if (inserts > 0 && (deletes <= 0 || inserts < deletes)) {
                    changes.push({
                        change: 'insert',
                        old: oi,
                        "new": ni,
                        length: inserts
                    });
                    ni += inserts;
                    nc = newLine[ni];
                } else if (deletes > 0 && (inserts <= 0 || deletes < inserts)) {
                    changes.push({
                        change: 'delete',
                        old: oi,
                        "new": ni,
                        length: deletes
                    });
                    oi += deletes;
                    oc = oldLine[oi];
                } else {
                    lst = last(changes);
                    if ((lst != null ? lst.change : void 0) === 'change' && lst.old + lst.length === oi) {
                        lst.length += 1;
                    } else {
                        changes.push({
                            change: 'change',
                            old: oi,
                            "new": ni,
                            length: 1
                        });
                    }
                    oi += 1;
                    oc = oldLine[oi];
                    ni += 1;
                    nc = newLine[ni];
                }
            }
        }
        if (ni < newLine.length) {
            changes.push({
                change: 'insert',
                old: oi,
                "new": ni,
                length: newLine.length - ni
            });
        }
    }
    return changes;
};

lineDiff.isBoring = function(oldLine, newLine) {
    var c, changes, deletes, i, inserts, len;
    changes = lineDiff(oldLine, newLine);
    if (empty(changes)) {
        return true;
    }
    inserts = '';
    deletes = '';
    for (i = 0, len = changes.length; i < len; i++) {
        c = changes[i];
        switch (c.change) {
            case 'change':
                return false;
            case 'delete':
                deletes += oldLine.substr(c.old, c.length).trim();
                break;
            case 'insert':
                inserts += newLine.substr(c["new"], c.length).trim();
        }
    }
    return inserts === deletes;
};

module.exports = lineDiff;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZWRpZmYuanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBOztBQVFBLE1BQWtCLE9BQUEsQ0FBUSxLQUFSLENBQWxCLEVBQUUsaUJBQUYsRUFBUzs7QUFFVCxRQUFBLEdBQVcsU0FBQyxPQUFELEVBQVUsT0FBVjtBQUVQLFFBQUE7SUFBQSxPQUFBLEdBQVU7SUFFVixFQUFBLEdBQUs7SUFDTCxFQUFBLEdBQUs7SUFFTCxJQUFHLE9BQUEsS0FBVyxPQUFkO1FBRUksRUFBQSxHQUFLLE9BQVEsQ0FBQSxFQUFBO1FBQ2IsRUFBQSxHQUFLLE9BQVEsQ0FBQSxFQUFBO0FBRWIsZUFBTSxFQUFBLEdBQUssT0FBTyxDQUFDLE1BQW5CO1lBRUksSUFBTyxVQUFQO2dCQUNJLE9BQU8sQ0FBQyxJQUFSLENBQWE7b0JBQUEsTUFBQSxFQUFRLFFBQVI7b0JBQWtCLEdBQUEsRUFBSyxFQUF2QjtvQkFBMkIsQ0FBQSxHQUFBLENBQUEsRUFBSyxFQUFoQztvQkFBb0MsTUFBQSxFQUFRLE9BQU8sQ0FBQyxNQUFSLEdBQWUsRUFBM0Q7aUJBQWI7QUFDQSxzQkFGSjthQUFBLE1BSUssSUFBRyxFQUFBLEtBQU0sRUFBVDtnQkFFRCxFQUFBLElBQU07Z0JBQ04sRUFBQSxHQUFLLE9BQVEsQ0FBQSxFQUFBO2dCQUNiLEVBQUEsSUFBTTtnQkFDTixFQUFBLEdBQUssT0FBUSxDQUFBLEVBQUEsRUFMWjthQUFBLE1BQUE7Z0JBU0QsT0FBQSxHQUFVLE9BQU8sQ0FBQyxLQUFSLENBQWMsRUFBZCxDQUFpQixDQUFDLE9BQWxCLENBQTBCLEVBQTFCO2dCQUNWLE9BQUEsR0FBVSxPQUFPLENBQUMsS0FBUixDQUFjLEVBQWQsQ0FBaUIsQ0FBQyxPQUFsQixDQUEwQixFQUExQjtnQkFFVixJQUFHLE9BQUEsR0FBVSxDQUFWLElBQWdCLENBQUMsT0FBQSxJQUFXLENBQVgsSUFBZ0IsT0FBQSxHQUFVLE9BQTNCLENBQW5CO29CQUVJLE9BQU8sQ0FBQyxJQUFSLENBQWE7d0JBQUEsTUFBQSxFQUFRLFFBQVI7d0JBQWtCLEdBQUEsRUFBSyxFQUF2Qjt3QkFBMkIsQ0FBQSxHQUFBLENBQUEsRUFBSyxFQUFoQzt3QkFBb0MsTUFBQSxFQUFRLE9BQTVDO3FCQUFiO29CQUNBLEVBQUEsSUFBTTtvQkFDTixFQUFBLEdBQUssT0FBUSxDQUFBLEVBQUEsRUFKakI7aUJBQUEsTUFNSyxJQUFHLE9BQUEsR0FBVSxDQUFWLElBQWdCLENBQUMsT0FBQSxJQUFXLENBQVgsSUFBZ0IsT0FBQSxHQUFVLE9BQTNCLENBQW5CO29CQUVELE9BQU8sQ0FBQyxJQUFSLENBQWE7d0JBQUEsTUFBQSxFQUFRLFFBQVI7d0JBQWtCLEdBQUEsRUFBSyxFQUF2Qjt3QkFBMkIsQ0FBQSxHQUFBLENBQUEsRUFBSyxFQUFoQzt3QkFBb0MsTUFBQSxFQUFRLE9BQTVDO3FCQUFiO29CQUNBLEVBQUEsSUFBTTtvQkFDTixFQUFBLEdBQUssT0FBUSxDQUFBLEVBQUEsRUFKWjtpQkFBQSxNQUFBO29CQVFELEdBQUEsR0FBTSxJQUFBLENBQUssT0FBTDtvQkFDTixtQkFBRyxHQUFHLENBQUUsZ0JBQUwsS0FBZSxRQUFmLElBQTRCLEdBQUcsQ0FBQyxHQUFKLEdBQVUsR0FBRyxDQUFDLE1BQWQsS0FBd0IsRUFBdkQ7d0JBQ0ksR0FBRyxDQUFDLE1BQUosSUFBYyxFQURsQjtxQkFBQSxNQUFBO3dCQUdJLE9BQU8sQ0FBQyxJQUFSLENBQWE7NEJBQUEsTUFBQSxFQUFRLFFBQVI7NEJBQWtCLEdBQUEsRUFBSyxFQUF2Qjs0QkFBMkIsQ0FBQSxHQUFBLENBQUEsRUFBSyxFQUFoQzs0QkFBb0MsTUFBQSxFQUFRLENBQTVDO3lCQUFiLEVBSEo7O29CQUlBLEVBQUEsSUFBTTtvQkFDTixFQUFBLEdBQUssT0FBUSxDQUFBLEVBQUE7b0JBQ2IsRUFBQSxJQUFNO29CQUNOLEVBQUEsR0FBSyxPQUFRLENBQUEsRUFBQSxFQWhCWjtpQkFsQko7O1FBTlQ7UUEwQ0EsSUFBRyxFQUFBLEdBQUssT0FBTyxDQUFDLE1BQWhCO1lBRUksT0FBTyxDQUFDLElBQVIsQ0FBYTtnQkFBQSxNQUFBLEVBQVEsUUFBUjtnQkFBa0IsR0FBQSxFQUFLLEVBQXZCO2dCQUEyQixDQUFBLEdBQUEsQ0FBQSxFQUFLLEVBQWhDO2dCQUFvQyxNQUFBLEVBQVEsT0FBTyxDQUFDLE1BQVIsR0FBaUIsRUFBN0Q7YUFBYixFQUZKO1NBL0NKOztXQW1EQTtBQTFETzs7QUFrRVgsUUFBUSxDQUFDLFFBQVQsR0FBb0IsU0FBQyxPQUFELEVBQVUsT0FBVjtBQUVoQixRQUFBO0lBQUEsT0FBQSxHQUFVLFFBQUEsQ0FBUyxPQUFULEVBQWtCLE9BQWxCO0lBQ1YsSUFBZSxLQUFBLENBQU0sT0FBTixDQUFmO0FBQUEsZUFBTyxLQUFQOztJQUNBLE9BQUEsR0FBVTtJQUNWLE9BQUEsR0FBVTtBQUNWLFNBQUEseUNBQUE7O0FBQ0ksZ0JBQU8sQ0FBQyxDQUFDLE1BQVQ7QUFBQSxpQkFDUyxRQURUO0FBQ3VCLHVCQUFPO0FBRDlCLGlCQUVTLFFBRlQ7Z0JBRXVCLE9BQUEsSUFBVyxPQUFPLENBQUMsTUFBUixDQUFlLENBQUMsQ0FBQyxHQUFqQixFQUFzQixDQUFDLENBQUMsTUFBeEIsQ0FBK0IsQ0FBQyxJQUFoQyxDQUFBO0FBQXpCO0FBRlQsaUJBR1MsUUFIVDtnQkFHdUIsT0FBQSxJQUFXLE9BQU8sQ0FBQyxNQUFSLENBQWUsQ0FBQyxFQUFDLEdBQUQsRUFBaEIsRUFBc0IsQ0FBQyxDQUFDLE1BQXhCLENBQStCLENBQUMsSUFBaEMsQ0FBQTtBQUhsQztBQURKO1dBS0EsT0FBQSxLQUFXO0FBWEs7O0FBYXBCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAgICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMDAgIFxuMDAwICAgICAgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICBcbjAwMCAgICAgIDAwMCAgMDAwIDAgMDAwICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAgIDAwMDAwMCAgICAwMDAwMDAgICAgXG4wMDAgICAgICAwMDAgIDAwMCAgMDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIFxuMDAwMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAwMDAwICAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICBcbiMjI1xuXG57IGVtcHR5LCBsYXN0IH0gPSByZXF1aXJlICdreGsnXG5cbmxpbmVEaWZmID0gKG9sZExpbmUsIG5ld0xpbmUpIC0+XG4gICAgXG4gICAgY2hhbmdlcyA9IFtdXG4gICAgXG4gICAgb2kgPSAwICMgaW5kZXggaW4gb2xkTGluZVxuICAgIG5pID0gMCAjIGluZGV4IGluIG5ld0xpbmVcblxuICAgIGlmIG9sZExpbmUgIT0gbmV3TGluZVxuICAgIFxuICAgICAgICBvYyA9IG9sZExpbmVbb2ldXG4gICAgICAgIG5jID0gbmV3TGluZVtuaV1cbiAgICAgICAgXG4gICAgICAgIHdoaWxlIG9pIDwgb2xkTGluZS5sZW5ndGhcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgbm90IG5jPyAjIG5ldyBsaW5lIGhhcyBub3QgZW5vdWdoIGNoYXJhY3RlcnMsIG1hcmsgcmVtYWluaW5nIGNoYXJhY3RlcnMgaW4gb2xkIGxpbmUgYXMgZGVsZXRlZFxuICAgICAgICAgICAgICAgIGNoYW5nZXMucHVzaCBjaGFuZ2U6ICdkZWxldGUnLCBvbGQ6IG9pLCBuZXc6IG5pLCBsZW5ndGg6IG9sZExpbmUubGVuZ3RoLW9pXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGVsc2UgaWYgb2MgPT0gbmMgIyBzYW1lIGNoYXJhY3RlciBpbiBvbGQgYW5kIG5ld1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG9pICs9IDFcbiAgICAgICAgICAgICAgICBvYyA9IG9sZExpbmVbb2ldXG4gICAgICAgICAgICAgICAgbmkgKz0gMVxuICAgICAgICAgICAgICAgIG5jID0gbmV3TGluZVtuaV1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGVsc2UgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaW5zZXJ0cyA9IG5ld0xpbmUuc2xpY2UobmkpLmluZGV4T2Ygb2MgIyBpbnNlcnRpb25cbiAgICAgICAgICAgICAgICBkZWxldGVzID0gb2xkTGluZS5zbGljZShvaSkuaW5kZXhPZiBuYyAjIGRlbGV0aW9uXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgaW5zZXJ0cyA+IDAgYW5kIChkZWxldGVzIDw9IDAgb3IgaW5zZXJ0cyA8IGRlbGV0ZXMpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzLnB1c2ggY2hhbmdlOiAnaW5zZXJ0Jywgb2xkOiBvaSwgbmV3OiBuaSwgbGVuZ3RoOiBpbnNlcnRzXG4gICAgICAgICAgICAgICAgICAgIG5pICs9IGluc2VydHNcbiAgICAgICAgICAgICAgICAgICAgbmMgPSBuZXdMaW5lW25pXVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBlbHNlIGlmIGRlbGV0ZXMgPiAwIGFuZCAoaW5zZXJ0cyA8PSAwIG9yIGRlbGV0ZXMgPCBpbnNlcnRzKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlcy5wdXNoIGNoYW5nZTogJ2RlbGV0ZScsIG9sZDogb2ksIG5ldzogbmksIGxlbmd0aDogZGVsZXRlc1xuICAgICAgICAgICAgICAgICAgICBvaSArPSBkZWxldGVzXG4gICAgICAgICAgICAgICAgICAgIG9jID0gb2xkTGluZVtvaV1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBlbHNlICMgY2hhbmdlXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBsc3QgPSBsYXN0IGNoYW5nZXMgXG4gICAgICAgICAgICAgICAgICAgIGlmIGxzdD8uY2hhbmdlID09ICdjaGFuZ2UnIGFuZCBsc3Qub2xkICsgbHN0Lmxlbmd0aCA9PSBvaVxuICAgICAgICAgICAgICAgICAgICAgICAgbHN0Lmxlbmd0aCArPSAxXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZXMucHVzaCBjaGFuZ2U6ICdjaGFuZ2UnLCBvbGQ6IG9pLCBuZXc6IG5pLCBsZW5ndGg6IDFcbiAgICAgICAgICAgICAgICAgICAgb2kgKz0gMVxuICAgICAgICAgICAgICAgICAgICBvYyA9IG9sZExpbmVbb2ldXG4gICAgICAgICAgICAgICAgICAgIG5pICs9IDFcbiAgICAgICAgICAgICAgICAgICAgbmMgPSBuZXdMaW5lW25pXVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIGlmIG5pIDwgbmV3TGluZS5sZW5ndGggIyBtYXJrIHJlbWFpbmcgY2hhcmFjdGVycyBpbiBuZXcgbGluZSBhcyBpbnNlcnRlZFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjaGFuZ2VzLnB1c2ggY2hhbmdlOiAnaW5zZXJ0Jywgb2xkOiBvaSwgbmV3OiBuaSwgbGVuZ3RoOiBuZXdMaW5lLmxlbmd0aCAtIG5pXG4gICAgXG4gICAgY2hhbmdlc1xuXG4jIDAwMDAwMDAgICAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgICAgICBcbiMgMDAwMDAwMCAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwICAwMDAgMCAwMDAgIDAwMCAgMDAwMCAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwICAwMDAwICAwMDAgICAwMDAgIFxuIyAwMDAwMDAwICAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICBcblxubGluZURpZmYuaXNCb3JpbmcgPSAob2xkTGluZSwgbmV3TGluZSkgLT5cbiAgICBcbiAgICBjaGFuZ2VzID0gbGluZURpZmYgb2xkTGluZSwgbmV3TGluZVxuICAgIHJldHVybiB0cnVlIGlmIGVtcHR5IGNoYW5nZXNcbiAgICBpbnNlcnRzID0gJydcbiAgICBkZWxldGVzID0gJydcbiAgICBmb3IgYyBpbiBjaGFuZ2VzXG4gICAgICAgIHN3aXRjaCBjLmNoYW5nZVxuICAgICAgICAgICAgd2hlbiAnY2hhbmdlJyB0aGVuIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgd2hlbiAnZGVsZXRlJyB0aGVuIGRlbGV0ZXMgKz0gb2xkTGluZS5zdWJzdHIoYy5vbGQsIGMubGVuZ3RoKS50cmltKClcbiAgICAgICAgICAgIHdoZW4gJ2luc2VydCcgdGhlbiBpbnNlcnRzICs9IG5ld0xpbmUuc3Vic3RyKGMubmV3LCBjLmxlbmd0aCkudHJpbSgpXG4gICAgaW5zZXJ0cyA9PSBkZWxldGVzXG4gICAgXG5tb2R1bGUuZXhwb3J0cyA9IGxpbmVEaWZmXG4iXX0=
//# sourceURL=../../coffee/tools/linediff.coffee