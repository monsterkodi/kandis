// koffee 1.12.0

/*
000000000  00000000  00000000   00     00  000  000   000   0000000   000    
   000     000       000   000  000   000  000  0000  000  000   000  000    
   000     0000000   0000000    000000000  000  000 0 000  000000000  000    
   000     000       000   000  000 0 000  000  000  0000  000   000  000    
   000     00000000  000   000  000   000  000  000   000  000   000  0000000
 */
var Terminal, TextEditor, kerror, kpos, popup, post, prefs, ref, salt, stopEvent, syntax,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

ref = require('kxk'), post = ref.post, stopEvent = ref.stopEvent, prefs = ref.prefs, popup = ref.popup, kpos = ref.kpos, kerror = ref.kerror;

salt = require('../tools/salt');

TextEditor = require('../editor/texteditor');

syntax = require('../editor/syntax');

Terminal = (function(superClass) {
    extend(Terminal, superClass);

    function Terminal(viewElem) {
        this.showContextMenu = bind(this.showContextMenu, this);
        this.onContextMenu = bind(this.onContextMenu, this);
        this.dequeueMeta = bind(this.dequeueMeta, this);
        Terminal.__super__.constructor.call(this, viewElem, {
            features: ['Scrollbar', 'Numbers', 'Minimap', 'Meta'],
            fontSize: 15
        });
        this.view.addEventListener("contextmenu", this.onContextMenu);
        this.metaQueue = [];
        this.setHeader(prefs.get('terminal:header', false));
        this.initInvisibles();
        this.setLines(['']);
    }

    Terminal.prototype.appendLineDiss = function(text, diss) {
        var tail;
        if (diss == null) {
            diss = [];
        }
        if (diss != null ? diss.length : void 0) {
            this.syntax.setDiss(this.numLines(), diss);
        }
        tail = this.cursorPos()[1] === this.numLines() - 1 && this.numCursors() === 1;
        this.appendText(text);
        if (tail) {
            this.singleCursorAtPos([0, this.numLines() - 1]);
            return this.scroll.to(this.scroll.fullHeight);
        }
    };

    Terminal.prototype.appendDiss = function(diss) {
        return this.appendLineDiss(syntax.lineForDiss(diss), diss);
    };

    Terminal.prototype.appendMeta = function(meta) {
        var i, l, len, ref1;
        if (meta == null) {
            return kerror('Terminal.appendMeta -- no meta?');
        }
        this.meta.append(meta);
        if (meta.diss != null) {
            return this.appendLineDiss(syntax.lineForDiss(meta.diss), meta.diss);
        } else if (meta.clss === 'salt') {
            this.appendMeta({
                clss: 'spacer'
            });
            ref1 = salt(meta.text).split('\n');
            for (i = 0, len = ref1.length; i < len; i++) {
                l = ref1[i];
                this.appendMeta({
                    clss: 'spacer',
                    text: '# ' + l
                });
            }
            return this.appendMeta({
                clss: 'spacer'
            });
        } else if (meta.clss === 'termCommand') {
            return this.appendLineDiss(meta.command, syntax.dissForTextAndSyntax(meta.command, 'term'));
        } else if (meta.text != null) {
            return this.appendLineDiss(meta.text);
        } else {
            return this.appendLineDiss('');
        }
    };

    Terminal.prototype.queueMeta = function(meta) {
        this.metaQueue.push(meta);
        clearTimeout(this.metaTimer);
        return this.metaTimer = setTimeout(this.dequeueMeta, 0);
    };

    Terminal.prototype.dequeueMeta = function() {
        var count, meta;
        count = 0;
        while (meta = this.metaQueue.shift()) {
            this.appendMeta(meta);
            count += 1;
            if (count > 20) {
                break;
            }
        }
        clearTimeout(this.metaTimer);
        if (this.metaQueue.length) {
            return this.metaTimer = setTimeout(this.dequeueMeta, 0);
        }
    };

    Terminal.prototype.clear = function() {
        this.meta.clear();
        this.singleCursorAtPos([0, 0]);
        return Terminal.__super__.clear.call(this);
    };

    Terminal.prototype.setAutoClear = function(state) {
        return prefs.set('terminal:autoclear', state);
    };

    Terminal.prototype.getAutoClear = function() {
        return prefs.get('terminal:autoclear', true);
    };

    Terminal.prototype.setHeader = function(state) {
        return prefs.set('terminal:header', state);
    };

    Terminal.prototype.getHeader = function() {
        return prefs.get('terminal:header', true);
    };

    Terminal.prototype.doAutoClear = function() {
        if (this.getAutoClear()) {
            return this.clear();
        }
    };

    Terminal.prototype.onContextMenu = function(event) {
        return stopEvent(event, this.showContextMenu(kpos(event)));
    };

    Terminal.prototype.showContextMenu = function(absPos) {
        var opt;
        if (absPos == null) {
            absPos = kpos(this.view.getBoundingClientRect().left, this.view.getBoundingClientRect().top);
        }
        opt = {
            items: [
                {
                    text: 'Clear',
                    combo: 'alt+k',
                    cb: this.clear
                }, {
                    text: 'Close',
                    combo: 'alt+ctrl+k',
                    cb: window.split.hideTerminal
                }
            ]
        };
        opt.x = absPos.x;
        opt.y = absPos.y;
        return popup.menu(opt);
    };

    Terminal.prototype.handleModKeyComboCharEvent = function(mod, key, combo, char, event) {
        var href, split;
        if ('unhandled' !== Terminal.__super__.handleModKeyComboCharEvent.call(this, mod, key, combo, char, event)) {
            return;
        }
        switch (combo) {
            case 'enter':
                if (href = this.meta.hrefAtLineIndex(this.cursorPos()[1])) {
                    post.emit('loadFile', "" + href);
                }
                return;
            case 'ctrl+enter':
            case 'command+enter':
                if (href = this.meta.hrefAtLineIndex(this.cursorPos()[1])) {
                    post.emit('loadFile', "" + href);
                    window.editor.focus();
                }
                return;
            case 'ctrl+s':
            case 'command+s':
                if (this.meta.saveChanges()) {
                    return;
                }
                break;
            case 'esc':
                split = window.split;
                split.focus('commandline-editor');
                split["do"]('enlarge editor');
                return;
        }
        return 'unhandled';
    };

    return Terminal;

})(TextEditor);

module.exports = Terminal;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/win/terminal.coffee