// koffee 1.4.0

/*
000000000   0000000   0000000
   000     000   000  000   000
   000     000000000  0000000
   000     000   000  000   000
   000     000   000  0000000
 */
var File, Tab, Watcher, _, elem, kerror, klog, post, ref, render, slash, syntax, tooltip;

ref = require('kxk'), post = ref.post, tooltip = ref.tooltip, slash = ref.slash, elem = ref.elem, klog = ref.klog, kerror = ref.kerror, _ = ref._;

File = require('../tools/file');

Watcher = require('../tools/watcher');

render = require('../editor/render');

syntax = require('../editor/syntax');

Tab = (function() {
    function Tab(tabs, file) {
        this.tabs = tabs;
        this.file = file;
        this.dirty = false;
        this.div = elem({
            "class": 'tab',
            text: ''
        });
        this.tabs.div.appendChild(this.div);
        if (!this.file.startsWith('untitled')) {
            this.pkg = slash.pkg(this.file);
            if (this.pkg != null) {
                this.pkg = slash.basename(this.pkg);
            }
        }
        this.update();
        this.watcher = new Watcher(this.file);
    }

    Tab.prototype.foreignChanges = function(lineChanges) {
        if (this.foreign != null) {
            this.foreign;
        } else {
            this.foreign = [];
        }
        this.foreign.push(lineChanges);
        return this.update();
    };

    Tab.prototype.reload = function() {
        delete this.state;
        this.dirty = false;
        return this.update();
    };

    Tab.prototype.saveChanges = function() {
        var change, changes, i, j, len, len1, ref1, ref2;
        if (this.state) {
            if ((ref1 = this.foreign) != null ? ref1.length : void 0) {
                ref2 = this.foreign;
                for (i = 0, len = ref2.length; i < len; i++) {
                    changes = ref2[i];
                    for (j = 0, len1 = changes.length; j < len1; j++) {
                        change = changes[j];
                        switch (change.change) {
                            case 'changed':
                                this.state.state = this.state.state.changeLine(change.doIndex, change.after);
                                break;
                            case 'inserted':
                                this.state.state = this.state.state.insertLine(change.doIndex, change.after);
                                break;
                            case 'deleted':
                                this.state.state = this.state.state.deleteLine(change.doIndex);
                        }
                    }
                }
            }
            if (this.state.state) {
                return File.save(this.state.file, this.state.state.text(), (function(_this) {
                    return function(err) {
                        if (err) {
                            return kerror("tab.saveChanges failed " + err);
                        }
                        return _this.revert();
                    };
                })(this));
            } else {
                return kerror('tab.saveChanges -- nothing to save?');
            }
        } else {
            return post.emit('saveChanges');
        }
    };

    Tab.prototype.storeState = function() {
        if (window.editor.currentFile) {
            return this.state = window.editor["do"].tabState();
        }
    };

    Tab.prototype.restoreState = function() {
        var ref1;
        if (((ref1 = this.state) != null ? ref1.file : void 0) == null) {
            return kerror('no file in state?', this.state);
        }
        window.editor["do"].setTabState(this.state);
        return delete this.state;
    };

    Tab.prototype.update = function() {
        var diss, html, name, sep;
        this.div.innerHTML = '';
        this.div.classList.toggle('dirty', this.dirty);
        sep = '●';
        if (window.editor.newlineCharacters === '\r\n') {
            sep = '■';
        }
        this.div.appendChild(elem('span', {
            "class": 'dot',
            text: sep
        }));
        sep = "<span class='dot'>►</span>";
        this.pkgDiv = elem('span', {
            "class": 'pkg',
            html: this.pkg && (this.pkg + sep) || ''
        });
        this.div.appendChild(this.pkgDiv);
        diss = syntax.dissForTextAndSyntax(slash.basename(this.file), 'ko');
        name = elem('span', {
            "class": 'name',
            html: render.line(diss, {
                charWidth: 0
            })
        });
        this.div.appendChild(name);
        this.div.appendChild(elem('span', {
            "class": 'tabdrag'
        }));
        if (this.file != null) {
            diss = syntax.dissForTextAndSyntax(slash.tilde(this.file), 'ko');
            html = render.line(diss, {
                charWidth: 0
            });
            this.tooltip = new tooltip({
                elem: name,
                html: html,
                x: 0
            });
        }
        if (this.dirty) {
            this.div.appendChild(elem('span', {
                "class": 'dot',
                text: '●'
            }));
        }
        return this;
    };

    Tab.prototype.index = function() {
        return this.tabs.tabs.indexOf(this);
    };

    Tab.prototype.prev = function() {
        if (this.index() > 0) {
            return this.tabs.tab(this.index() - 1);
        }
    };

    Tab.prototype.next = function() {
        if (this.index() < this.tabs.numTabs() - 1) {
            return this.tabs.tab(this.index() + 1);
        }
    };

    Tab.prototype.nextOrPrev = function() {
        var ref1;
        return (ref1 = this.next()) != null ? ref1 : this.prev();
    };

    Tab.prototype.close = function() {
        var ref1;
        klog('close', this.file);
        this.watcher.stop();
        if (this.dirty) {
            this.saveChanges();
        }
        this.div.remove();
        if ((ref1 = this.tooltip) != null) {
            ref1.del();
        }
        post.emit('tabClosed', this.file);
        return this;
    };

    Tab.prototype.hidePkg = function() {
        var ref1;
        return (ref1 = this.pkgDiv) != null ? ref1.style.display = 'none' : void 0;
    };

    Tab.prototype.showPkg = function() {
        var ref1;
        return (ref1 = this.pkgDiv) != null ? ref1.style.display = 'initial' : void 0;
    };

    Tab.prototype.setDirty = function(dirty) {
        if (this.dirty !== dirty) {
            this.dirty = dirty;
            this.update();
        }
        return this;
    };

    Tab.prototype.revert = function() {
        delete this.foreign;
        delete this.state;
        this.dirty = false;
        this.update();
        this.tabs.update();
        return this;
    };

    Tab.prototype.activate = function() {
        post.emit('jumpToFile', {
            file: this.file
        });
        return this;
    };

    Tab.prototype.finishActivation = function() {
        var changes, i, len, ref1, ref2;
        this.setActive();
        if (this.state != null) {
            this.restoreState();
        }
        if ((ref1 = this.foreign) != null ? ref1.length : void 0) {
            ref2 = this.foreign;
            for (i = 0, len = ref2.length; i < len; i++) {
                changes = ref2[i];
                window.editor["do"].foreignChanges(changes);
            }
            delete this.foreign;
        }
        this.tabs.update();
        return this;
    };

    Tab.prototype.isActive = function() {
        return this.div.classList.contains('active');
    };

    Tab.prototype.setActive = function() {
        if (!this.isActive()) {
            this.div.classList.add('active');
        }
        return this;
    };

    Tab.prototype.clearActive = function() {
        this.div.classList.remove('active');
        return this;
    };

    return Tab;

})();

module.exports = Tab;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/win/tab.coffee