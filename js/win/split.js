// koffee 1.4.0

/*
 0000000  00000000   000      000  000000000
000       000   000  000      000     000   
0000000   00000000   000      000     000   
     000  000        000      000     000   
0000000   000        0000000  000     000
 */
var $, Flex, Split, _, event, kerror, post, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), post = ref.post, kerror = ref.kerror, $ = ref.$, _ = ref._;

event = require('events');

Flex = require('./flex/flex');

Split = (function() {
    function Split() {
        this.resized = bind(this.resized, this);
        this.hideTerminal = bind(this.hideTerminal, this);
        this.hideEditor = bind(this.hideEditor, this);
        this.restore = bind(this.restore, this);
        this.stash = bind(this.stash, this);
        this.emitSplit = bind(this.emitSplit, this);
        this.onDrag = bind(this.onDrag, this);
        this.commandlineHeight = 30;
        this.handleHeight = 6;
        this.elem = $('split');
        this.terminal = $('terminal');
        this.browser = $('browser');
        this.commandline = $('commandline');
        this.editor = $('editor');
        post.on('focus', this.focus);
        post.on('stash', this.stash);
        post.on('restore', this.restore);
        this.flex = new Flex({
            panes: [
                {
                    div: this.terminal,
                    collapsed: true
                }, {
                    div: this.commandline,
                    fixed: this.commandlineHeight
                }, {
                    div: this.editor
                }
            ],
            direction: 'vertical',
            handleSize: this.handleHeight,
            onDrag: this.onDrag,
            onDragEnd: this.onDrag,
            onPaneSize: this.onDrag,
            snapFirst: 20,
            snapLast: 100
        });
    }

    Split.prototype.onDrag = function() {
        if (this.flex != null) {
            return this.emitSplit();
        }
    };

    Split.prototype.emitSplit = function() {
        return post.emit('split', this.flex.panePositions());
    };

    Split.prototype.stash = function() {
        window.stash.set('split|flex', this.flex.getState());
        return window.stash.set('split|browser', this.flex.panes[0].div === this.browser);
    };

    Split.prototype.restore = function() {
        var state;
        if (state = window.stash.get('split|flex')) {
            this.flex.restoreState(state);
            this.emitSplit();
        } else {
            this["do"]('maximize editor');
        }
        if (this.flex.panes[0].div !== this.browser && window.stash.get('split|browser')) {
            return this.raise('browser');
        }
    };

    Split.prototype["do"] = function(sentence) {
        var action, delta, pos, what, words;
        sentence = sentence.trim();
        if (!sentence.length) {
            return;
        }
        words = sentence.split(/\s+/);
        action = words[0];
        what = words[1];
        switch (action) {
            case 'show':
                return this.show(what);
            case 'focus':
                return this.focus(what);
            case 'half':
                pos = this.flex.size() / 2;
                break;
            case 'third':
                pos = this.flex.size() / 3;
                break;
            case 'quart':
                pos = this.flex.size() / 4;
                break;
            case 'maximize':
                if (what === 'editor') {
                    return this.maximizeEditor();
                }
                delta = this.flex.size();
                break;
            case 'minimize':
                if (what === 'editor') {
                    return this.minimizeEditor();
                }
                delta = -this.flex.size();
                break;
            case 'enlarge':
                if (words[2] === 'by') {
                    delta = parseInt(words[3]);
                } else {
                    delta = parseInt(0.25 * this.termEditHeight());
                }
                break;
            case 'reduce':
                if (words[2] === 'by') {
                    delta = -parseInt(words[3]);
                } else {
                    delta = -parseInt(0.25 * this.termEditHeight());
                }
                break;
            default:
                return console.error("Split.do -- unknown action '" + action + "'");
        }
        switch (what) {
            case 'editor':
                return this.moveCommandLineBy(-delta);
            case 'terminal':
            case 'browser':
            case 'commandline':
                if (what !== 'commandline') {
                    this.raise(what);
                }
                if (delta != null) {
                    this.moveCommandLineBy(delta);
                }
                if (pos != null) {
                    this.flex.moveHandleToPos(this.flex.handles[0], pos);
                }
                return;
        }
        return console.error("Split.do -- unhandled do command? " + sentence + "?");
    };

    Split.prototype.maximizeEditor = function() {
        this.focus('editor');
        this.flex.expand('editor');
        this.hideCommandline();
        return this.flex.resized();
    };

    Split.prototype.minimizeEditor = function() {
        this.showCommandline();
        this.focus('commandline');
        return this.flex.moveHandleToPos(this.flex.handles[1], this.flex.size());
    };

    Split.prototype.show = function(n) {
        switch (n) {
            case 'terminal':
            case 'browser':
                return this.raise(n);
            case 'editor':
                this.flex.expand('editor');
                if (this.editorHeight() < this.flex.size() / 3) {
                    if (this.flex.handles[1].pos() > this.flex.size() / 3) {
                        this.flex.moveHandleToPos(this.flex.handles[1], this.flex.size() / 3);
                    }
                    if (this.flex.handles[2].pos() < 2 * this.flex.size() / 3) {
                        return this.flex.moveHandleToPos(this.flex.handles[2], 2 * this.flex.size() / 3);
                    }
                }
                break;
            case 'command':
                return this.flex.expand('commandline');
            default:
                return console.error("split.show -- unhandled: " + n + "!");
        }
    };

    Split.prototype.hideEditor = function() {
        return this.flex.collapse('editor');
    };

    Split.prototype.hideTerminal = function() {
        return this.flex.collapse('terminal');
    };

    Split.prototype.swap = function(old, nju) {
        if (this.flex.panes[0].div !== nju) {
            nju.style.height = (this.flex.sizeOfPane(0)) + "px";
            old.style.display = 'none';
            nju.style.display = 'block';
            return this.flex.panes[0].div = nju;
        }
    };

    Split.prototype.raise = function(n) {
        switch (n) {
            case 'terminal':
                this.swap(this.browser, this.terminal);
                break;
            case 'browser':
                this.swap(this.terminal, this.browser);
        }
        this.flex.calculate();
        if (n === 'editor') {
            if (this.editorHeight() < this.flex.size() / 8) {
                return this.flex.moveHandleToPos(this.flex.handles[0], 3 * this.flex.size() / 4);
            }
        } else {
            if (this.terminalHeight() < this.flex.size() / 8) {
                return this.flex.moveHandleToPos(this.flex.handles[0], this.flex.size() / 4);
            }
        }
    };

    Split.prototype.moveCommandLineBy = function(delta) {
        return this.flex.moveHandle({
            index: 1,
            pos: this.flex.posOfHandle(1) + delta
        });
    };

    Split.prototype.hideCommandline = function() {
        if (!this.flex.isCollapsed('commandline')) {
            this.flex.collapse('terminal');
            this.flex.collapse('commandline');
            return post.emit('commandline', 'hidden');
        }
    };

    Split.prototype.showCommandline = function() {
        if (this.flex.isCollapsed('commandline')) {
            this.flex.expand('commandline');
            return post.emit('commandline', 'shown');
        }
    };

    Split.prototype.focus = function(n) {
        var ref1, ref2;
        if (n === 'commandline') {
            n = 'commandline-editor';
        }
        if (n === '.' || ($(n) == null)) {
            return kerror("Split.focus -- can't find element '" + n + "'");
        }
        if (((ref1 = $(n)) != null ? ref1.focus : void 0) != null) {
            window.setLastFocus(n);
        }
        return (ref2 = $(n)) != null ? typeof ref2.focus === "function" ? ref2.focus() : void 0 : void 0;
    };

    Split.prototype.focusAnything = function() {
        if (this.editorVisible()) {
            return this.focus('editor');
        }
        if (this.terminalVisible()) {
            return this.focus('terminal');
        }
        return this.focus('commandline-editor');
    };

    Split.prototype.resized = function() {
        var main;
        main = $('main');
        this.elem.style.width = main.clientWidth + "px";
        this.elem.style.height = main.clientHeight + "px";
        this.flex.resized();
        return this.emitSplit();
    };

    Split.prototype.elemHeight = function() {
        return this.elem.getBoundingClientRect().height - this.handleHeight;
    };

    Split.prototype.splitPosY = function(i) {
        return this.flex.posOfHandle(i);
    };

    Split.prototype.terminalHeight = function() {
        return this.flex.sizeOfPane(0);
    };

    Split.prototype.editorHeight = function() {
        return this.flex.sizeOfPane(2);
    };

    Split.prototype.termEditHeight = function() {
        return this.terminalHeight() + this.commandlineHeight + this.editorHeight();
    };

    Split.prototype.commandlineVisible = function() {
        return !this.flex.isCollapsed('commandline');
    };

    Split.prototype.terminalVisible = function() {
        return !this.flex.isCollapsed('terminal');
    };

    Split.prototype.editorVisible = function() {
        return !this.flex.isCollapsed('editor');
    };

    return Split;

})();

module.exports = Split;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/win/split.coffee