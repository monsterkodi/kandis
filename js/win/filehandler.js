// koffee 1.12.0

/*
00000000  000  000      00000000  000   000   0000000   000   000  0000000    000      00000000  00000000 
000       000  000      000       000   000  000   000  0000  000  000   000  000      000       000   000
000000    000  000      0000000   000000000  000000000  000 0 000  000   000  000      0000000   0000000  
000       000  000      000       000   000  000   000  000  0000  000   000  000      000       000   000
000       000  0000000  00000000  000   000  000   000  000   000  0000000    0000000  00000000  000   000
 */
var File, FileHandler, _, dialog, electron, empty, filelist, first, kerror, klog, post, prefs, ref, remote, reversed, slash, valid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), _ = ref._, empty = ref.empty, filelist = ref.filelist, first = ref.first, kerror = ref.kerror, klog = ref.klog, post = ref.post, prefs = ref.prefs, reversed = ref.reversed, slash = ref.slash, valid = ref.valid;

File = require('../tools/file');

electron = require('electron');

remote = electron.remote;

dialog = remote.dialog;

FileHandler = (function() {
    function FileHandler() {
        this.saveFileAs = bind(this.saveFileAs, this);
        this.openFile = bind(this.openFile, this);
        this.saveChanges = bind(this.saveChanges, this);
        this.saveFile = bind(this.saveFile, this);
        this.saveAll = bind(this.saveAll, this);
        this.removeFile = bind(this.removeFile, this);
        this.reloadFile = bind(this.reloadFile, this);
        this.reloadTab = bind(this.reloadTab, this);
        this.openFiles = bind(this.openFiles, this);
        this.loadFile = bind(this.loadFile, this);
        post.on('reloadFile', this.reloadFile);
        post.on('removeFile', this.removeFile);
        post.on('saveFileAs', this.saveFileAs);
        post.on('saveFile', this.saveFile);
        post.on('saveAll', this.saveAll);
        post.on('saveChanges', this.saveChanges);
        post.on('reloadTab', this.reloadTab);
        post.on('loadFile', this.loadFile);
        post.on('openFile', this.openFile);
        post.on('openFiles', this.openFiles);
    }

    FileHandler.prototype.loadFile = function(file, opt) {
        var activeTab, err, fileExists, filePos, ref1, tab;
        if (opt == null) {
            opt = {};
        }
        if ((file != null) && file.length <= 0) {
            file = null;
        }
        editor.saveScrollCursorsAndSelections();
        if (file != null) {
            ref1 = slash.splitFilePos(file), file = ref1[0], filePos = ref1[1];
            if (!file.startsWith('untitled')) {
                file = slash.resolve(file);
                try {
                    process.chdir(slash.dir(file));
                } catch (error) {
                    err = error;
                    kerror(err);
                }
            }
        }
        if (file !== (typeof editor !== "undefined" && editor !== null ? editor.currentFile : void 0) || (opt != null ? opt.reload : void 0)) {
            if (fileExists = slash.fileExists(file)) {
                this.addToRecent(file);
            }
            tab = tabs.tab(file);
            if (empty(tab)) {
                tab = tabs.addTab(file);
            }
            if (activeTab = tabs.activeTab()) {
                if (tab !== activeTab) {
                    activeTab.clearActive();
                    if (activeTab.dirty) {
                        activeTab.storeState();
                    }
                }
            }
            editor.setCurrentFile(file);
            tab.finishActivation();
            editor.restoreScrollCursorsAndSelections();
            if (fileExists) {
                post.toOthers('fileLoaded', file, winID);
                post.emit('cwdSet', slash.dir(file));
            }
        }
        split.raise('editor');
        if ((filePos != null) && (filePos[0] || filePos[1])) {
            editor.singleCursorAtPos(filePos);
            return editor.scroll.cursorToTop();
        }
    };

    FileHandler.prototype.openFiles = function(ofiles, options) {
        var answer, file, files, i, len;
        if (ofiles != null ? ofiles.length : void 0) {
            files = filelist(ofiles, {
                ignoreHidden: false
            });
            if (files.length >= 10) {
                answer = dialog.showMessageBox({
                    type: 'warning',
                    buttons: ['Cancel', 'Open All'],
                    defaultId: 0,
                    cancelId: 0,
                    title: 'A Lot of Files Warning',
                    message: "You have selected " + files.length + " files.",
                    detail: 'Are you sure you want to open that many files?'
                });
                if (answer !== 1) {
                    return;
                }
            }
            if (files.length === 0) {
                return [];
            }
            window.stash.set('openFilePath', slash.dir(files[0]));
            if (!(options != null ? options.newWindow : void 0) && !(options != null ? options.newTab : void 0)) {
                file = slash.resolve(files.shift());
                this.loadFile(file);
            }
            for (i = 0, len = files.length; i < len; i++) {
                file = files[i];
                if (options != null ? options.newWindow : void 0) {
                    post.toMain('newWindowWithFile', file);
                } else {
                    post.emit('newTabWithFile', file);
                }
            }
            return ofiles;
        }
    };

    FileHandler.prototype.reloadTab = function(file) {
        if (file === (typeof editor !== "undefined" && editor !== null ? editor.currentFile : void 0)) {
            return this.loadFile(typeof editor !== "undefined" && editor !== null ? editor.currentFile : void 0, {
                reload: true
            });
        } else {
            return post.emit('revertFile', file);
        }
    };

    FileHandler.prototype.reloadFile = function(file) {
        var tab;
        if (!file) {
            return this.reloadActiveTab();
        } else if (tab = tabs.tab(file)) {
            if (tab === tabs.activeTab()) {
                return this.reloadActiveTab();
            } else {
                return tab.reload();
            }
        }
    };

    FileHandler.prototype.reloadActiveTab = function() {
        var tab;
        if (tab = tabs.activeTab()) {
            tab.reload();
        }
        this.loadFile(editor.currentFile, {
            reload: true
        });
        if (editor.currentFile != null) {
            return post.toOtherWins('reloadTab', editor.currentFile);
        }
    };

    FileHandler.prototype.removeFile = function(file) {
        var neighborTab, tab;
        if (tab = tabs.tab(file)) {
            if (tab === tabs.activeTab()) {
                if (neighborTab = tab.nextOrPrev()) {
                    neighborTab.activate();
                }
            }
            klog('removeFile', file);
            return tabs.closeTab(tab);
        }
    };

    FileHandler.prototype.saveAll = function() {
        var i, len, ref1, results, tab;
        ref1 = tabs.tabs;
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
            tab = ref1[i];
            if (tab.dirty) {
                if (tab === tabs.activeTab()) {
                    results.push(this.saveFile(tab.file));
                } else {
                    if (!tab.file.startsWith('untitled')) {
                        results.push(tab.saveChanges());
                    } else {
                        results.push(void 0);
                    }
                }
            } else {
                results.push(void 0);
            }
        }
        return results;
    };

    FileHandler.prototype.saveFile = function(file) {
        var err, tabState;
        if (file != null) {
            file;
        } else {
            file = editor.currentFile;
        }
        if ((file == null) || file.startsWith('untitled')) {
            this.saveFileAs();
            return;
        }
        post.emit('unwatch', file);
        tabState = editor["do"].tabState();
        try {
            post.emit('menuAction', 'doMacro', {
                actarg: 'req'
            });
        } catch (error) {
            err = error;
            kerror("macro req failed " + err);
        }
        return File.save(file, editor.text(), function(err, saved) {
            editor.saveScrollCursorsAndSelections();
            if (valid(err)) {
                kerror("saving '" + file + "' failed:", err);
            } else {
                editor.setCurrentFile(saved);
                editor["do"].history = tabState.history;
                editor["do"].saveIndex = tabState.history.length;
                post.toOthers('fileSaved', saved, window.winID);
                post.emit('saved', saved);
                post.emit('watch', saved);
            }
            return editor.restoreScrollCursorsAndSelections();
        });
    };

    FileHandler.prototype.addToRecent = function(file) {
        var recent;
        recent = window.state.get('recentFiles', []);
        if (file === first(recent)) {
            return;
        }
        _.pull(recent, file);
        recent.unshift(file);
        while (recent.length > prefs.get('recentFilesLength', 15)) {
            recent.pop();
        }
        window.state.set('recentFiles', recent);
        return commandline.commands.open.setHistory(reversed(recent));
    };

    FileHandler.prototype.saveChanges = function() {
        if ((editor.currentFile != null) && editor["do"].hasChanges() && slash.fileExists(editor.currentFile)) {
            return File.save(editor.currentFile, editor.text(), function(err) {
                if (err) {
                    return kerror("FileHandler.saveChanges failed " + err);
                }
            });
        }
    };

    FileHandler.prototype.openFile = function(opt) {
        var dir;
        if (typeof editor !== "undefined" && editor !== null ? editor.currentFile : void 0) {
            dir = slash.dir(editor.currentFile);
        }
        if (dir != null) {
            dir;
        } else {
            dir = slash.resolve('.');
        }
        return dialog.showOpenDialog({
            title: "Open File",
            defaultPath: window.stash.get('openFilePath', dir),
            properties: ['openFile', 'multiSelections']
        }).then((function(_this) {
            return function(result) {
                if (!result.cancelled && valid(result.filePaths)) {
                    return post.emit('openFiles', result.filePaths, opt);
                }
            };
        })(this));
    };

    FileHandler.prototype.saveFileAs = function() {
        var defaultPath;
        defaultPath = slash.unslash(typeof editor !== "undefined" && editor !== null ? editor.currentDir() : void 0);
        return dialog.showSaveDialog({
            title: 'Save File As',
            defaultPath: defaultPath
        }).then((function(_this) {
            return function(result) {
                if (!result.cancelled && result.filePath) {
                    _this.addToRecent(result.filePath);
                    return _this.saveFile(result.filePath);
                }
            };
        })(this));
    };

    return FileHandler;

})();

module.exports = FileHandler;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vY29mZmVlL3dpbiIsInNvdXJjZXMiOlsiZmlsZWhhbmRsZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBLDhIQUFBO0lBQUE7O0FBUUEsTUFBbUYsT0FBQSxDQUFRLEtBQVIsQ0FBbkYsRUFBRSxTQUFGLEVBQUssaUJBQUwsRUFBWSx1QkFBWixFQUFzQixpQkFBdEIsRUFBNkIsbUJBQTdCLEVBQXFDLGVBQXJDLEVBQTJDLGVBQTNDLEVBQWlELGlCQUFqRCxFQUF3RCx1QkFBeEQsRUFBa0UsaUJBQWxFLEVBQXlFOztBQUV6RSxJQUFBLEdBQVcsT0FBQSxDQUFRLGVBQVI7O0FBQ1gsUUFBQSxHQUFXLE9BQUEsQ0FBUSxVQUFSOztBQUNYLE1BQUEsR0FBVyxRQUFRLENBQUM7O0FBQ3BCLE1BQUEsR0FBVyxNQUFNLENBQUM7O0FBRVo7SUFFQyxxQkFBQTs7Ozs7Ozs7Ozs7UUFFQyxJQUFJLENBQUMsRUFBTCxDQUFRLFlBQVIsRUFBc0IsSUFBQyxDQUFBLFVBQXZCO1FBQ0EsSUFBSSxDQUFDLEVBQUwsQ0FBUSxZQUFSLEVBQXNCLElBQUMsQ0FBQSxVQUF2QjtRQUNBLElBQUksQ0FBQyxFQUFMLENBQVEsWUFBUixFQUFzQixJQUFDLENBQUEsVUFBdkI7UUFDQSxJQUFJLENBQUMsRUFBTCxDQUFRLFVBQVIsRUFBc0IsSUFBQyxDQUFBLFFBQXZCO1FBQ0EsSUFBSSxDQUFDLEVBQUwsQ0FBUSxTQUFSLEVBQXNCLElBQUMsQ0FBQSxPQUF2QjtRQUNBLElBQUksQ0FBQyxFQUFMLENBQVEsYUFBUixFQUFzQixJQUFDLENBQUEsV0FBdkI7UUFDQSxJQUFJLENBQUMsRUFBTCxDQUFRLFdBQVIsRUFBc0IsSUFBQyxDQUFBLFNBQXZCO1FBQ0EsSUFBSSxDQUFDLEVBQUwsQ0FBUSxVQUFSLEVBQXNCLElBQUMsQ0FBQSxRQUF2QjtRQUNBLElBQUksQ0FBQyxFQUFMLENB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UUFBcEI7MkJBQ0EsS0FBQyxDQUFBLFFBQUQsQ0FBVSxNQUFNLENBQUMsUUFBakIsRUFGSjs7WUFEcUU7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXpFO0lBSFE7Ozs7OztBQVFoQixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwMDAwMDAgIDAwMCAgMDAwICAgICAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwICAgICAgMDAwMDAwMDAgIDAwMDAwMDAwIFxuMDAwICAgICAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgIDAwMFxuMDAwMDAwICAgIDAwMCAgMDAwICAgICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwMDAwMCAgIDAwMDAwMDAgIFxuMDAwICAgICAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgIDAwMFxuMDAwICAgICAgIDAwMCAgMDAwMDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMFxuIyMjXG5cbnsgXywgZW1wdHksIGZpbGVsaXN0LCBmaXJzdCwga2Vycm9yLCBrbG9nLCBwb3N0LCBwcmVmcywgcmV2ZXJzZWQsIHNsYXNoLCB2YWxpZCB9ID0gcmVxdWlyZSAna3hrJ1xuXG5GaWxlICAgICA9IHJlcXVpcmUgJy4uL3Rvb2xzL2ZpbGUnXG5lbGVjdHJvbiA9IHJlcXVpcmUgJ2VsZWN0cm9uJ1xucmVtb3RlICAgPSBlbGVjdHJvbi5yZW1vdGVcbmRpYWxvZyAgID0gcmVtb3RlLmRpYWxvZ1xuXG5jbGFzcyBGaWxlSGFuZGxlclxuXG4gICAgQDogLT5cblxuICAgICAgICBwb3N0Lm9uICdyZWxvYWRGaWxlJyAgQHJlbG9hZEZpbGVcbiAgICAgICAgcG9zdC5vbiAncmVtb3ZlRmlsZScgIEByZW1vdmVGaWxlXG4gICAgICAgIHBvc3Qub24gJ3NhdmVGaWxlQXMnICBAc2F2ZUZpbGVBc1xuICAgICAgICBwb3N0Lm9uICdzYXZlRmlsZScgICAgQHNhdmVGaWxlXG4gICAgICAgIHBvc3Qub24gJ3NhdmVBbGwnICAgICBAc2F2ZUFsbFxuICAgICAgICBwb3N0Lm9uICdzYXZlQ2hhbmdlcycgQHNhdmVDaGFuZ2VzXG4gICAgICAgIHBvc3Qub24gJ3JlbG9hZFRhYicgICBAcmVsb2FkVGFiXG4gICAgICAgIHBvc3Qub24gJ2xvYWRGaWxlJyAgICBAbG9hZEZpbGVcbiAgICAgICAgcG9zdC5vbiAnb3BlbkZpbGUnICAgIEBvcGVuRmlsZVxuICAgICAgICBwb3N0Lm9uICdvcGVuRmlsZXMnICAgQG9wZW5GaWxlc1xuICAgICAgICBcbiAgICAjIDAwMCAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgICAgICAgIDAwMDAwMDAwICAwMDAgIDAwMCAgICAgIDAwMDAwMDAwICBcbiAgICAjIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAgIDAwMCAgICAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICAwMDAgICAwMDAgICAgICAgIDAwMDAwMCAgICAwMDAgIDAwMCAgICAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAgIDAwMCAgICAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICBcbiAgICAjIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwICAgICAgICAgIDAwMCAgICAgICAwMDAgIDAwMDAwMDAgIDAwMDAwMDAwICBcbiAgICBcbiAgICBsb2FkRmlsZTogKGZpbGUsIG9wdD17fSkgPT5cbiAgICBcbiAgICAgICAgZmlsZSA9IG51bGwgaWYgZmlsZT8gYW5kIGZpbGUubGVuZ3RoIDw9IDBcbiAgICBcbiAgICAgICAgZWRpdG9yLnNhdmVTY3JvbGxDdXJzb3JzQW5kU2VsZWN0aW9ucygpXG4gICAgXG4gICAgICAgIGlmIGZpbGU/XG4gICAgICAgICAgICBbZmlsZSwgZmlsZVBvc10gPSBzbGFzaC5zcGxpdEZpbGVQb3MgZmlsZVxuICAgICAgICAgICAgaWYgbm90IGZpbGUuc3RhcnRzV2l0aCAndW50aXRsZWQnXG4gICAgICAgICAgICAgICAgZmlsZSA9IHNsYXNoLnJlc29sdmUgZmlsZVxuICAgICAgICAgICAgICAgIHRyeVxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmNoZGlyIHNsYXNoLmRpciBmaWxlXG4gICAgICAgICAgICAgICAgY2F0Y2ggZXJyXG4gICAgICAgICAgICAgICAgICAgIGtlcnJvciBlcnJcbiAgICBcbiAgICAgICAgaWYgZmlsZSAhPSBlZGl0b3I/LmN1cnJlbnRGaWxlIG9yIG9wdD8ucmVsb2FkXG4gICAgXG4gICAgICAgICAgICBpZiBmaWxlRXhpc3RzID0gc2xhc2guZmlsZUV4aXN0cyBmaWxlXG4gICAgICAgICAgICAgICAgQGFkZFRvUmVjZW50IGZpbGVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGFiID0gdGFicy50YWIgZmlsZVxuICAgICAgICAgICAgaWYgZW1wdHkgdGFiXG4gICAgICAgICAgICAgICAgdGFiID0gdGFicy5hZGRUYWIgZmlsZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiBhY3RpdmVUYWIgPSB0YWJzLmFjdGl2ZVRhYigpXG4gICAgICAgICAgICAgICAgaWYgdGFiICE9IGFjdGl2ZVRhYlxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVUYWIuY2xlYXJBY3RpdmUoKVxuICAgICAgICAgICAgICAgICAgICBpZiBhY3RpdmVUYWIuZGlydHlcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVRhYi5zdG9yZVN0YXRlKClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGVkaXRvci5zZXRDdXJyZW50RmlsZSBmaWxlXG4gICAgXG4gICAgICAgICAgICB0YWIuZmluaXNoQWN0aXZhdGlvbigpICMgc2V0QWN0aXZlLCByZXN0b3JlIHN0YXRlLCB1cGRhdGUgdGFic1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBlZGl0b3IucmVzdG9yZVNjcm9sbEN1cnNvcnNBbmRTZWxlY3Rpb25zKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgZmlsZUV4aXN0c1xuICAgICAgICAgICAgICAgIHBvc3QudG9PdGhlcnMgJ2ZpbGVMb2FkZWQnIGZpbGUsIHdpbklEICMgaW5kZXhlclxuICAgICAgICAgICAgICAgIHBvc3QuZW1pdCAnY3dkU2V0JyBzbGFzaC5kaXIgZmlsZVxuICAgICAgICAgICAgICAgIFxuICAgICAgICBzcGxpdC5yYWlzZSAnZWRpdG9yJ1xuICAgIFxuICAgICAgICBpZiBmaWxlUG9zPyBhbmQgKGZpbGVQb3NbMF0gb3IgZmlsZVBvc1sxXSlcbiAgICAgICAgICAgIGVkaXRvci5zaW5nbGVDdXJzb3JBdFBvcyBmaWxlUG9zXG4gICAgICAgICAgICBlZGl0b3Iuc2Nyb2xsLmN1cnNvclRvVG9wKClcblxuICAgICMgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAwICAwMDAgICAwMDAgICAgICAgIDAwMDAwMDAwICAwMDAgIDAwMCAgICAgIDAwMDAwMDAwICAgMDAwMDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAwICAwMDAgICAgICAgIDAwMCAgICAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwIDAgMDAwICAgICAgICAwMDAwMDAgICAgMDAwICAwMDAgICAgICAwMDAwMDAwICAgMDAwMDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgIDAwMCAgICAgICAwMDAgIDAwMDAgICAgICAgIDAwMCAgICAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICAgICAgIDAwMFxuICAgICMgIDAwMDAwMDAgICAwMDAgICAgICAgIDAwMDAwMDAwICAwMDAgICAwMDAgICAgICAgIDAwMCAgICAgICAwMDAgIDAwMDAwMDAgIDAwMDAwMDAwICAwMDAwMDAwXG4gICAgXG4gICAgb3BlbkZpbGVzOiAob2ZpbGVzLCBvcHRpb25zKSA9PiAjIGNhbGxlZCBmcm9tIGZpbGUgZGlhbG9nLCBvcGVuIGNvbW1hbmQgYW5kIGJyb3dzZXJcbiAgICBcbiAgICAgICAgaWYgb2ZpbGVzPy5sZW5ndGhcbiAgICBcbiAgICAgICAgICAgIGZpbGVzID0gZmlsZWxpc3Qgb2ZpbGVzLCBpZ25vcmVIaWRkZW46IGZhbHNlXG4gICAgXG4gICAgICAgICAgICBpZiBmaWxlcy5sZW5ndGggPj0gMTBcbiAgICAgICAgICAgICAgICBhbnN3ZXIgPSBkaWFsb2cuc2hvd01lc3NhZ2VCb3hcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogICAgICAgJ3dhcm5pbmcnXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbnM6ICAgIFsnQ2FuY2VsJyAnT3BlbiBBbGwnXVxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0SWQ6ICAwXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbElkOiAgIDBcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICAgICAgJ0EgTG90IG9mIEZpbGVzIFdhcm5pbmcnXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICAgIFwiWW91IGhhdmUgc2VsZWN0ZWQgI3tmaWxlcy5sZW5ndGh9IGZpbGVzLlwiXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbDogICAgICdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gb3BlbiB0aGF0IG1hbnkgZmlsZXM/J1xuICAgICAgICAgICAgICAgIHJldHVybiBpZiBhbnN3ZXIgIT0gMVxuICAgIFxuICAgICAgICAgICAgaWYgZmlsZXMubGVuZ3RoID09IDBcbiAgICAgICAgICAgICAgICByZXR1cm4gW11cbiAgICBcbiAgICAgICAgICAgIHdpbmRvdy5zdGFzaC5zZXQgJ29wZW5GaWxlUGF0aCcgc2xhc2guZGlyIGZpbGVzWzBdXG4gICAgXG4gICAgICAgICAgICBpZiBub3Qgb3B0aW9ucz8ubmV3V2luZG93IGFuZCBub3Qgb3B0aW9ucz8ubmV3VGFiXG4gICAgICAgICAgICAgICAgZmlsZSA9IHNsYXNoLnJlc29sdmUgZmlsZXMuc2hpZnQoKVxuICAgICAgICAgICAgICAgIEBsb2FkRmlsZSBmaWxlXG4gICAgXG4gICAgICAgICAgICBmb3IgZmlsZSBpbiBmaWxlc1xuICAgICAgICAgICAgICAgIGlmIG9wdGlvbnM/Lm5ld1dpbmRvd1xuICAgICAgICAgICAgICAgICAgICBwb3N0LnRvTWFpbiAnbmV3V2luZG93V2l0aEZpbGUnIGZpbGVcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHBvc3QuZW1pdCAnbmV3VGFiV2l0aEZpbGUnIGZpbGVcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBvZmlsZXNcbiAgICAgICAgICBcbiAgICAjIDAwMDAwMDAwICAgMDAwMDAwMDAgIDAwMCAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgXG4gICAgXG4gICAgcmVsb2FkVGFiOiAoZmlsZSkgPT5cbiAgICAgICAgXG4gICAgICAgIGlmIGZpbGUgPT0gZWRpdG9yPy5jdXJyZW50RmlsZVxuICAgICAgICAgICAgQGxvYWRGaWxlIGVkaXRvcj8uY3VycmVudEZpbGUsIHJlbG9hZDp0cnVlXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHBvc3QuZW1pdCAncmV2ZXJ0RmlsZScgZmlsZVxuICAgICAgICAgICAgICAgIFxuICAgICMgMDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwICAgICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgICAgICAgMDAwMDAwMDAgIDAwMCAgMDAwICAgICAgMDAwMDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAgMDAwICAgICAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIFxuICAgICMgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgICAgMDAwICAgMDAwICAwMDAwMDAwMDAgIDAwMCAgIDAwMCAgICAgICAgMDAwMDAwICAgIDAwMCAgMDAwICAgICAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAgMDAwICAgICAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgICAgICAgMDAwICAgICAgIDAwMCAgMDAwMDAwMCAgMDAwMDAwMDAgIFxuICAgIFxuICAgIHJlbG9hZEZpbGU6IChmaWxlKSA9PlxuICAgICAgICBcbiAgICAgICAgaWYgbm90IGZpbGVcbiAgICAgICAgICAgIEByZWxvYWRBY3RpdmVUYWIoKVxuICAgICAgICBlbHNlIGlmIHRhYiA9IHRhYnMudGFiIGZpbGVcbiAgICAgICAgICAgIGlmIHRhYiA9PSB0YWJzLmFjdGl2ZVRhYigpXG4gICAgICAgICAgICAgICAgQHJlbG9hZEFjdGl2ZVRhYigpXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGFiLnJlbG9hZCgpXG4gICAgICAgICAgICBcbiAgICByZWxvYWRBY3RpdmVUYWI6IC0+XG4gICAgICAgIFxuICAgICAgICBpZiB0YWIgPSB0YWJzLmFjdGl2ZVRhYigpXG4gICAgICAgICAgICB0YWIucmVsb2FkKClcbiAgICAgICAgXG4gICAgICAgIEBsb2FkRmlsZSBlZGl0b3IuY3VycmVudEZpbGUsIHJlbG9hZDp0cnVlXG4gICAgXG4gICAgICAgIGlmIGVkaXRvci5jdXJyZW50RmlsZT9cbiAgICAgICAgICAgIHBvc3QudG9PdGhlcldpbnMgJ3JlbG9hZFRhYicsIGVkaXRvci5jdXJyZW50RmlsZVxuXG4gICAgIyAwMDAwMDAwMCAgIDAwMDAwMDAwICAwMCAgICAgMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMCAgICAgICAgMDAwMDAwMDAgIDAwMCAgMDAwICAgICAgMDAwMDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAgICAgIDAwMCAgICAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICBcbiAgICAjIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwICAgMDAwICAgMDAwIDAwMCAgIDAwMDAwMDAgICAgICAgICAwMDAwMDAgICAgMDAwICAwMDAgICAgICAwMDAwMDAwICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgICAgICAgMDAwICAgICAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgICAgICAwICAgICAgMDAwMDAwMDAgICAgICAgIDAwMCAgICAgICAwMDAgIDAwMDAwMDAgIDAwMDAwMDAwICBcbiAgICBcbiAgICByZW1vdmVGaWxlOiAoZmlsZSkgPT5cbiAgICAgICAgXG4gICAgICAgIGlmIHRhYiA9IHRhYnMudGFiIGZpbGVcbiAgICAgICAgICAgIGlmIHRhYiA9PSB0YWJzLmFjdGl2ZVRhYigpXG4gICAgICAgICAgICAgICAgaWYgbmVpZ2hib3JUYWIgPSB0YWIubmV4dE9yUHJldigpXG4gICAgICAgICAgICAgICAgICAgIG5laWdoYm9yVGFiLmFjdGl2YXRlKClcbiAgICAgICAgICAgIGtsb2cgJ3JlbW92ZUZpbGUnIGZpbGVcbiAgICAgICAgICAgIHRhYnMuY2xvc2VUYWIgdGFiXG4gICAgICAgICAgICBcbiAgICAjICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgICAgICAgICAwMDAwMDAwICAgMDAwICAgICAgMDAwICAgICAgXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgIFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAwMCAgIDAwMCAwMDAgICAwMDAwMDAwICAgICAgICAgMDAwMDAwMDAwICAwMDAgICAgICAwMDAgICAgICBcbiAgICAjICAgICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgXG4gICAgIyAwMDAwMDAwICAgMDAwICAgMDAwICAgICAgMCAgICAgIDAwMDAwMDAwICAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAgIDAwMDAwMDAgIFxuICAgIFxuICAgIHNhdmVBbGw6ID0+XG4gICAgICAgIFxuICAgICAgICBmb3IgdGFiIGluIHRhYnMudGFic1xuICAgICAgICAgICAgaWYgdGFiLmRpcnR5IFxuICAgICAgICAgICAgICAgIGlmIHRhYiA9PSB0YWJzLmFjdGl2ZVRhYigpXG4gICAgICAgICAgICAgICAgICAgIEBzYXZlRmlsZSB0YWIuZmlsZVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgaWYgbm90IHRhYi5maWxlLnN0YXJ0c1dpdGggJ3VudGl0bGVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFiLnNhdmVDaGFuZ2VzKClcblxuICAgICMgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMCAgICAgICAgMDAwMDAwMDAgIDAwMCAgMDAwICAgICAgMDAwMDAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgICAgICAgMDAwICAgICAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAwMCAgIDAwMCAwMDAgICAwMDAwMDAwICAgICAgICAgMDAwMDAwICAgIDAwMCAgMDAwICAgICAgMDAwMDAwMCAgIFxuICAgICMgICAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgICAgICAgMDAwICAgICAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIFxuICAgICMgMDAwMDAwMCAgIDAwMCAgIDAwMCAgICAgIDAgICAgICAwMDAwMDAwMCAgICAgICAgMDAwICAgICAgIDAwMCAgMDAwMDAwMCAgMDAwMDAwMDAgIFxuICAgIFxuICAgIHNhdmVGaWxlOiAoZmlsZSkgPT5cbiAgICBcbiAgICAgICAgZmlsZSA/PSBlZGl0b3IuY3VycmVudEZpbGVcbiAgICAgICAgXG4gICAgICAgIGlmIG5vdCBmaWxlPyBvciBmaWxlLnN0YXJ0c1dpdGggJ3VudGl0bGVkJ1xuICAgICAgICAgICAgQHNhdmVGaWxlQXMoKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgIFxuICAgICAgICBwb3N0LmVtaXQgJ3Vud2F0Y2gnIGZpbGVcbiAgICAgICAgXG4gICAgICAgIHRhYlN0YXRlID0gZWRpdG9yLmRvLnRhYlN0YXRlKClcbiAgICAgICAgXG4gICAgICAgIHRyeVxuICAgICAgICAgICAgcG9zdC5lbWl0ICdtZW51QWN0aW9uJyAnZG9NYWNybycgYWN0YXJnOidyZXEnICMgISEhISEhIVxuICAgICAgICBjYXRjaCBlcnJcbiAgICAgICAgICAgIGtlcnJvciBcIm1hY3JvIHJlcSBmYWlsZWQgI3tlcnJ9XCJcbiAgICAgICAgXG4gICAgICAgIEZpbGUuc2F2ZSBmaWxlLCBlZGl0b3IudGV4dCgpLCAoZXJyLCBzYXZlZCkgLT5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZWRpdG9yLnNhdmVTY3JvbGxDdXJzb3JzQW5kU2VsZWN0aW9ucygpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIHZhbGlkIGVyclxuICAgICAgICAgICAgICAgIGtlcnJvciBcInNhdmluZyAnI3tmaWxlfScgZmFpbGVkOlwiIGVyclxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGVkaXRvci5zZXRDdXJyZW50RmlsZSAgICAgc2F2ZWRcbiAgICAgICAgICAgICAgICBlZGl0b3IuZG8uaGlzdG9yeSAgID0gdGFiU3RhdGUuaGlzdG9yeVxuICAgICAgICAgICAgICAgIGVkaXRvci5kby5zYXZlSW5kZXggPSB0YWJTdGF0ZS5oaXN0b3J5Lmxlbmd0aFxuICAgICAgICAgICAgICAgIHBvc3QudG9PdGhlcnMgJ2ZpbGVTYXZlZCcgc2F2ZWQsIHdpbmRvdy53aW5JRFxuICAgICAgICAgICAgICAgIHBvc3QuZW1pdCAgICAgJ3NhdmVkJyAgICAgc2F2ZWRcbiAgICAgICAgICAgICAgICBwb3N0LmVtaXQgICAgICd3YXRjaCcgICAgIHNhdmVkXG5cbiAgICAgICAgICAgIGVkaXRvci5yZXN0b3JlU2Nyb2xsQ3Vyc29yc0FuZFNlbGVjdGlvbnMoKVxuICAgICAgICAgICAgICAgICAgXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgICAgICAgICAwMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwMCAgMDAwICAgICAwMDAgICAgIFxuICAgICMgMDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgICAgIDAwMDAwMDAgICAwMDAgMCAwMDAgICAgIDAwMCAgICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgICAgIDAwMCAgMDAwMCAgICAgMDAwICAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwICAgICAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuICAgIFxuICAgIGFkZFRvUmVjZW50OiAoZmlsZSkgLT5cbiAgICBcbiAgICAgICAgcmVjZW50ID0gd2luZG93LnN0YXRlLmdldCAncmVjZW50RmlsZXMnIFtdXG4gICAgICAgIHJldHVybiBpZiBmaWxlID09IGZpcnN0IHJlY2VudFxuICAgICAgICBfLnB1bGwgcmVjZW50LCBmaWxlXG4gICAgICAgIHJlY2VudC51bnNoaWZ0IGZpbGVcbiAgICAgICAgd2hpbGUgcmVjZW50Lmxlbmd0aCA+IHByZWZzLmdldCAncmVjZW50RmlsZXNMZW5ndGgnIDE1XG4gICAgICAgICAgICByZWNlbnQucG9wKClcbiAgICBcbiAgICAgICAgd2luZG93LnN0YXRlLnNldCAncmVjZW50RmlsZXMnIHJlY2VudFxuICAgICAgICBjb21tYW5kbGluZS5jb21tYW5kcy5vcGVuLnNldEhpc3RvcnkgcmV2ZXJzZWQgcmVjZW50XG4gICAgICAgICAgICAgICAgXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwICAgICAgICAgMDAwMDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgICAgMDAwICAgICAgIDAwMCAgICAgICBcbiAgICAjIDAwMDAwMDAgICAwMDAwMDAwMDAgICAwMDAgMDAwICAgMDAwMDAwMCAgICAgICAgIDAwMCAgICAgICAwMDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwIDAgMDAwICAwMDAgIDAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgXG4gICAgIyAgICAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgICAgICAwMDAgIFxuICAgICMgMDAwMDAwMCAgIDAwMCAgIDAwMCAgICAgIDAgICAgICAwMDAwMDAwMCAgICAgICAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgIDAwMDAwMDAgICBcbiAgICBcbiAgICBzYXZlQ2hhbmdlczogPT5cbiAgICAgICAgXG4gICAgICAgIGlmIGVkaXRvci5jdXJyZW50RmlsZT8gYW5kIGVkaXRvci5kby5oYXNDaGFuZ2VzKCkgYW5kIHNsYXNoLmZpbGVFeGlzdHMgZWRpdG9yLmN1cnJlbnRGaWxlXG4gICAgICAgICAgICBGaWxlLnNhdmUgZWRpdG9yLmN1cnJlbnRGaWxlLCBlZGl0b3IudGV4dCgpLCAoZXJyKSAtPlxuICAgICAgICAgICAgICAgIGtlcnJvciBcIkZpbGVIYW5kbGVyLnNhdmVDaGFuZ2VzIGZhaWxlZCAje2Vycn1cIiBpZiBlcnJcbiAgICBcbiAgICAjICAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwICAgMDAwICAgICAgICAwMDAwMDAwMCAgMDAwICAwMDAgICAgICAwMDAwMDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMDAgIDAwMCAgICAgICAgMDAwICAgICAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgMCAwMDAgICAgICAgIDAwMDAwMCAgICAwMDAgIDAwMCAgICAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgICAwMDAgICAgICAgMDAwICAwMDAwICAgICAgICAwMDAgICAgICAgMDAwICAwMDAgICAgICAwMDAgICAgICAgXG4gICAgIyAgMDAwMDAwMCAgIDAwMCAgICAgICAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgICAgICAgMDAwICAgICAgIDAwMCAgMDAwMDAwMCAgMDAwMDAwMDAgIFxuICAgIFxuICAgIG9wZW5GaWxlOiAob3B0KSA9PlxuICAgIFxuICAgICAgICBkaXIgPSBzbGFzaC5kaXIgZWRpdG9yLmN1cnJlbnRGaWxlIGlmIGVkaXRvcj8uY3VycmVudEZpbGVcbiAgICAgICAgZGlyID89IHNsYXNoLnJlc29sdmUgJy4nXG4gICAgICAgIGRpYWxvZy5zaG93T3BlbkRpYWxvZyhcbiAgICAgICAgICAgIHRpdGxlOiBcIk9wZW4gRmlsZVwiXG4gICAgICAgICAgICBkZWZhdWx0UGF0aDogd2luZG93LnN0YXNoLmdldCAnb3BlbkZpbGVQYXRoJyBkaXJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IFsnb3BlbkZpbGUnICdtdWx0aVNlbGVjdGlvbnMnXSkudGhlbiAocmVzdWx0KSA9PlxuICAgICAgICAgICAgICAgIGlmIG5vdCByZXN1bHQuY2FuY2VsbGVkIGFuZCB2YWxpZCByZXN1bHQuZmlsZVBhdGhzXG4gICAgICAgICAgICAgICAgICAgIHBvc3QuZW1pdCAnb3BlbkZpbGVzJyByZXN1bHQuZmlsZVBhdGhzLCBvcHRcbiAgICAgICAgICAgICAgICBcbiAgICAjICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgICAgICAgIDAwMDAwMDAwICAwMDAgIDAwMCAgICAgIDAwMDAwMDAwICAgICAwMDAwMDAwICAgIDAwMDAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgICAgICAgMDAwICAgICAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgXG4gICAgIyAwMDAwMDAwICAgMDAwMDAwMDAwICAgMDAwIDAwMCAgIDAwMDAwMDAgICAgICAgICAwMDAwMDAgICAgMDAwICAwMDAgICAgICAwMDAwMDAwICAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICBcbiAgICAjICAgICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgICAgICAgIDAwMCAgICAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICAgIDAwMCAgIDAwMCAgICAgICAwMDAgIFxuICAgICMgMDAwMDAwMCAgIDAwMCAgIDAwMCAgICAgIDAgICAgICAwMDAwMDAwMCAgICAgICAgMDAwICAgICAgIDAwMCAgMDAwMDAwMCAgMDAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgXG4gICAgXG4gICAgc2F2ZUZpbGVBczogPT5cbiAgICBcbiAgICAgICAgZGVmYXVsdFBhdGggPSBzbGFzaC51bnNsYXNoIGVkaXRvcj8uY3VycmVudERpcigpXG4gICAgICAgIGRpYWxvZy5zaG93U2F2ZURpYWxvZyh0aXRsZTonU2F2ZSBGaWxlIEFzJyBkZWZhdWx0UGF0aDpkZWZhdWx0UGF0aCkudGhlbiAocmVzdWx0KSA9PlxuICAgICAgICAgICAgaWYgbm90IHJlc3VsdC5jYW5jZWxsZWQgYW5kIHJlc3VsdC5maWxlUGF0aFxuICAgICAgICAgICAgICAgIEBhZGRUb1JlY2VudCByZXN1bHQuZmlsZVBhdGhcbiAgICAgICAgICAgICAgICBAc2F2ZUZpbGUgcmVzdWx0LmZpbGVQYXRoXG4gICAgICAgICAgICBcbm1vZHVsZS5leHBvcnRzID0gRmlsZUhhbmRsZXJcbiJdfQ==
//# sourceURL=../../coffee/win/filehandler.coffee