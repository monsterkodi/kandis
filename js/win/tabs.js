// koffee 1.4.0

/*
000000000   0000000   0000000     0000000
   000     000   000  000   000  000
   000     000000000  0000000    0000000
   000     000   000  000   000       000
   000     000   000  0000000    0000000
 */
var $, Tab, Tabs, _, drag, elem, empty, first, kerror, klog, kpos, last, popup, post, ref, slash, stopEvent, valid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), post = ref.post, stopEvent = ref.stopEvent, popup = ref.popup, valid = ref.valid, empty = ref.empty, first = ref.first, last = ref.last, slash = ref.slash, elem = ref.elem, drag = ref.drag, kpos = ref.kpos, klog = ref.klog, kerror = ref.kerror, $ = ref.$, _ = ref._;

Tab = require('./tab');

Tabs = (function() {
    function Tabs(titlebar) {
        this.showContextMenu = bind(this.showContextMenu, this);
        this.onContextMenu = bind(this.onContextMenu, this);
        this.onDirty = bind(this.onDirty, this);
        this.revertFile = bind(this.revertFile, this);
        this.restore = bind(this.restore, this);
        this.stash = bind(this.stash, this);
        this.onNewTabWithFile = bind(this.onNewTabWithFile, this);
        this.onNewEmptyTab = bind(this.onNewEmptyTab, this);
        this.onCloseOtherTabs = bind(this.onCloseOtherTabs, this);
        this.onCloseTabOrWindow = bind(this.onCloseTabOrWindow, this);
        this.onDragStop = bind(this.onDragStop, this);
        this.onDragMove = bind(this.onDragMove, this);
        this.onDragStart = bind(this.onDragStart, this);
        this.onClick = bind(this.onClick, this);
        this.onFileSaved = bind(this.onFileSaved, this);
        this.onFileLineChanges = bind(this.onFileLineChanges, this);
        this.onSendTabs = bind(this.onSendTabs, this);
        this.emptyid = 0;
        this.tabs = [];
        this.div = elem({
            "class": 'tabs'
        });
        titlebar.insertBefore(this.div, $(".minimize"));
        this.div.addEventListener('click', this.onClick);
        this.div.addEventListener('contextmenu', this.onContextMenu);
        this.drag = new drag({
            target: this.div,
            onStart: this.onDragStart,
            onMove: this.onDragMove,
            onStop: this.onDragStop
        });
        post.on('newTabWithFile', this.onNewTabWithFile);
        post.on('newEmptyTab', this.onNewEmptyTab);
        post.on('closeTabOrWindow', this.onCloseTabOrWindow);
        post.on('closeOtherTabs', this.onCloseOtherTabs);
        post.on('stash', this.stash);
        post.on('dirty', this.onDirty);
        post.on('restore', this.restore);
        post.on('revertFile', this.revertFile);
        post.on('sendTabs', this.onSendTabs);
        post.on('fileLineChanges', this.onFileLineChanges);
        post.on('fileSaved', this.onFileSaved);
    }

    Tabs.prototype.onSendTabs = function(winID) {
        var i, len, ref1, t, tab;
        t = '';
        ref1 = this.tabs;
        for (i = 0, len = ref1.length; i < len; i++) {
            tab = ref1[i];
            t += tab.div.innerHTML;
        }
        return post.toWin(winID, 'winTabs', window.winID, t);
    };

    Tabs.prototype.onFileLineChanges = function(file, lineChanges) {
        var tab;
        tab = this.tab(file);
        if ((tab != null) && tab !== this.activeTab()) {
            return tab.foreignChanges(lineChanges);
        }
    };

    Tabs.prototype.onFileSaved = function(file, winID) {
        var tab;
        if (winID === window.winID) {
            return kerror("fileSaved from this window? " + file + " " + winID);
        }
        klog('onFileSaved');
        tab = this.tab(file);
        if ((tab != null) && tab !== this.activeTab()) {
            return tab.revert();
        }
    };

    Tabs.prototype.onClick = function(event) {
        var tab;
        if (tab = this.tab(event.target)) {
            if (event.target.classList.contains('dot')) {
                this.onCloseTabOrWindow(tab);
            } else {
                tab.activate();
            }
        }
        return true;
    };

    Tabs.prototype.onDragStart = function(d, event) {
        var br;
        this.dragTab = this.tab(event.target);
        if (empty(this.dragTab)) {
            return 'skip';
        }
        if (event.button !== 1) {
            return 'skip';
        }
        this.dragDiv = this.dragTab.div.cloneNode(true);
        this.dragTab.div.style.opacity = '0';
        br = this.dragTab.div.getBoundingClientRect();
        this.dragDiv.style.position = 'absolute';
        this.dragDiv.style.top = br.top + "px";
        this.dragDiv.style.left = br.left + "px";
        this.dragDiv.style.width = br.width + "px";
        this.dragDiv.style.height = br.height + "px";
        this.dragDiv.style.flex = 'unset';
        this.dragDiv.style.pointerEvents = 'none';
        return document.body.appendChild(this.dragDiv);
    };

    Tabs.prototype.onDragMove = function(d, e) {
        var tab;
        this.dragDiv.style.transform = "translateX(" + d.deltaSum.x + "px)";
        if (tab = this.tabAtX(d.pos.x)) {
            if (tab.index() !== this.dragTab.index()) {
                return this.swap(tab, this.dragTab);
            }
        }
    };

    Tabs.prototype.onDragStop = function(d, e) {
        this.dragTab.div.style.opacity = '';
        return this.dragDiv.remove();
    };

    Tabs.prototype.tab = function(id) {
        if (_.isNumber(id)) {
            return this.tabs[id];
        }
        if (_.isElement(id)) {
            return _.find(this.tabs, function(t) {
                return t.div.contains(id);
            });
        }
        if (_.isString(id)) {
            return _.find(this.tabs, function(t) {
                return t.file === id;
            });
        }
    };

    Tabs.prototype.activeTab = function(create) {
        var tab;
        if (!this.tabs.length && create) {
            tab = this.onNewEmptyTab();
            tab.setActive();
            return tab;
        }
        tab = _.find(this.tabs, function(t) {
            return t.isActive();
        });
        if (!tab && create) {
            tab = first(this.tabs);
            tab.setActive();
        }
        return tab;
    };

    Tabs.prototype.numTabs = function() {
        return this.tabs.length;
    };

    Tabs.prototype.tabAtX = function(x) {
        return _.find(this.tabs, function(t) {
            var br;
            br = t.div.getBoundingClientRect();
            return (br.left <= x && x <= br.left + br.width);
        });
    };

    Tabs.prototype.closeTab = function(tab) {
        klog('closeTab');
        _.pull(this.tabs, tab.close());
        return this;
    };

    Tabs.prototype.onCloseTabOrWindow = function(tab) {
        klog('onCloseTabOrWindow');
        if (this.numTabs() <= 1) {
            return window.win.close();
        } else {
            if (tab != null) {
                tab;
            } else {
                tab = this.activeTab();
            }
            tab.nextOrPrev().activate();
            this.closeTab(tab);
            return this.update();
        }
    };

    Tabs.prototype.onCloseOtherTabs = function() {
        var keep;
        if (!this.activeTab()) {
            return;
        }
        keep = _.pullAt(this.tabs, this.activeTab().index());
        while (this.numTabs()) {
            this.tabs.pop().close();
        }
        this.tabs = keep;
        return this.update();
    };

    Tabs.prototype.addTab = function(file) {
        var i, index, ref1;
        if (this.tabs.length > 4) {
            for (index = i = 0, ref1 = this.tabs.length; 0 <= ref1 ? i < ref1 : i > ref1; index = 0 <= ref1 ? ++i : --i) {
                if (!this.tabs[index].dirty) {
                    this.closeTab(this.tabs[index]);
                    break;
                }
            }
        }
        this.tabs.push(new Tab(this, file));
        return last(this.tabs);
    };

    Tabs.prototype.onNewEmptyTab = function() {
        var tab;
        this.emptyid += 1;
        tab = this.addTab("untitled-" + this.emptyid).activate();
        this.update();
        return tab;
    };

    Tabs.prototype.onNewTabWithFile = function(file) {
        var col, line, ref1, tab;
        console.log('onNewTabWithFile', file);
        ref1 = slash.splitFileLine(file), file = ref1[0], line = ref1[1], col = ref1[2];
        if (tab = this.tab(file)) {
            tab.activate();
        } else {
            this.addTab(file).activate();
        }
        this.update();
        if (line || col) {
            return post.emit('singleCursorAtPos', [col, line - 1]);
        }
    };

    Tabs.prototype.navigate = function(key) {
        var index;
        index = this.activeTab().index();
        index += (function() {
            switch (key) {
                case 'left':
                    return -1;
                case 'right':
                    return +1;
            }
        })();
        index = (this.numTabs() + index) % this.numTabs();
        return this.tabs[index].activate();
    };

    Tabs.prototype.swap = function(ta, tb) {
        var ref1;
        if ((ta == null) || (tb == null)) {
            return;
        }
        if (ta.index() > tb.index()) {
            ref1 = [tb, ta], ta = ref1[0], tb = ref1[1];
        }
        this.tabs[ta.index()] = tb;
        this.tabs[tb.index() + 1] = ta;
        this.div.insertBefore(tb.div, ta.div);
        return this.update();
    };

    Tabs.prototype.move = function(key) {
        var tab;
        tab = this.activeTab();
        switch (key) {
            case 'left':
                return this.swap(tab, tab.prev());
            case 'right':
                return this.swap(tab, tab.next());
        }
    };

    Tabs.prototype.stash = function() {
        var files, ref1, t;
        files = (function() {
            var i, len, ref1, results;
            ref1 = this.tabs;
            results = [];
            for (i = 0, len = ref1.length; i < len; i++) {
                t = ref1[i];
                results.push(t.file);
            }
            return results;
        }).call(this);
        files = files.filter(function(file) {
            return !file.startsWith('untitled');
        });
        return window.stash.set('tabs', {
            files: files,
            active: Math.min((ref1 = this.activeTab()) != null ? ref1.index() : void 0, files.length - 1)
        });
    };

    Tabs.prototype.restore = function() {
        var active, files, ref1;
        active = window.stash.get('tabs|active', 0);
        files = window.stash.get('tabs|files');
        if (empty(files)) {
            return;
        }
        this.tabs = [];
        while (files.length) {
            this.addTab(files.shift());
        }
        if ((ref1 = this.tabs[active]) != null) {
            ref1.activate();
        }
        return this.update();
    };

    Tabs.prototype.revertFile = function(file) {
        var ref1;
        return (ref1 = this.tab(file)) != null ? ref1.revert() : void 0;
    };

    Tabs.prototype.update = function() {
        var i, len, pkg, ref1, tab;
        this.stash();
        if (empty(this.tabs)) {
            return;
        }
        pkg = this.tabs[0].pkg;
        this.tabs[0].showPkg();
        ref1 = this.tabs.slice(1);
        for (i = 0, len = ref1.length; i < len; i++) {
            tab = ref1[i];
            if (tab.pkg === pkg) {
                tab.hidePkg();
            } else {
                pkg = tab.pkg;
                tab.showPkg();
            }
        }
        return this;
    };

    Tabs.prototype.onDirty = function(dirty) {
        var ref1;
        return (ref1 = this.activeTab()) != null ? ref1.setDirty(dirty) : void 0;
    };

    Tabs.prototype.onContextMenu = function(event) {
        return stopEvent(event, this.showContextMenu(kpos(event)));
    };

    Tabs.prototype.showContextMenu = function(absPos) {
        var opt, tab;
        if (tab = this.tab(event.target)) {
            tab.activate();
        }
        if (absPos == null) {
            absPos = kpos(this.view.getBoundingClientRect().left, this.view.getBoundingClientRect().top);
        }
        opt = {
            items: [
                {
                    text: 'Close Other Tabs',
                    combo: 'ctrl+shift+w'
                }, {
                    text: 'New Window',
                    combo: 'ctrl+shift+n'
                }
            ]
        };
        opt.x = absPos.x;
        opt.y = absPos.y;
        return popup.menu(opt);
    };

    return Tabs;

})();

module.exports = Tabs;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/win/tabs.coffee