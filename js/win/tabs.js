// koffee 0.56.0

/*
000000000   0000000   0000000     0000000
   000     000   000  000   000  000     
   000     000000000  0000000    0000000 
   000     000   000  000   000       000
   000     000   000  0000000    0000000
 */
var $, Tab, Tabs, _, drag, elem, empty, first, kerror, kpos, last, popup, post, ref, slash, stopEvent, valid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), post = ref.post, stopEvent = ref.stopEvent, popup = ref.popup, valid = ref.valid, empty = ref.empty, first = ref.first, last = ref.last, slash = ref.slash, elem = ref.elem, drag = ref.drag, kpos = ref.kpos, kerror = ref.kerror, $ = ref.$, _ = ref._;

Tab = require('./tab');

Tabs = (function() {
    function Tabs(titlebar) {
        this.showContextMenu = bind(this.showContextMenu, this);
        this.onContextMenu = bind(this.onContextMenu, this);
        this.onDirty = bind(this.onDirty, this);
        this.revertFile = bind(this.revertFile, this);
        this.restore = bind(this.restore, this);
        this.stash = bind(this.stash, this);
        this.onNewTabWithFile = bind(this.onNewTabWithFile, this);
        this.onNewEmptyTab = bind(this.onNewEmptyTab, this);
        this.onCloseOtherTabs = bind(this.onCloseOtherTabs, this);
        this.onCloseTabOrWindow = bind(this.onCloseTabOrWindow, this);
        this.onDragStop = bind(this.onDragStop, this);
        this.onDragMove = bind(this.onDragMove, this);
        this.onDragStart = bind(this.onDragStart, this);
        this.onClick = bind(this.onClick, this);
        this.onFileSaved = bind(this.onFileSaved, this);
        this.onFileLineChanges = bind(this.onFileLineChanges, this);
        this.onSendTabs = bind(this.onSendTabs, this);
        this.emptyid = 0;
        this.tabs = [];
        this.div = elem({
            "class": 'tabs'
        });
        titlebar.insertBefore(this.div, $(".minimize"));
        this.div.addEventListener('click', this.onClick);
        this.div.addEventListener('contextmenu', this.onContextMenu);
        this.drag = new drag({
            target: this.div,
            onStart: this.onDragStart,
            onMove: this.onDragMove,
            onStop: this.onDragStop
        });
        post.on('newTabWithFile', this.onNewTabWithFile);
        post.on('newEmptyTab', this.onNewEmptyTab);
        post.on('closeTabOrWindow', this.onCloseTabOrWindow);
        post.on('closeOtherTabs', this.onCloseOtherTabs);
        post.on('stash', this.stash);
        post.on('dirty', this.onDirty);
        post.on('restore', this.restore);
        post.on('revertFile', this.revertFile);
        post.on('sendTabs', this.onSendTabs);
        post.on('fileLineChanges', this.onFileLineChanges);
        post.on('fileSaved', this.onFileSaved);
    }

    Tabs.prototype.onSendTabs = function(winID) {
        var i, len, ref1, t, tab;
        t = '';
        ref1 = this.tabs;
        for (i = 0, len = ref1.length; i < len; i++) {
            tab = ref1[i];
            t += tab.div.innerHTML;
        }
        return post.toWin(winID, 'winTabs', window.winID, t);
    };

    Tabs.prototype.onFileLineChanges = function(file, lineChanges) {
        var tab;
        tab = this.tab(file);
        if ((tab != null) && tab !== this.activeTab()) {
            return tab.foreignChanges(lineChanges);
        }
    };

    Tabs.prototype.onFileSaved = function(file, winID) {
        var tab;
        if (winID === window.winID) {
            return kerror("fileSaved from this window? " + file + " " + winID);
        }
        tab = this.tab(file);
        if ((tab != null) && tab !== this.activeTab()) {
            return tab.revert();
        }
    };

    Tabs.prototype.onClick = function(event) {
        var tab;
        if (tab = this.tab(event.target)) {
            if (event.target.classList.contains('dot')) {
                this.onCloseTabOrWindow(tab);
            } else {
                tab.activate();
            }
        }
        return true;
    };

    Tabs.prototype.onDragStart = function(d, event) {
        var br;
        this.dragTab = this.tab(event.target);
        if (empty(this.dragTab)) {
            return 'skip';
        }
        if (event.button !== 1) {
            return 'skip';
        }
        this.dragDiv = this.dragTab.div.cloneNode(true);
        this.dragTab.div.style.opacity = '0';
        br = this.dragTab.div.getBoundingClientRect();
        this.dragDiv.style.position = 'absolute';
        this.dragDiv.style.top = br.top + "px";
        this.dragDiv.style.left = br.left + "px";
        this.dragDiv.style.width = br.width + "px";
        this.dragDiv.style.height = br.height + "px";
        this.dragDiv.style.flex = 'unset';
        this.dragDiv.style.pointerEvents = 'none';
        return document.body.appendChild(this.dragDiv);
    };

    Tabs.prototype.onDragMove = function(d, e) {
        var tab;
        this.dragDiv.style.transform = "translateX(" + d.deltaSum.x + "px)";
        if (tab = this.tabAtX(d.pos.x)) {
            if (tab.index() !== this.dragTab.index()) {
                return this.swap(tab, this.dragTab);
            }
        }
    };

    Tabs.prototype.onDragStop = function(d, e) {
        this.dragTab.div.style.opacity = '';
        return this.dragDiv.remove();
    };

    Tabs.prototype.tab = function(id) {
        if (_.isNumber(id)) {
            return this.tabs[id];
        }
        if (_.isElement(id)) {
            return _.find(this.tabs, function(t) {
                return t.div.contains(id);
            });
        }
        if (_.isString(id)) {
            return _.find(this.tabs, function(t) {
                return t.file === id;
            });
        }
    };

    Tabs.prototype.activeTab = function() {
        return _.find(this.tabs, function(t) {
            return t.isActive();
        });
    };

    Tabs.prototype.numTabs = function() {
        return this.tabs.length;
    };

    Tabs.prototype.tabAtX = function(x) {
        return _.find(this.tabs, function(t) {
            var br;
            br = t.div.getBoundingClientRect();
            return (br.left <= x && x <= br.left + br.width);
        });
    };

    Tabs.prototype.closeTab = function(tab) {
        _.pull(this.tabs, tab.close());
        return this;
    };

    Tabs.prototype.onCloseTabOrWindow = function(tab) {
        if (this.numTabs() <= 1) {
            return window.win.close();
        } else {
            if (tab != null) {
                tab;
            } else {
                tab = this.activeTab();
            }
            tab.nextOrPrev().activate();
            this.closeTab(tab);
            return this.update();
        }
    };

    Tabs.prototype.onCloseOtherTabs = function() {
        var keep;
        if (!this.activeTab()) {
            return;
        }
        keep = _.pullAt(this.tabs, this.activeTab().index());
        while (this.numTabs()) {
            this.tabs.pop().close();
        }
        this.tabs = keep;
        return this.update();
    };

    Tabs.prototype.addTab = function(file) {
        var i, index, ref1;
        if (this.tabs.length > 4) {
            for (index = i = 0, ref1 = this.tabs.length; 0 <= ref1 ? i < ref1 : i > ref1; index = 0 <= ref1 ? ++i : --i) {
                if (!this.tabs[index].dirty) {
                    this.closeTab(this.tabs[index]);
                    break;
                }
            }
        }
        this.tabs.push(new Tab(this, file));
        return last(this.tabs);
    };

    Tabs.prototype.onNewEmptyTab = function() {
        this.emptyid += 1;
        this.addTab("untitled-" + this.emptyid).activate();
        return this.update();
    };

    Tabs.prototype.onNewTabWithFile = function(file) {
        var col, line, ref1, tab;
        ref1 = slash.splitFileLine(file), file = ref1[0], line = ref1[1], col = ref1[2];
        if (tab = this.tab(file)) {
            tab.activate();
        } else {
            this.addTab(file).activate();
        }
        this.update();
        if (line || col) {
            return post.emit('singleCursorAtPos', [col, line - 1]);
        }
    };

    Tabs.prototype.navigate = function(key) {
        var index;
        index = this.activeTab().index();
        index += (function() {
            switch (key) {
                case 'left':
                    return -1;
                case 'right':
                    return +1;
            }
        })();
        index = (this.numTabs() + index) % this.numTabs();
        return this.tabs[index].activate();
    };

    Tabs.prototype.swap = function(ta, tb) {
        var ref1;
        if ((ta == null) || (tb == null)) {
            return;
        }
        if (ta.index() > tb.index()) {
            ref1 = [tb, ta], ta = ref1[0], tb = ref1[1];
        }
        this.tabs[ta.index()] = tb;
        this.tabs[tb.index() + 1] = ta;
        this.div.insertBefore(tb.div, ta.div);
        return this.update();
    };

    Tabs.prototype.move = function(key) {
        var tab;
        tab = this.activeTab();
        switch (key) {
            case 'left':
                return this.swap(tab, tab.prev());
            case 'right':
                return this.swap(tab, tab.next());
        }
    };

    Tabs.prototype.stash = function() {
        var files, ref1, t;
        files = (function() {
            var i, len, ref1, results;
            ref1 = this.tabs;
            results = [];
            for (i = 0, len = ref1.length; i < len; i++) {
                t = ref1[i];
                results.push(t.file);
            }
            return results;
        }).call(this);
        files = files.filter(function(file) {
            return !file.startsWith('untitled');
        });
        return window.stash.set('tabs', {
            files: files,
            active: Math.min((ref1 = this.activeTab()) != null ? ref1.index() : void 0, files.length - 1)
        });
    };

    Tabs.prototype.restore = function() {
        var active, files, ref1;
        active = window.stash.get('tabs:active', 0);
        files = window.stash.get('tabs:files');
        if (empty(files)) {
            return;
        }
        this.tabs = [];
        while (files.length) {
            this.addTab(files.shift());
        }
        if ((ref1 = this.tabs[active]) != null) {
            ref1.activate();
        }
        return this.update();
    };

    Tabs.prototype.revertFile = function(file) {
        var ref1;
        return (ref1 = this.tab(file)) != null ? ref1.revert() : void 0;
    };

    Tabs.prototype.update = function() {
        var i, len, pkg, ref1, tab;
        this.stash();
        if (empty(this.tabs)) {
            return;
        }
        pkg = this.tabs[0].pkg;
        this.tabs[0].showPkg();
        ref1 = this.tabs.slice(1);
        for (i = 0, len = ref1.length; i < len; i++) {
            tab = ref1[i];
            if (tab.pkg === pkg) {
                tab.hidePkg();
            } else {
                pkg = tab.pkg;
                tab.showPkg();
            }
        }
        return this;
    };

    Tabs.prototype.onDirty = function(dirty) {
        var ref1;
        return (ref1 = this.activeTab()) != null ? ref1.setDirty(dirty) : void 0;
    };

    Tabs.prototype.onContextMenu = function(event) {
        return stopEvent(event, this.showContextMenu(kpos(event)));
    };

    Tabs.prototype.showContextMenu = function(absPos) {
        var opt, tab;
        if (tab = this.tab(event.target)) {
            tab.activate();
        }
        if (absPos == null) {
            absPos = kpos(this.view.getBoundingClientRect().left, this.view.getBoundingClientRect().top);
        }
        opt = {
            items: [
                {
                    text: 'Close Other Tabs',
                    combo: 'ctrl+shift+w'
                }, {
                    text: 'New Window',
                    combo: 'ctrl+shift+n'
                }
            ]
        };
        opt.x = absPos.x;
        opt.y = absPos.y;
        return popup.menu(opt);
    };

    return Tabs;

})();

module.exports = Tabs;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUEsd0dBQUE7SUFBQTs7QUFRQSxNQUErRixPQUFBLENBQVEsS0FBUixDQUEvRixFQUFFLGVBQUYsRUFBUSx5QkFBUixFQUFtQixpQkFBbkIsRUFBMEIsaUJBQTFCLEVBQWlDLGlCQUFqQyxFQUF3QyxpQkFBeEMsRUFBK0MsZUFBL0MsRUFBcUQsaUJBQXJELEVBQTRELGVBQTVELEVBQWtFLGVBQWxFLEVBQXdFLGVBQXhFLEVBQThFLG1CQUE5RSxFQUFzRixTQUF0RixFQUF5Rjs7QUFFekYsR0FBQSxHQUFNLE9BQUEsQ0FBUSxPQUFSOztBQUVBO0lBRVcsY0FBQyxRQUFEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7UUFFVCxJQUFDLENBQUEsT0FBRCxHQUFXO1FBQ1gsSUFBQyxDQUFBLElBQUQsR0FBUTtRQUNSLElBQUMsQ0FBQSxHQUFELEdBQU8sSUFBQSxDQUFLO1lBQUEsQ0FBQSxLQUFBLENBQUEsRUFBTyxNQUFQO1NBQUw7UUFFUCxRQUFRLENBQUMsWUFBVCxDQUFzQixJQUFDLENBQUEsR0FBdkIsRUFBNEIsQ0FBQSxDQUFFLFdBQUYsQ0FBNUI7UUFFQSxJQUFDLENBQUEsR0FBRyxDQUFDLGdCQUFMLENBQXNCLE9BQXRCLEVBQXFDLElBQUMsQ0FBQSxPQUF0QztRQUNBLElBQUMsQ0FBQSxHQUFHLENBQUMsZ0JBQUwsQ0FBc0IsYUFBdEIsRUFBcUMsSUFBQyxDQUFBLGFBQXRDO1FBRUEsSUFBQyxDQUFBLElBQUQsR0FBUSxJQUFJLElBQUosQ0FDSjtZQUFBLE1BQUEsRUFBUSxJQUFDLENBQUEsR0FBVDtZQUNBLE9BQUEsRUFBUyxJQUFDLENBQUEsV0FEVjtZQUVBLE1BQUEsRUFBUyxJQUFDLENBQUEsVUFGVjtZQUdBLE1BQUEsRUFBUyxJQUFDLENBQUEsVUFIVjtTQURJO1FBTVIsSUFBSSxDQUFDLEVBQUwsQ0FBUSxnQkFB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Q0FBQyxDQUFKLEdBQVEsTUFBTSxDQUFDO2VBQ2YsS0FBSyxDQUFDLElBQU4sQ0FBVyxHQUFYO0lBbEJhOzs7Ozs7QUFvQnJCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAgMDAwMDAwMFxuICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICBcbiAgIDAwMCAgICAgMDAwMDAwMDAwICAwMDAwMDAwICAgIDAwMDAwMDAgXG4gICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAgIDAwMFxuICAgMDAwICAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMCBcbiMjI1xuXG57IHBvc3QsIHN0b3BFdmVudCwgcG9wdXAsIHZhbGlkLCBlbXB0eSwgZmlyc3QsIGxhc3QsIHNsYXNoLCBlbGVtLCBkcmFnLCBrcG9zLCBrZXJyb3IsICQsIF8gfSA9IHJlcXVpcmUgJ2t4aydcblxuVGFiID0gcmVxdWlyZSAnLi90YWInXG5cbmNsYXNzIFRhYnNcbiAgICBcbiAgICBjb25zdHJ1Y3RvcjogKHRpdGxlYmFyKSAtPlxuICAgICAgICBcbiAgICAgICAgQGVtcHR5aWQgPSAwXG4gICAgICAgIEB0YWJzID0gW11cbiAgICAgICAgQGRpdiA9IGVsZW0gY2xhc3M6ICd0YWJzJ1xuICAgICAgICBcbiAgICAgICAgdGl0bGViYXIuaW5zZXJ0QmVmb3JlIEBkaXYsICQgXCIubWluaW1pemVcIlxuICAgICAgICBcbiAgICAgICAgQGRpdi5hZGRFdmVudExpc3RlbmVyICdjbGljaycsICAgICAgIEBvbkNsaWNrXG4gICAgICAgIEBkaXYuYWRkRXZlbnRMaXN0ZW5lciAnY29udGV4dG1lbnUnLCBAb25Db250ZXh0TWVudVxuICAgICAgICBcbiAgICAgICAgQGRyYWcgPSBuZXcgZHJhZ1xuICAgICAgICAgICAgdGFyZ2V0OiBAZGl2XG4gICAgICAgICAgICBvblN0YXJ0OiBAb25EcmFnU3RhcnRcbiAgICAgICAgICAgIG9uTW92ZTogIEBvbkRyYWdNb3ZlXG4gICAgICAgICAgICBvblN0b3A6ICBAb25EcmFnU3RvcFxuICAgICAgICBcbiAgICAgICAgcG9zdC5vbiAnbmV3VGFiV2l0aEZpbGUnLCAgIEBvbk5ld1RhYldpdGhGaWxlXG4gICAgICAgIHBvc3Qub24gJ25ld0VtcHR5VGFiJywgICAgICBAb25OZXdFbXB0eVRhYlxuICAgICAgICBcbiAgICAgICAgcG9zdC5vbiAnY2xvc2VUYWJPcldpbmRvdycsICBAb25DbG9zZVRhYk9yV2luZG93XG4gICAgICAgIHBvc3Qub24gJ2Nsb3NlT3RoZXJUYWJzJywgICAgQG9uQ2xvc2VPdGhlclRhYnNcbiAgICAgICAgcG9zdC5vbiAnc3Rhc2gnLCAgICAgICAgICAgICBAc3Rhc2hcbiAgICAgICAgcG9zdC5vbiAnZGlydHknLCAgICAgICAgICAgICBAb25EaXJ0eVxuICAgICAgICBwb3N0Lm9uICdyZXN0b3JlJywgICAgICAgICAgIEByZXN0b3JlXG4gICAgICAgIHBvc3Qub24gJ3JldmVydEZpbGUnLCAgICAgICAgQHJldmVydEZpbGVcbiAgICAgICAgcG9zdC5vbiAnc2VuZFRhYnMnLCAgICAgICAgICBAb25TZW5kVGFic1xuICAgICAgICBwb3N0Lm9uICdmaWxlTGluZUNoYW5nZXMnLCAgIEBvbkZpbGVMaW5lQ2hhbmdlc1xuICAgICAgICBwb3N0Lm9uICdmaWxlU2F2ZWQnLCAgICAgICAgIEBvbkZpbGVTYXZlZFxuICAgICAgICBcbiAgICBvblNlbmRUYWJzOiAod2luSUQpID0+XG4gICAgICAgIFxuICAgICAgICB0ID0gJydcbiAgICAgICAgZm9yIHRhYiBpbiBAdGFic1xuICAgICAgICAgICAgdCArPSB0YWIuZGl2LmlubmVySFRNTFxuICAgICAgICBwb3N0LnRvV2luIHdpbklELCAnd2luVGFicycsIHdpbmRvdy53aW5JRCwgdFxuXG4gICAgb25GaWxlTGluZUNoYW5nZXM6IChmaWxlLCBsaW5lQ2hhbmdlcykgPT5cbiAgICAgICAgXG4gICAgICAgIHRhYiA9IEB0YWIgZmlsZVxuICAgICAgICBpZiB0YWI/IGFuZCB0YWIgIT0gQGFjdGl2ZVRhYigpXG4gICAgICAgICAgICB0YWIuZm9yZWlnbkNoYW5nZXMgbGluZUNoYW5nZXNcbiAgICAgICAgXG4gICAgb25GaWxlU2F2ZWQ6IChmaWxlLCB3aW5JRCkgPT5cblxuICAgICAgICBpZiB3aW5JRCA9PSB3aW5kb3cud2luSURcbiAgICAgICAgICAgIHJldHVybiBrZXJyb3IgXCJmaWxlU2F2ZWQgZnJvbSB0aGlzIHdpbmRvdz8gI3tmaWxlfSAje3dpbklEfVwiIFxuICAgICAgICB0YWIgPSBAdGFiIGZpbGVcbiAgICAgICAgaWYgdGFiPyBhbmQgdGFiICE9IEBhY3RpdmVUYWIoKVxuICAgICAgICAgICAgdGFiLnJldmVydCgpXG4gICAgICAgICAgICBcbiAgICAjICAwMDAwMDAwICAwMDAgICAgICAwMDAgICAwMDAwMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgMDAwICAgICAgIDAwMCAgMDAwICAgXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgMDAwICAwMDAgICAgICAgMDAwMDAwMCAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAwMDAgIDAwMCAgICAgICAwMDAgIDAwMCAgIFxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAgIDAwMCAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgXG4gICAgXG4gICAgb25DbGljazogKGV2ZW50KSA9PlxuICAgICAgICAgICAgXG4gICAgICAgIGlmIHRhYiA9IEB0YWIgZXZlbnQudGFyZ2V0XG4gICAgICAgICAgICBpZiBldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zICdkb3QnXG4gICAgICAgICAgICAgICAgQG9uQ2xvc2VUYWJPcldpbmRvdyB0YWJcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0YWIuYWN0aXZhdGUoKVxuICAgICAgICB0cnVlXG5cbiAgICAjIDAwMDAwMDAgICAgMDAwMDAwMDAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAwMCAgMDAwICAwMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgIFxuICAgIFxuICAgIG9uRHJhZ1N0YXJ0OiAoZCwgZXZlbnQpID0+IFxuICAgICAgICBcbiAgICAgICAgQGRyYWdUYWIgPSBAdGFiIGV2ZW50LnRhcmdldFxuICAgICAgICBcbiAgICAgICAgcmV0dXJuICdza2lwJyBpZiBlbXB0eSBAZHJhZ1RhYlxuICAgICAgICByZXR1cm4gJ3NraXAnIGlmIGV2ZW50LmJ1dHRvbiAhPSAxXG4gICAgICAgIFxuICAgICAgICBAZHJhZ0RpdiA9IEBkcmFnVGFiLmRpdi5jbG9uZU5vZGUgdHJ1ZVxuICAgICAgICBAZHJhZ1RhYi5kaXYuc3R5bGUub3BhY2l0eSA9ICcwJ1xuICAgICAgICBiciA9IEBkcmFnVGFiLmRpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgICBAZHJhZ0Rpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSdcbiAgICAgICAgQGRyYWdEaXYuc3R5bGUudG9wICA9IFwiI3tici50b3B9cHhcIlxuICAgICAgICBAZHJhZ0Rpdi5zdHlsZS5sZWZ0ID0gXCIje2JyLmxlZnR9cHhcIlxuICAgICAgICBAZHJhZ0Rpdi5zdHlsZS53aWR0aCA9IFwiI3tici53aWR0aH1weFwiXG4gICAgICAgIEBkcmFnRGl2LnN0eWxlLmhlaWdodCA9IFwiI3tici5oZWlnaHR9cHhcIlxuICAgICAgICBAZHJhZ0Rpdi5zdHlsZS5mbGV4ID0gJ3Vuc2V0J1xuICAgICAgICBAZHJhZ0Rpdi5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ25vbmUnXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQgQGRyYWdEaXZcblxuICAgIG9uRHJhZ01vdmU6IChkLGUpID0+XG4gICAgICAgIFxuICAgICAgICBAZHJhZ0Rpdi5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZVgoI3tkLmRlbHRhU3VtLnh9cHgpXCJcbiAgICAgICAgaWYgdGFiID0gQHRhYkF0WCBkLnBvcy54XG4gICAgICAgICAgICBpZiB0YWIuaW5kZXgoKSAhPSBAZHJhZ1RhYi5pbmRleCgpXG4gICAgICAgICAgICAgICAgQHN3YXAgdGFiLCBAZHJhZ1RhYlxuICAgICAgICBcbiAgICBvbkRyYWdTdG9wOiAoZCxlKSA9PlxuICAgICAgICBcbiAgICAgICAgQGRyYWdUYWIuZGl2LnN0eWxlLm9wYWNpdHkgPSAnJ1xuICAgICAgICBAZHJhZ0Rpdi5yZW1vdmUoKVxuXG4gICAgIyAwMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgICBcbiAgICAjICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgICMgICAgMDAwICAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICAgXG4gICAgIyAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgIFxuICAgIFxuICAgIHRhYjogKGlkKSAtPlxuICAgICAgICBcbiAgICAgICAgaWYgXy5pc051bWJlciAgaWQgdGhlbiByZXR1cm4gQHRhYnNbaWRdXG4gICAgICAgIGlmIF8uaXNFbGVtZW50IGlkIHRoZW4gcmV0dXJuIF8uZmluZCBAdGFicywgKHQpIC0+IHQuZGl2LmNvbnRhaW5zIGlkXG4gICAgICAgIGlmIF8uaXNTdHJpbmcgIGlkIHRoZW4gcmV0dXJuIF8uZmluZCBAdGFicywgKHQpIC0+IHQuZmlsZSA9PSBpZFxuXG4gICAgYWN0aXZlVGFiOiAtPiBfLmZpbmQgQHRhYnMsICh0KSAtPiB0LmlzQWN0aXZlKClcbiAgICBudW1UYWJzOiAgIC0+IEB0YWJzLmxlbmd0aFxuICAgIFxuICAgIHRhYkF0WDogKHgpIC0+IFxuICAgICAgICBcbiAgICAgICAgXy5maW5kIEB0YWJzLCAodCkgLT4gXG4gICAgICAgICAgICBiciA9IHQuZGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgICAgICBici5sZWZ0IDw9IHggPD0gYnIubGVmdCArIGJyLndpZHRoXG4gICAgXG4gICAgIyAgMDAwMDAwMCAgMDAwICAgICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwMDAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgMDAwICAgMDAwICAgICAgIDAwMCAgMDAwICAgICAgIFxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICBcbiAgICBcbiAgICBjbG9zZVRhYjogKHRhYikgLT5cbiAgICAgICAgXG4gICAgICAgIF8ucHVsbCBAdGFicywgdGFiLmNsb3NlKClcbiAgICAgICAgQFxuICAgICAgICAgIFxuICAgIG9uQ2xvc2VUYWJPcldpbmRvdzogKHRhYikgPT5cbiAgICAgICAgXG4gICAgICAgIGlmIEBudW1UYWJzKCkgPD0gMVxuICAgICAgICAgICAgd2luZG93Lndpbi5jbG9zZSgpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRhYiA/PSBAYWN0aXZlVGFiKClcbiAgICAgICAgICAgIHRhYi5uZXh0T3JQcmV2KCkuYWN0aXZhdGUoKVxuICAgICAgICAgICAgQGNsb3NlVGFiIHRhYlxuICAgICAgICAgICAgQHVwZGF0ZSgpXG5cbiAgICBvbkNsb3NlT3RoZXJUYWJzOiA9PiBcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpZiBub3QgQGFjdGl2ZVRhYigpICMgc2hvdWxkIG5vdCBoYXBwZW5cbiAgICAgICAga2VlcCA9IF8ucHVsbEF0IEB0YWJzLCBAYWN0aXZlVGFiKCkuaW5kZXgoKVxuICAgICAgICB3aGlsZSBAbnVtVGFicygpXG4gICAgICAgICAgICBAdGFicy5wb3AoKS5jbG9zZSgpIFxuICAgICAgICBAdGFicyA9IGtlZXBcbiAgICAgICAgQHVwZGF0ZSgpXG4gICAgICAgIFxuICAgICMgIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAgICAgICAgMDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAgICAgIDAwMCAgICAgMDAwMDAwMDAwICAwMDAwMDAwICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMCAgICAgICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICBcbiAgICBcbiAgICBhZGRUYWI6IChmaWxlKSAtPlxuXG4gICAgICAgIGlmIEB0YWJzLmxlbmd0aCA+IDRcbiAgICAgICAgICAgIGZvciBpbmRleCBpbiBbMC4uLkB0YWJzLmxlbmd0aF1cbiAgICAgICAgICAgICAgICBpZiBub3QgQHRhYnNbaW5kZXhdLmRpcnR5XG4gICAgICAgICAgICAgICAgICAgIEBjbG9zZVRhYiBAdGFic1tpbmRleF1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgXG4gICAgICAgIEB0YWJzLnB1c2ggbmV3IFRhYiBALCBmaWxlXG4gICAgICAgIGxhc3QgQHRhYnNcblxuICAgIG9uTmV3RW1wdHlUYWI6ID0+XG4gICAgICAgIFxuICAgICAgICBAZW1wdHlpZCArPSAxXG4gICAgICAgIEBhZGRUYWIoXCJ1bnRpdGxlZC0je0BlbXB0eWlkfVwiKS5hY3RpdmF0ZSgpXG4gICAgICAgIEB1cGRhdGUoKVxuICAgICAgICBcbiAgICBvbk5ld1RhYldpdGhGaWxlOiAoZmlsZSkgPT5cbiAgICAgICAgXG4gICAgICAgIFtmaWxlLCBsaW5lLCBjb2xdID0gc2xhc2guc3BsaXRGaWxlTGluZSBmaWxlXG4gICAgICAgIFxuICAgICAgICBpZiB0YWIgPSBAdGFiIGZpbGVcbiAgICAgICAgICAgIHRhYi5hY3RpdmF0ZSgpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIEBhZGRUYWIoZmlsZSkuYWN0aXZhdGUoKVxuICAgICAgICAgICAgXG4gICAgICAgIEB1cGRhdGUoKVxuICAgICAgICAgICAgXG4gICAgICAgIGlmIGxpbmUgb3IgY29sXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHBvc3QuZW1pdCAnc2luZ2xlQ3Vyc29yQXRQb3MnLCBbY29sLCBsaW5lLTFdXG5cbiAgICAjIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgIFxuICAgICMgMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAgICAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgXG4gICAgIyAwMDAgMCAwMDAgIDAwMDAwMDAwMCAgIDAwMCAwMDAgICAwMDAgIDAwMCAgMDAwMCAgMDAwMDAwMDAwICAgICAwMDAgICAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAgMDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAwICAgICAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAwMDAwMCAgXG4gICAgXG4gICAgbmF2aWdhdGU6IChrZXkpIC0+XG4gICAgICAgIFxuICAgICAgICBpbmRleCA9IEBhY3RpdmVUYWIoKS5pbmRleCgpXG4gICAgICAgIGluZGV4ICs9IHN3aXRjaCBrZXlcbiAgICAgICAgICAgIHdoZW4gJ2xlZnQnIHRoZW4gLTFcbiAgICAgICAgICAgIHdoZW4gJ3JpZ2h0JyB0aGVuICsxXG4gICAgICAgIGluZGV4ID0gKEBudW1UYWJzKCkgKyBpbmRleCkgJSBAbnVtVGFicygpXG4gICAgICAgIEB0YWJzW2luZGV4XS5hY3RpdmF0ZSgpXG5cbiAgICBzd2FwOiAodGEsIHRiKSAtPlxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGlmIG5vdCB0YT8gb3Igbm90IHRiP1xuICAgICAgICBbdGEsIHRiXSA9IFt0YiwgdGFdIGlmIHRhLmluZGV4KCkgPiB0Yi5pbmRleCgpXG4gICAgICAgIEB0YWJzW3RhLmluZGV4KCldICAgPSB0YlxuICAgICAgICBAdGFic1t0Yi5pbmRleCgpKzFdID0gdGFcbiAgICAgICAgQGRpdi5pbnNlcnRCZWZvcmUgdGIuZGl2LCB0YS5kaXZcbiAgICAgICAgQHVwZGF0ZSgpXG4gICAgXG4gICAgbW92ZTogKGtleSkgLT5cbiAgICAgICAgXG4gICAgICAgIHRhYiA9IEBhY3RpdmVUYWIoKVxuICAgICAgICBzd2l0Y2gga2V5XG4gICAgICAgICAgICB3aGVuICdsZWZ0JyAgdGhlbiBAc3dhcCB0YWIsIHRhYi5wcmV2KCkgXG4gICAgICAgICAgICB3aGVuICdyaWdodCcgdGhlbiBAc3dhcCB0YWIsIHRhYi5uZXh0KClcblxuICAgICMgMDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgXG4gICAgIyAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgICAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAgICAgICAwMDAgICAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMCAgXG5cbiAgICBzdGFzaDogPT4gXG5cbiAgICAgICAgZmlsZXMgPSAoIHQuZmlsZSBmb3IgdCBpbiBAdGFicyApXG4gICAgICAgIGZpbGVzID0gZmlsZXMuZmlsdGVyIChmaWxlKSAtPiBub3QgZmlsZS5zdGFydHNXaXRoICd1bnRpdGxlZCdcbiAgICAgICAgXG4gICAgICAgIHdpbmRvdy5zdGFzaC5zZXQgJ3RhYnMnLCBcbiAgICAgICAgICAgIGZpbGVzOiAgZmlsZXNcbiAgICAgICAgICAgIGFjdGl2ZTogTWF0aC5taW4gQGFjdGl2ZVRhYigpPy5pbmRleCgpLCBmaWxlcy5sZW5ndGgtMVxuICAgIFxuICAgIHJlc3RvcmU6ID0+XG4gICAgICAgIFxuICAgICAgICBhY3RpdmUgPSB3aW5kb3cuc3Rhc2guZ2V0ICd0YWJzOmFjdGl2ZScsIDBcbiAgICAgICAgZmlsZXMgID0gd2luZG93LnN0YXNoLmdldCAndGFiczpmaWxlcydcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpZiBlbXB0eSBmaWxlcyAjIGhhcHBlbnMgd2hlbiBmaXJzdCB3aW5kb3cgb3BlbnNcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIEB0YWJzID0gW11cbiAgICAgICAgICAgIFxuICAgICAgICB3aGlsZSBmaWxlcy5sZW5ndGhcbiAgICAgICAgICAgIEBhZGRUYWIgZmlsZXMuc2hpZnQoKVxuICAgICAgICBcbiAgICAgICAgQHRhYnNbYWN0aXZlXT8uYWN0aXZhdGUoKVxuICAgICAgICAgICAgXG4gICAgICAgIEB1cGRhdGUoKVxuXG4gICAgcmV2ZXJ0RmlsZTogKGZpbGUpID0+IEB0YWIoZmlsZSk/LnJldmVydCgpXG4gICAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAgICAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAwICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICAgICAwMDAgICAgIDAwMDAwMDAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICAgIFxuICAgICMgIDAwMDAwMDAgICAwMDAgICAgICAgIDAwMDAwMDAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAwICAgIFxuICAgIFxuICAgIHVwZGF0ZTogLT5cblxuICAgICAgICBAc3Rhc2goKVxuXG4gICAgICAgIHJldHVybiBpZiBlbXB0eSBAdGFic1xuICAgICAgICBcbiAgICAgICAgcGtnID0gQHRhYnNbMF0ucGtnXG4gICAgICAgIEB0YWJzWzBdLnNob3dQa2coKVxuICAgICAgICBmb3IgdGFiIGluIEB0YWJzLnNsaWNlIDFcbiAgICAgICAgICAgIGlmIHRhYi5wa2cgPT0gcGtnXG4gICAgICAgICAgICAgICAgdGFiLmhpZGVQa2coKVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHBrZyA9IHRhYi5wa2dcbiAgICAgICAgICAgICAgICB0YWIuc2hvd1BrZygpXG4gICAgICAgIEBcblxuICAgIG9uRGlydHk6IChkaXJ0eSkgPT5cbiAgICAgICAgXG4gICAgICAgIEBhY3RpdmVUYWIoKT8uc2V0RGlydHkgZGlydHlcbiAgICAgICAgXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgIDAwMCAwMDAgICAgICAwMDAgICAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAgICAgIDAwMDAwICAgICAgIDAwMCAgICAgXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgIDAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgICAwMDAgMDAwICAgICAgMDAwICAgICBcbiAgICAjICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAwMDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuICAgIFxuICAgIG9uQ29udGV4dE1lbnU6IChldmVudCkgPT4gc3RvcEV2ZW50IGV2ZW50LCBAc2hvd0NvbnRleHRNZW51IGtwb3MgZXZlbnRcbiAgICAgICAgICAgICAgXG4gICAgc2hvd0NvbnRleHRNZW51OiAoYWJzUG9zKSA9PlxuICAgICAgICBcbiAgICAgICAgaWYgdGFiID0gQHRhYiBldmVudC50YXJnZXRcbiAgICAgICAgICAgIHRhYi5hY3RpdmF0ZSgpXG4gICAgICAgICAgICBcbiAgICAgICAgaWYgbm90IGFic1Bvcz9cbiAgICAgICAgICAgIGFic1BvcyA9IGtwb3MgQHZpZXcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCwgQHZpZXcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wXG4gICAgICAgIFxuICAgICAgICBvcHQgPSBpdGVtczogWyBcbiAgICAgICAgICAgIHRleHQ6ICAgJ0Nsb3NlIE90aGVyIFRhYnMnXG4gICAgICAgICAgICBjb21ibzogICdjdHJsK3NoaWZ0K3cnIFxuICAgICAgICAsXG4gICAgICAgICAgICB0ZXh0OiAgICdOZXcgV2luZG93J1xuICAgICAgICAgICAgY29tYm86ICAnY3RybCtzaGlmdCtuJyBcbiAgICAgICAgXVxuICAgICAgICBcbiAgICAgICAgb3B0LnggPSBhYnNQb3MueFxuICAgICAgICBvcHQueSA9IGFic1Bvcy55XG4gICAgICAgIHBvcHVwLm1lbnUgb3B0ICAgICAgICBcbiAgICAgICAgXG5tb2R1bGUuZXhwb3J0cyA9IFRhYnNcbiJdfQ==
//# sourceURL=../../coffee/win/tabs.coffee