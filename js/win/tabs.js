// koffee 1.4.0

/*
000000000   0000000   0000000     0000000
   000     000   000  000   000  000
   000     000000000  0000000    0000000
   000     000   000  000   000       000
   000     000   000  0000000    0000000
 */
var $, Tab, Tabs, _, drag, elem, empty, first, kerror, klog, kpos, last, popup, post, ref, slash, stopEvent, valid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), post = ref.post, stopEvent = ref.stopEvent, popup = ref.popup, valid = ref.valid, empty = ref.empty, first = ref.first, last = ref.last, slash = ref.slash, elem = ref.elem, drag = ref.drag, kpos = ref.kpos, klog = ref.klog, kerror = ref.kerror, $ = ref.$, _ = ref._;

Tab = require('./tab');

Tabs = (function() {
    function Tabs(titlebar) {
        this.showContextMenu = bind(this.showContextMenu, this);
        this.onContextMenu = bind(this.onContextMenu, this);
        this.onDirty = bind(this.onDirty, this);
        this.revertFile = bind(this.revertFile, this);
        this.restore = bind(this.restore, this);
        this.stash = bind(this.stash, this);
        this.onNewTabWithFile = bind(this.onNewTabWithFile, this);
        this.onNewEmptyTab = bind(this.onNewEmptyTab, this);
        this.onCloseOtherTabs = bind(this.onCloseOtherTabs, this);
        this.onCloseTabOrWindow = bind(this.onCloseTabOrWindow, this);
        this.onDragStop = bind(this.onDragStop, this);
        this.onDragMove = bind(this.onDragMove, this);
        this.onDragStart = bind(this.onDragStart, this);
        this.onClick = bind(this.onClick, this);
        this.onFileSaved = bind(this.onFileSaved, this);
        this.onFileLineChanges = bind(this.onFileLineChanges, this);
        this.onSendTabs = bind(this.onSendTabs, this);
        this.emptyid = 0;
        this.tabs = [];
        this.div = elem({
            "class": 'tabs'
        });
        titlebar.insertBefore(this.div, $(".minimize"));
        this.div.addEventListener('click', this.onClick);
        this.div.addEventListener('contextmenu', this.onContextMenu);
        this.drag = new drag({
            target: this.div,
            onStart: this.onDragStart,
            onMove: this.onDragMove,
            onStop: this.onDragStop
        });
        post.on('newTabWithFile', this.onNewTabWithFile);
        post.on('newEmptyTab', this.onNewEmptyTab);
        post.on('closeTabOrWindow', this.onCloseTabOrWindow);
        post.on('closeOtherTabs', this.onCloseOtherTabs);
        post.on('stash', this.stash);
        post.on('dirty', this.onDirty);
        post.on('restore', this.restore);
        post.on('revertFile', this.revertFile);
        post.on('sendTabs', this.onSendTabs);
        post.on('fileLineChanges', this.onFileLineChanges);
        post.on('fileSaved', this.onFileSaved);
    }

    Tabs.prototype.onSendTabs = function(winID) {
        var i, len, ref1, t, tab;
        t = '';
        ref1 = this.tabs;
        for (i = 0, len = ref1.length; i < len; i++) {
            tab = ref1[i];
            t += tab.div.innerHTML;
        }
        return post.toWin(winID, 'winTabs', window.winID, t);
    };

    Tabs.prototype.onFileLineChanges = function(file, lineChanges) {
        var tab;
        tab = this.tab(file);
        if ((tab != null) && tab !== this.activeTab()) {
            return tab.foreignChanges(lineChanges);
        }
    };

    Tabs.prototype.onFileSaved = function(file, winID) {
        var tab;
        if (winID === window.winID) {
            return kerror("fileSaved from this window? " + file + " " + winID);
        }
        klog('onFileSaved');
        tab = this.tab(file);
        if ((tab != null) && tab !== this.activeTab()) {
            return tab.revert();
        }
    };

    Tabs.prototype.onClick = function(event) {
        var tab;
        if (tab = this.tab(event.target)) {
            if (event.target.classList.contains('dot')) {
                this.onCloseTabOrWindow(tab);
            } else {
                tab.activate();
            }
        }
        return true;
    };

    Tabs.prototype.onDragStart = function(d, event) {
        var br;
        this.dragTab = this.tab(event.target);
        if (empty(this.dragTab)) {
            return 'skip';
        }
        if (event.button !== 1) {
            return 'skip';
        }
        this.dragDiv = this.dragTab.div.cloneNode(true);
        this.dragTab.div.style.opacity = '0';
        br = this.dragTab.div.getBoundingClientRect();
        this.dragDiv.style.position = 'absolute';
        this.dragDiv.style.top = br.top + "px";
        this.dragDiv.style.left = br.left + "px";
        this.dragDiv.style.width = br.width + "px";
        this.dragDiv.style.height = br.height + "px";
        this.dragDiv.style.flex = 'unset';
        this.dragDiv.style.pointerEvents = 'none';
        return document.body.appendChild(this.dragDiv);
    };

    Tabs.prototype.onDragMove = function(d, e) {
        var tab;
        this.dragDiv.style.transform = "translateX(" + d.deltaSum.x + "px)";
        if (tab = this.tabAtX(d.pos.x)) {
            if (tab.index() !== this.dragTab.index()) {
                return this.swap(tab, this.dragTab);
            }
        }
    };

    Tabs.prototype.onDragStop = function(d, e) {
        this.dragTab.div.style.opacity = '';
        return this.dragDiv.remove();
    };

    Tabs.prototype.tab = function(id) {
        if (_.isNumber(id)) {
            return this.tabs[id];
        }
        if (_.isElement(id)) {
            return _.find(this.tabs, function(t) {
                return t.div.contains(id);
            });
        }
        if (_.isString(id)) {
            return _.find(this.tabs, function(t) {
                return t.file === id;
            });
        }
    };

    Tabs.prototype.activeTab = function(create) {
        var tab;
        if (!this.tabs.length && create) {
            tab = this.onNewEmptyTab();
            tab.setActive();
            return tab;
        }
        tab = _.find(this.tabs, function(t) {
            return t.isActive();
        });
        if (!tab && create) {
            tab = first(this.tabs);
            tab.setActive();
        }
        return tab;
    };

    Tabs.prototype.numTabs = function() {
        return this.tabs.length;
    };

    Tabs.prototype.tabAtX = function(x) {
        return _.find(this.tabs, function(t) {
            var br;
            br = t.div.getBoundingClientRect();
            return (br.left <= x && x <= br.left + br.width);
        });
    };

    Tabs.prototype.closeTab = function(tab) {
        _.pull(this.tabs, tab.close());
        return this;
    };

    Tabs.prototype.onCloseTabOrWindow = function(tab) {
        if (this.numTabs() <= 1) {
            return window.win.close();
        } else {
            if (tab != null) {
                tab;
            } else {
                tab = this.activeTab();
            }
            tab.nextOrPrev().activate();
            this.closeTab(tab);
            return this.update();
        }
    };

    Tabs.prototype.onCloseOtherTabs = function() {
        var keep;
        if (!this.activeTab()) {
            return;
        }
        keep = _.pullAt(this.tabs, this.activeTab().index());
        while (this.numTabs()) {
            this.tabs.pop().close();
        }
        this.tabs = keep;
        return this.update();
    };

    Tabs.prototype.addTab = function(file) {
        var i, index, ref1;
        if (this.tabs.length > 4) {
            for (index = i = 0, ref1 = this.tabs.length; 0 <= ref1 ? i < ref1 : i > ref1; index = 0 <= ref1 ? ++i : --i) {
                if (!this.tabs[index].dirty) {
                    this.closeTab(this.tabs[index]);
                    break;
                }
            }
        }
        this.tabs.push(new Tab(this, file));
        return last(this.tabs);
    };

    Tabs.prototype.onNewEmptyTab = function() {
        var tab;
        this.emptyid += 1;
        tab = this.addTab("untitled-" + this.emptyid).activate();
        this.update();
        return tab;
    };

    Tabs.prototype.onNewTabWithFile = function(file) {
        var col, line, ref1, tab;
        console.log('onNewTabWithFile', file);
        ref1 = slash.splitFileLine(file), file = ref1[0], line = ref1[1], col = ref1[2];
        if (tab = this.tab(file)) {
            tab.activate();
        } else {
            this.addTab(file).activate();
        }
        this.update();
        if (line || col) {
            return post.emit('singleCursorAtPos', [col, line - 1]);
        }
    };

    Tabs.prototype.navigate = function(key) {
        var index;
        index = this.activeTab().index();
        index += (function() {
            switch (key) {
                case 'left':
                    return -1;
                case 'right':
                    return +1;
            }
        })();
        index = (this.numTabs() + index) % this.numTabs();
        return this.tabs[index].activate();
    };

    Tabs.prototype.swap = function(ta, tb) {
        var ref1;
        if ((ta == null) || (tb == null)) {
            return;
        }
        if (ta.index() > tb.index()) {
            ref1 = [tb, ta], ta = ref1[0], tb = ref1[1];
        }
        this.tabs[ta.index()] = tb;
        this.tabs[tb.index() + 1] = ta;
        this.div.insertBefore(tb.div, ta.div);
        return this.update();
    };

    Tabs.prototype.move = function(key) {
        var tab;
        tab = this.activeTab();
        switch (key) {
            case 'left':
                return this.swap(tab, tab.prev());
            case 'right':
                return this.swap(tab, tab.next());
        }
    };

    Tabs.prototype.stash = function() {
        var files, ref1, t;
        files = (function() {
            var i, len, ref1, results;
            ref1 = this.tabs;
            results = [];
            for (i = 0, len = ref1.length; i < len; i++) {
                t = ref1[i];
                results.push(t.file);
            }
            return results;
        }).call(this);
        files = files.filter(function(file) {
            return !file.startsWith('untitled');
        });
        return window.stash.set('tabs', {
            files: files,
            active: Math.min((ref1 = this.activeTab()) != null ? ref1.index() : void 0, files.length - 1)
        });
    };

    Tabs.prototype.restore = function() {
        var active, files, ref1;
        active = window.stash.get('tabs|active', 0);
        files = window.stash.get('tabs|files');
        if (empty(files)) {
            return;
        }
        this.tabs = [];
        while (files.length) {
            this.addTab(files.shift());
        }
        if ((ref1 = this.tabs[active]) != null) {
            ref1.activate();
        }
        return this.update();
    };

    Tabs.prototype.revertFile = function(file) {
        var ref1;
        return (ref1 = this.tab(file)) != null ? ref1.revert() : void 0;
    };

    Tabs.prototype.update = function() {
        var i, len, pkg, ref1, tab;
        this.stash();
        if (empty(this.tabs)) {
            return;
        }
        pkg = this.tabs[0].pkg;
        this.tabs[0].showPkg();
        ref1 = this.tabs.slice(1);
        for (i = 0, len = ref1.length; i < len; i++) {
            tab = ref1[i];
            if (tab.pkg === pkg) {
                tab.hidePkg();
            } else {
                pkg = tab.pkg;
                tab.showPkg();
            }
        }
        return this;
    };

    Tabs.prototype.onDirty = function(dirty) {
        var ref1;
        return (ref1 = this.activeTab()) != null ? ref1.setDirty(dirty) : void 0;
    };

    Tabs.prototype.onContextMenu = function(event) {
        return stopEvent(event, this.showContextMenu(kpos(event)));
    };

    Tabs.prototype.showContextMenu = function(absPos) {
        var opt, tab;
        if (tab = this.tab(event.target)) {
            tab.activate();
        }
        if (absPos == null) {
            absPos = kpos(this.view.getBoundingClientRect().left, this.view.getBoundingClientRect().top);
        }
        opt = {
            items: [
                {
                    text: 'Close Other Tabs',
                    combo: 'ctrl+shift+w'
                }, {
                    text: 'New Window',
                    combo: 'ctrl+shift+n'
                }
            ]
        };
        opt.x = absPos.x;
        opt.y = absPos.y;
        return popup.menu(opt);
    };

    return Tabs;

})();

module.exports = Tabs;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUEsOEdBQUE7SUFBQTs7QUFRQSxNQUFxRyxPQUFBLENBQVEsS0FBUixDQUFyRyxFQUFFLGVBQUYsRUFBUSx5QkFBUixFQUFtQixpQkFBbkIsRUFBMEIsaUJBQTFCLEVBQWlDLGlCQUFqQyxFQUF3QyxpQkFBeEMsRUFBK0MsZUFBL0MsRUFBcUQsaUJBQXJELEVBQTRELGVBQTVELEVBQWtFLGVBQWxFLEVBQXdFLGVBQXhFLEVBQThFLGVBQTlFLEVBQW9GLG1CQUFwRixFQUE0RixTQUE1RixFQUErRjs7QUFFL0YsR0FBQSxHQUFNLE9BQUEsQ0FBUSxPQUFSOztBQUVBO0lBRUMsY0FBQyxRQUFEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7UUFFQyxJQUFDLENBQUEsT0FBRCxHQUFXO1FBQ1gsSUFBQyxDQUFBLElBQUQsR0FBUTtRQUNSLElBQUMsQ0FBQSxHQUFELEdBQU8sSUFBQSxDQUFLO1lBQUEsQ0FBQSxLQUFBLENBQUEsRUFBTyxNQUFQO1NBQUw7UUFFUCxRQUFRLENBQUMsWUFBVCxDQUFzQixJQUFDLENBQUEsR0FBdkIsRUFBNEIsQ0FBQSxDQUFFLFdBQUYsQ0FBNUI7UUFFQSxJQUFDLENBQUEsR0FBRyxDQUFDLGdCQUFMLENBQXNCLE9BQXRCLEVBQXFDLElBQUMsQ0FBQSxPQUF0QztRQUNBLElBQUMsQ0FBQSxHQUFHLENBQUMsZ0JBQUwsQ0FBc0IsYUFBdEIsRUFBcUMsSUFBQyxDQUFBLGFBQXRDO1FBRUEsSUFBQyxDQUFBLElBQUQsR0FBUSxJQUFJLElBQUosQ0FDSjtZQUFBLE1BQUEsRUFBUyxJQUFDLENBQUEsR0FBVjtZQUNBLE9BQUEsRUFBUyxJQUFDLENBQUEsV0FEVjtZQUVBLE1BQUEsRUFBUyxJQUFDLENBQUEsVUFGVjtZQUdBLE1BQUEsRUFBUyxJQUFDLENBQUEsVUFIVjtTQURJO1FBTVIsSUFBSSxDQUFDLEVB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QUcsQ0FBQyxRQUFKLENBQUEsRUFESjs7UUFHQSxJQUFPLGNBQVA7WUFDSSxNQUFBLEdBQVMsSUFBQSxDQUFLLElBQUMsQ0FBQSxJQUFJLENBQUMscUJBQU4sQ0FBQSxDQUE2QixDQUFDLElBQW5DLEVBQXlDLElBQUMsQ0FBQSxJQUFJLENBQUMscUJBQU4sQ0FBQSxDQUE2QixDQUFDLEdBQXZFLEVBRGI7O1FBR0EsR0FBQSxHQUFNO1lBQUEsS0FBQSxFQUFPO2dCQUNUO29CQUFBLElBQUEsRUFBUSxrQkFBUjtvQkFDQSxLQUFBLEVBQVEsY0FEUjtpQkFEUyxFQUlUO29CQUFBLElBQUEsRUFBUSxZQUFSO29CQUNBLEtBQUEsRUFBUSxjQURSO2lCQUpTO2FBQVA7O1FBUU4sR0FBRyxDQUFDLENBQUosR0FBUSxNQUFNLENBQUM7UUFDZixHQUFHLENBQUMsQ0FBSixHQUFRLE1BQU0sQ0FBQztlQUNmLEtBQUssQ0FBQyxJQUFOLENBQVcsR0FBWDtJQWxCYTs7Ozs7O0FBb0JyQixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgIDAwMDAwMDBcbiAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMFxuICAgMDAwICAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMFxuICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAwMDBcbiAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDBcbiMjI1xuXG57IHBvc3QsIHN0b3BFdmVudCwgcG9wdXAsIHZhbGlkLCBlbXB0eSwgZmlyc3QsIGxhc3QsIHNsYXNoLCBlbGVtLCBkcmFnLCBrcG9zLCBrbG9nLCBrZXJyb3IsICQsIF8gfSA9IHJlcXVpcmUgJ2t4aydcblxuVGFiID0gcmVxdWlyZSAnLi90YWInXG5cbmNsYXNzIFRhYnNcblxuICAgIEA6ICh0aXRsZWJhcikgLT5cblxuICAgICAgICBAZW1wdHlpZCA9IDBcbiAgICAgICAgQHRhYnMgPSBbXVxuICAgICAgICBAZGl2ID0gZWxlbSBjbGFzczogJ3RhYnMnXG5cbiAgICAgICAgdGl0bGViYXIuaW5zZXJ0QmVmb3JlIEBkaXYsICQgXCIubWluaW1pemVcIlxuXG4gICAgICAgIEBkaXYuYWRkRXZlbnRMaXN0ZW5lciAnY2xpY2snLCAgICAgICBAb25DbGlja1xuICAgICAgICBAZGl2LmFkZEV2ZW50TGlzdGVuZXIgJ2NvbnRleHRtZW51JywgQG9uQ29udGV4dE1lbnVcblxuICAgICAgICBAZHJhZyA9IG5ldyBkcmFnXG4gICAgICAgICAgICB0YXJnZXQ6ICBAZGl2XG4gICAgICAgICAgICBvblN0YXJ0OiBAb25EcmFnU3RhcnRcbiAgICAgICAgICAgIG9uTW92ZTogIEBvbkRyYWdNb3ZlXG4gICAgICAgICAgICBvblN0b3A6ICBAb25EcmFnU3RvcFxuXG4gICAgICAgIHBvc3Qub24gJ25ld1RhYldpdGhGaWxlJyAgIEBvbk5ld1RhYldpdGhGaWxlXG4gICAgICAgIHBvc3Qub24gJ25ld0VtcHR5VGFiJyAgICAgIEBvbk5ld0VtcHR5VGFiXG5cbiAgICAgICAgcG9zdC5vbiAnY2xvc2VUYWJPcldpbmRvdycgQG9uQ2xvc2VUYWJPcldpbmRvd1xuICAgICAgICBwb3N0Lm9uICdjbG9zZU90aGVyVGFicycgICBAb25DbG9zZU90aGVyVGFic1xuICAgICAgICBwb3N0Lm9uICdzdGFzaCcgICAgICAgICAgICBAc3Rhc2hcbiAgICAgICAgcG9zdC5vbiAnZGlydHknICAgICAgICAgICAgQG9uRGlydHlcbiAgICAgICAgcG9zdC5vbiAncmVzdG9yZScgICAgICAgICAgQHJlc3RvcmVcbiAgICAgICAgcG9zdC5vbiAncmV2ZXJ0RmlsZScgICAgICAgQHJldmVydEZpbGVcbiAgICAgICAgcG9zdC5vbiAnc2VuZFRhYnMnICAgICAgICAgQG9uU2VuZFRhYnNcbiAgICAgICAgcG9zdC5vbiAnZmlsZUxpbmVDaGFuZ2VzJyAgQG9uRmlsZUxpbmVDaGFuZ2VzXG4gICAgICAgIHBvc3Qub24gJ2ZpbGVTYXZlZCcgICAgICAgIEBvbkZpbGVTYXZlZFxuXG4gICAgb25TZW5kVGFiczogKHdpbklEKSA9PlxuXG4gICAgICAgIHQgPSAnJ1xuICAgICAgICBmb3IgdGFiIGluIEB0YWJzXG4gICAgICAgICAgICB0ICs9IHRhYi5kaXYuaW5uZXJIVE1MXG4gICAgICAgIHBvc3QudG9XaW4gd2luSUQsICd3aW5UYWJzJywgd2luZG93LndpbklELCB0XG5cbiAgICBvbkZpbGVMaW5lQ2hhbmdlczogKGZpbGUsIGxpbmVDaGFuZ2VzKSA9PlxuXG4gICAgICAgIHRhYiA9IEB0YWIgZmlsZVxuICAgICAgICBpZiB0YWI/IGFuZCB0YWIgIT0gQGFjdGl2ZVRhYigpXG4gICAgICAgICAgICB0YWIuZm9yZWlnbkNoYW5nZXMgbGluZUNoYW5nZXNcblxuICAgIG9uRmlsZVNhdmVkOiAoZmlsZSwgd2luSUQpID0+XG5cbiAgICAgICAgaWYgd2luSUQgPT0gd2luZG93LndpbklEXG4gICAgICAgICAgICByZXR1cm4ga2Vycm9yIFwiZmlsZVNhdmVkIGZyb20gdGhpcyB3aW5kb3c/ICN7ZmlsZX0gI3t3aW5JRH1cIlxuICAgICAgICAgICAgXG4gICAgICAgIGtsb2cgJ29uRmlsZVNhdmVkJ1xuICAgICAgICB0YWIgPSBAdGFiIGZpbGVcbiAgICAgICAgaWYgdGFiPyBhbmQgdGFiICE9IEBhY3RpdmVUYWIoKVxuICAgICAgICAgICAgdGFiLnJldmVydCgpXG5cbiAgICAjICAwMDAwMDAwICAwMDAgICAgICAwMDAgICAwMDAwMDAwICAwMDAgICAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAwMDAgIDAwMCAgICAgICAwMDAgIDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgMDAwICAgICAgIDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAwMDAgIDAwMCAgICAgICAwMDAgIDAwMFxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAgIDAwMCAgIDAwMDAwMDAgIDAwMCAgIDAwMFxuXG4gICAgb25DbGljazogKGV2ZW50KSA9PlxuXG4gICAgICAgIGlmIHRhYiA9IEB0YWIgZXZlbnQudGFyZ2V0XG4gICAgICAgICAgICBpZiBldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zICdkb3QnXG4gICAgICAgICAgICAgICAgQG9uQ2xvc2VUYWJPcldpbmRvdyB0YWJcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0YWIuYWN0aXZhdGUoKVxuICAgICAgICB0cnVlXG5cbiAgICAjIDAwMDAwMDAgICAgMDAwMDAwMDAgICAgMDAwMDAwMCAgICAwMDAwMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwMDAgIDAwMCAgMDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMFxuXG4gICAgb25EcmFnU3RhcnQ6IChkLCBldmVudCkgPT5cblxuICAgICAgICBAZHJhZ1RhYiA9IEB0YWIgZXZlbnQudGFyZ2V0XG5cbiAgICAgICAgcmV0dXJuICdza2lwJyBpZiBlbXB0eSBAZHJhZ1RhYlxuICAgICAgICByZXR1cm4gJ3NraXAnIGlmIGV2ZW50LmJ1dHRvbiAhPSAxXG5cbiAgICAgICAgQGRyYWdEaXYgPSBAZHJhZ1RhYi5kaXYuY2xvbmVOb2RlIHRydWVcbiAgICAgICAgQGRyYWdUYWIuZGl2LnN0eWxlLm9wYWNpdHkgPSAnMCdcbiAgICAgICAgYnIgPSBAZHJhZ1RhYi5kaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgQGRyYWdEaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnXG4gICAgICAgIEBkcmFnRGl2LnN0eWxlLnRvcCAgPSBcIiN7YnIudG9wfXB4XCJcbiAgICAgICAgQGRyYWdEaXYuc3R5bGUubGVmdCA9IFwiI3tici5sZWZ0fXB4XCJcbiAgICAgICAgQGRyYWdEaXYuc3R5bGUud2lkdGggPSBcIiN7YnIud2lkdGh9cHhcIlxuICAgICAgICBAZHJhZ0Rpdi5zdHlsZS5oZWlnaHQgPSBcIiN7YnIuaGVpZ2h0fXB4XCJcbiAgICAgICAgQGRyYWdEaXYuc3R5bGUuZmxleCA9ICd1bnNldCdcbiAgICAgICAgQGRyYWdEaXYuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJ1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkIEBkcmFnRGl2XG5cbiAgICBvbkRyYWdNb3ZlOiAoZCxlKSA9PlxuXG4gICAgICAgIEBkcmFnRGl2LnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlWCgje2QuZGVsdGFTdW0ueH1weClcIlxuICAgICAgICBpZiB0YWIgPSBAdGFiQXRYIGQucG9zLnhcbiAgICAgICAgICAgIGlmIHRhYi5pbmRleCgpICE9IEBkcmFnVGFiLmluZGV4KClcbiAgICAgICAgICAgICAgICBAc3dhcCB0YWIsIEBkcmFnVGFiXG5cbiAgICBvbkRyYWdTdG9wOiAoZCxlKSA9PlxuXG4gICAgICAgIEBkcmFnVGFiLmRpdi5zdHlsZS5vcGFjaXR5ID0gJydcbiAgICAgICAgQGRyYWdEaXYucmVtb3ZlKClcblxuICAgICMgMDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDBcbiAgICAjICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDBcbiAgICAjICAgIDAwMCAgICAgMDAwMDAwMDAwICAwMDAwMDAwXG4gICAgIyAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMFxuXG4gICAgdGFiOiAoaWQpIC0+XG5cbiAgICAgICAgaWYgXy5pc051bWJlciAgaWQgdGhlbiByZXR1cm4gQHRhYnNbaWRdXG4gICAgICAgIGlmIF8uaXNFbGVtZW50IGlkIHRoZW4gcmV0dXJuIF8uZmluZCBAdGFicywgKHQpIC0+IHQuZGl2LmNvbnRhaW5zIGlkXG4gICAgICAgIGlmIF8uaXNTdHJpbmcgIGlkIHRoZW4gcmV0dXJuIF8uZmluZCBAdGFicywgKHQpIC0+IHQuZmlsZSA9PSBpZFxuXG4gICAgYWN0aXZlVGFiOiAoY3JlYXRlKSAtPlxuXG4gICAgICAgIGlmIG5vdCBAdGFicy5sZW5ndGggYW5kIGNyZWF0ZVxuICAgICAgICAgICAgdGFiID0gQG9uTmV3RW1wdHlUYWIoKVxuICAgICAgICAgICAgdGFiLnNldEFjdGl2ZSgpXG4gICAgICAgICAgICByZXR1cm4gdGFiXG4gICAgICAgICAgICBcbiAgICAgICAgdGFiID0gXy5maW5kIEB0YWJzLCAodCkgLT4gdC5pc0FjdGl2ZSgpXG4gICAgICAgIFxuICAgICAgICBpZiBub3QgdGFiIGFuZCBjcmVhdGVcbiAgICAgICAgICAgIHRhYiA9IGZpcnN0IEB0YWJzXG4gICAgICAgICAgICB0YWIuc2V0QWN0aXZlKClcbiAgICAgICAgICAgIFxuICAgICAgICB0YWJcblxuICAgIG51bVRhYnM6ICAgLT4gQHRhYnMubGVuZ3RoXG5cbiAgICB0YWJBdFg6ICh4KSAtPlxuXG4gICAgICAgIF8uZmluZCBAdGFicywgKHQpIC0+XG4gICAgICAgICAgICBiciA9IHQuZGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgICAgICBici5sZWZ0IDw9IHggPD0gYnIubGVmdCArIGJyLndpZHRoXG5cbiAgICAjICAwMDAwMDAwICAwMDAgICAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAwMDAwMDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAwMDAgICAgICAgMDAwICAwMDBcbiAgICAjICAwMDAwMDAwICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMFxuXG4gICAgY2xvc2VUYWI6ICh0YWIpIC0+XG5cbiAgICAgICAgXy5wdWxsIEB0YWJzLCB0YWIuY2xvc2UoKVxuICAgICAgICBAXG5cbiAgICBvbkNsb3NlVGFiT3JXaW5kb3c6ICh0YWIpID0+XG5cbiAgICAgICAgaWYgQG51bVRhYnMoKSA8PSAxXG4gICAgICAgICAgICB3aW5kb3cud2luLmNsb3NlKClcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGFiID89IEBhY3RpdmVUYWIoKVxuICAgICAgICAgICAgdGFiLm5leHRPclByZXYoKS5hY3RpdmF0ZSgpXG4gICAgICAgICAgICBAY2xvc2VUYWIgdGFiXG4gICAgICAgICAgICBAdXBkYXRlKClcblxuICAgIG9uQ2xvc2VPdGhlclRhYnM6ID0+XG5cbiAgICAgICAgcmV0dXJuIGlmIG5vdCBAYWN0aXZlVGFiKCkgIyBzaG91bGQgbm90IGhhcHBlblxuICAgICAgICBrZWVwID0gXy5wdWxsQXQgQHRhYnMsIEBhY3RpdmVUYWIoKS5pbmRleCgpXG4gICAgICAgIHdoaWxlIEBudW1UYWJzKClcbiAgICAgICAgICAgIEB0YWJzLnBvcCgpLmNsb3NlKClcbiAgICAgICAgQHRhYnMgPSBrZWVwXG4gICAgICAgIEB1cGRhdGUoKVxuXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgICAgICAgICAwMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAgICAgMDAwICAgICAwMDAwMDAwMDAgIDAwMDAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwICAgICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAwMDAwXG5cbiAgICBhZGRUYWI6IChmaWxlKSAtPlxuXG4gICAgICAgIGlmIEB0YWJzLmxlbmd0aCA+IDRcbiAgICAgICAgICAgIGZvciBpbmRleCBpbiBbMC4uLkB0YWJzLmxlbmd0aF1cbiAgICAgICAgICAgICAgICBpZiBub3QgQHRhYnNbaW5kZXhdLmRpcnR5XG4gICAgICAgICAgICAgICAgICAgIEBjbG9zZVRhYiBAdGFic1tpbmRleF1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICBAdGFicy5wdXNoIG5ldyBUYWIgQCwgZmlsZVxuICAgICAgICBsYXN0IEB0YWJzXG5cbiAgICBvbk5ld0VtcHR5VGFiOiA9PlxuXG4gICAgICAgIEBlbXB0eWlkICs9IDFcbiAgICAgICAgdGFiID0gQGFkZFRhYihcInVudGl0bGVkLSN7QGVtcHR5aWR9XCIpLmFjdGl2YXRlKClcbiAgICAgICAgQHVwZGF0ZSgpXG4gICAgICAgIHRhYlxuXG4gICAgb25OZXdUYWJXaXRoRmlsZTogKGZpbGUpID0+XG5cbiAgICAgICAgbG9nICdvbk5ld1RhYldpdGhGaWxlJywgZmlsZVxuICAgICAgICBbZmlsZSwgbGluZSwgY29sXSA9IHNsYXNoLnNwbGl0RmlsZUxpbmUgZmlsZVxuXG4gICAgICAgIGlmIHRhYiA9IEB0YWIgZmlsZVxuICAgICAgICAgICAgdGFiLmFjdGl2YXRlKClcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQGFkZFRhYihmaWxlKS5hY3RpdmF0ZSgpXG5cbiAgICAgICAgQHVwZGF0ZSgpXG5cbiAgICAgICAgaWYgbGluZSBvciBjb2xcblxuICAgICAgICAgICAgcG9zdC5lbWl0ICdzaW5nbGVDdXJzb3JBdFBvcycgW2NvbCwgbGluZS0xXVxuXG4gICAgIyAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAwXG4gICAgIyAwMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMCAgICAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMFxuICAgICMgMDAwIDAgMDAwICAwMDAwMDAwMDAgICAwMDAgMDAwICAgMDAwICAwMDAgIDAwMDAgIDAwMDAwMDAwMCAgICAgMDAwICAgICAwMDAwMDAwXG4gICAgIyAwMDAgIDAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAwICAgICAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAwMDAwMFxuXG4gICAgbmF2aWdhdGU6IChrZXkpIC0+XG5cbiAgICAgICAgaW5kZXggPSBAYWN0aXZlVGFiKCkuaW5kZXgoKVxuICAgICAgICBpbmRleCArPSBzd2l0Y2gga2V5XG4gICAgICAgICAgICB3aGVuICdsZWZ0JyB0aGVuIC0xXG4gICAgICAgICAgICB3aGVuICdyaWdodCcgdGhlbiArMVxuICAgICAgICBpbmRleCA9IChAbnVtVGFicygpICsgaW5kZXgpICUgQG51bVRhYnMoKVxuICAgICAgICBAdGFic1tpbmRleF0uYWN0aXZhdGUoKVxuXG4gICAgc3dhcDogKHRhLCB0YikgLT5cblxuICAgICAgICByZXR1cm4gaWYgbm90IHRhPyBvciBub3QgdGI/XG4gICAgICAgIFt0YSwgdGJdID0gW3RiLCB0YV0gaWYgdGEuaW5kZXgoKSA+IHRiLmluZGV4KClcbiAgICAgICAgQHRhYnNbdGEuaW5kZXgoKV0gICA9IHRiXG4gICAgICAgIEB0YWJzW3RiLmluZGV4KCkrMV0gPSB0YVxuICAgICAgICBAZGl2Lmluc2VydEJlZm9yZSB0Yi5kaXYsIHRhLmRpdlxuICAgICAgICBAdXBkYXRlKClcblxuICAgIG1vdmU6IChrZXkpIC0+XG5cbiAgICAgICAgdGFiID0gQGFjdGl2ZVRhYigpXG4gICAgICAgIHN3aXRjaCBrZXlcbiAgICAgICAgICAgIHdoZW4gJ2xlZnQnICB0aGVuIEBzd2FwIHRhYiwgdGFiLnByZXYoKVxuICAgICAgICAgICAgd2hlbiAncmlnaHQnIHRoZW4gQHN3YXAgdGFiLCB0YWIubmV4dCgpXG5cbiAgICAjIDAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwICAwMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMFxuICAgICMgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgICAgICAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAgICAgICAwMDAgICAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMFxuXG4gICAgc3Rhc2g6ID0+XG5cbiAgICAgICAgZmlsZXMgPSAoIHQuZmlsZSBmb3IgdCBpbiBAdGFicyApXG4gICAgICAgIGZpbGVzID0gZmlsZXMuZmlsdGVyIChmaWxlKSAtPiBub3QgZmlsZS5zdGFydHNXaXRoICd1bnRpdGxlZCdcblxuICAgICAgICB3aW5kb3cuc3Rhc2guc2V0ICd0YWJzJyxcbiAgICAgICAgICAgIGZpbGVzOiAgZmlsZXNcbiAgICAgICAgICAgIGFjdGl2ZTogTWF0aC5taW4gQGFjdGl2ZVRhYigpPy5pbmRleCgpLCBmaWxlcy5sZW5ndGgtMVxuXG4gICAgcmVzdG9yZTogPT5cblxuICAgICAgICBhY3RpdmUgPSB3aW5kb3cuc3Rhc2guZ2V0ICd0YWJzfGFjdGl2ZScgMFxuICAgICAgICBmaWxlcyAgPSB3aW5kb3cuc3Rhc2guZ2V0ICd0YWJzfGZpbGVzJ1xuXG4gICAgICAgIHJldHVybiBpZiBlbXB0eSBmaWxlcyAjIGhhcHBlbnMgd2hlbiBmaXJzdCB3aW5kb3cgb3BlbnNcblxuICAgICAgICBAdGFicyA9IFtdXG5cbiAgICAgICAgd2hpbGUgZmlsZXMubGVuZ3RoXG4gICAgICAgICAgICBAYWRkVGFiIGZpbGVzLnNoaWZ0KClcblxuICAgICAgICBAdGFic1thY3RpdmVdPy5hY3RpdmF0ZSgpXG5cbiAgICAgICAgQHVwZGF0ZSgpXG5cbiAgICByZXZlcnRGaWxlOiAoZmlsZSkgPT4gQHRhYihmaWxlKT8ucmV2ZXJ0KClcblxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAgICAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwMDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMFxuICAgICMgIDAwMDAwMDAgICAwMDAgICAgICAgIDAwMDAwMDAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAwXG5cbiAgICB1cGRhdGU6IC0+XG5cbiAgICAgICAgQHN0YXNoKClcblxuICAgICAgICByZXR1cm4gaWYgZW1wdHkgQHRhYnNcblxuICAgICAgICBwa2cgPSBAdGFic1swXS5wa2dcbiAgICAgICAgQHRhYnNbMF0uc2hvd1BrZygpXG4gICAgICAgIGZvciB0YWIgaW4gQHRhYnMuc2xpY2UgMVxuICAgICAgICAgICAgaWYgdGFiLnBrZyA9PSBwa2dcbiAgICAgICAgICAgICAgICB0YWIuaGlkZVBrZygpXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcGtnID0gdGFiLnBrZ1xuICAgICAgICAgICAgICAgIHRhYi5zaG93UGtnKClcbiAgICAgICAgQFxuXG4gICAgb25EaXJ0eTogKGRpcnR5KSA9PlxuXG4gICAgICAgIEBhY3RpdmVUYWIoKT8uc2V0RGlydHkgZGlydHlcblxuICAgICMgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwMCAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICAgMDAwIDAwMCAgICAgIDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAgICAgIDAwMDAwICAgICAgIDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAgICAwMDAgICAgIDAwMCAgICAgICAgMDAwIDAwMCAgICAgIDAwMFxuICAgICMgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAwICAwMDAgICAwMDAgICAgIDAwMFxuXG4gICAgb25Db250ZXh0TWVudTogKGV2ZW50KSA9PiBzdG9wRXZlbnQgZXZlbnQsIEBzaG93Q29udGV4dE1lbnUga3BvcyBldmVudFxuXG4gICAgc2hvd0NvbnRleHRNZW51OiAoYWJzUG9zKSA9PlxuXG4gICAgICAgIGlmIHRhYiA9IEB0YWIgZXZlbnQudGFyZ2V0XG4gICAgICAgICAgICB0YWIuYWN0aXZhdGUoKVxuXG4gICAgICAgIGlmIG5vdCBhYnNQb3M/XG4gICAgICAgICAgICBhYnNQb3MgPSBrcG9zIEB2aWV3LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQsIEB2aWV3LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcFxuXG4gICAgICAgIG9wdCA9IGl0ZW1zOiBbXG4gICAgICAgICAgICB0ZXh0OiAgICdDbG9zZSBPdGhlciBUYWJzJ1xuICAgICAgICAgICAgY29tYm86ICAnY3RybCtzaGlmdCt3J1xuICAgICAgICAsXG4gICAgICAgICAgICB0ZXh0OiAgICdOZXcgV2luZG93J1xuICAgICAgICAgICAgY29tYm86ICAnY3RybCtzaGlmdCtuJ1xuICAgICAgICBdXG5cbiAgICAgICAgb3B0LnggPSBhYnNQb3MueFxuICAgICAgICBvcHQueSA9IGFic1Bvcy55XG4gICAgICAgIHBvcHVwLm1lbnUgb3B0XG5cbm1vZHVsZS5leHBvcnRzID0gVGFic1xuIl19
//# sourceURL=../../coffee/win/tabs.coffee