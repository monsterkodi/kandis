// koffee 1.4.0
var _, clipboard, electron, empty, ref;

ref = require('kxk'), empty = ref.empty, _ = ref._;

electron = require('electron');

clipboard = electron.clipboard;

module.exports = {
    actions: {
        cutCopyPaste: {
            combos: ['command+x', 'ctrl+x', 'command+c', 'ctrl+c', 'command+v', 'ctrl+v']
        }
    },
    cutCopyPaste: function(key, info) {
        switch (key) {
            case 'x':
                return this.cut();
            case 'c':
                return this.copy();
            case 'v':
                return this.paste();
        }
    },
    cut: function() {
        this["do"].start();
        this.copy();
        this.deleteSelectionOrCursorLines();
        return this["do"].end();
    },
    copy: function() {
        return clipboard != null ? clipboard.writeText(this.textOfSelectionForClipboard()) : void 0;
    },
    paste: function() {
        return this.pasteText(clipboard != null ? clipboard.readText() : void 0);
    },
    replaceSelectedText: function(lines) {
        var i, insert, j, ldiff, len, len1, newSelections, ns, oldLength, os, ref1;
        this["do"].start();
        newSelections = this["do"].selections();
        for (i = 0, len = newSelections.length; i < len; i++) {
            ns = newSelections[i];
            insert = lines.shift();
            oldLength = ns[1][1] - ns[1][0];
            this["do"].change(ns[0], this["do"].line(ns[0]).splice(ns[1][0], oldLength, insert));
            ldiff = insert.length - oldLength;
            ref1 = rangesAfterLineColInRanges(ns[0], ns[1][1], newSelections);
            for (j = 0, len1 = ref1.length; j < len1; j++) {
                os = ref1[j];
                os[1][0] += ldiff;
                os[1][1] += ldiff;
            }
            ns[1][1] += ldiff;
        }
        this["do"].select(newSelections);
        this["do"].setCursors(endPositionsFromRanges(newSelections));
        return this["do"].end();
    },
    pasteText: function(text) {
        var after, before, c, ci, cp, i, indt, insert, j, k, len, len1, li, line, lines, newCursors, ref1, ref2, ref3, removeLastLine;
        lines = text.split('\n');
        if (lines.length === this.numSelections()) {
            this.replaceSelectedText(lines);
            this.select([]);
            return;
        }
        if ((this.numLines() === 1 && this.text() === '' && lines.length > 1) || areSameRanges(this.rangesForAllLines(), this.selections())) {
            removeLastLine = true;
        }
        this.deleteSelection();
        this["do"].start();
        this.clampCursorOrFillVirtualSpaces();
        newCursors = this["do"].cursors();
        if (newCursors.length > 1 && lines.length === 1) {
            lines = (function() {
                var i, len, results;
                results = [];
                for (i = 0, len = newCursors.length; i < len; i++) {
                    c = newCursors[i];
                    results.push(lines[0]);
                }
                return results;
            })();
        }
        if (newCursors.length > 1 || (lines.length === 1)) {
            for (ci = i = ref1 = newCursors.length - 1; ref1 <= 0 ? i <= 0 : i >= 0; ci = ref1 <= 0 ? ++i : --i) {
                c = newCursors[ci];
                insert = lines[ci % lines.length];
                this["do"].change(c[1], this["do"].line(c[1]).splice(c[0], 0, insert));
                ref2 = positionsAfterLineColInPositions(c[1], c[0] - 1, newCursors);
                for (j = 0, len = ref2.length; j < len; j++) {
                    c = ref2[j];
                    cursorDelta(c, insert.length);
                }
            }
        } else {
            cp = newCursors[0];
            li = cp[1];
            newCursors = null;
            if (cp[0] > 0) {
                ref3 = this.splitStateLineAtPos(this["do"], cp), before = ref3[0], after = ref3[1];
                after = after.trimLeft();
                indt = _.padStart("", indentationInLine(this["do"].line(cp[1])));
                if (before.trim().length) {
                    this["do"].change(li, before);
                    li += 1;
                    if ((indt + after).trim().length) {
                        lines.push(indt + after);
                        newCursors = [[0, li + lines.length - 1]];
                    }
                }
            } else {
                if (this["do"].line(li).length === 0 && !removeLastLine) {
                    li += 1;
                }
            }
            for (k = 0, len1 = lines.length; k < len1; k++) {
                line = lines[k];
                this["do"].insert(li, line);
                li += 1;
            }
            if (empty(newCursors)) {
                newCursors = [[0, li]];
            }
        }
        if (removeLastLine) {
            this["do"]["delete"](this["do"].numLines() - 1);
        }
        this["do"].setCursors(newCursors);
        return this["do"].end();
    }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../../coffee/editor/actions/paste.coffee