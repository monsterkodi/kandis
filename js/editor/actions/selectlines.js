// koffee 1.4.0
var _, ref, reversed;

ref = require('kxk'), reversed = ref.reversed, _ = ref._;

module.exports = {
    actions: {
        menu: 'Select',
        selectMoreLines: {
            name: 'Select More Lines',
            text: 'selects line at cursor or next line if cursor line is selected already',
            combo: 'command+l',
            accel: 'ctrl+l'
        },
        selectLessLines: {
            name: 'Select Less Lines',
            text: 'removes a line from each block of selected lines',
            combo: 'command+shift+l',
            accel: 'ctrl+shift+l'
        }
    },
    selectMoreLines: function() {
        var c, j, k, len, len1, newCursors, newSelections, selectCursorLineAtIndex, start;
        this["do"].start();
        newCursors = this["do"].cursors();
        newSelections = this["do"].selections();
        selectCursorLineAtIndex = (function(_this) {
            return function(c, i) {
                var range;
                range = [i, [0, _this["do"].line(i).length]];
                newSelections.push(range);
                return cursorSet(c, rangeEndPos(range));
            };
        })(this);
        start = false;
        for (j = 0, len = newCursors.length; j < len; j++) {
            c = newCursors[j];
            if (!this.isSelectedLineAtIndex(c[1])) {
                selectCursorLineAtIndex(c, c[1]);
                start = true;
            }
        }
        if (!start) {
            for (k = 0, len1 = newCursors.length; k < len1; k++) {
                c = newCursors[k];
                if (c[1] < this.numLines() - 1) {
                    selectCursorLineAtIndex(c, c[1] + 1);
                }
            }
        }
        this["do"].select(newSelections);
        this["do"].setCursors(newCursors);
        return this["do"].end();
    },
    selectLessLines: function() {
        var c, j, len, newCursors, newSelections, ref1, s, thisSel;
        this["do"].start();
        newCursors = this["do"].cursors();
        newSelections = this["do"].selections();
        ref1 = reversed(newCursors);
        for (j = 0, len = ref1.length; j < len; j++) {
            c = ref1[j];
            thisSel = rangesAtLineIndexInRanges(c[1], newSelections);
            if (thisSel.length) {
                if (this.isSelectedLineAtIndex(c[1] - 1)) {
                    s = _.first(rangesAtLineIndexInRanges(c[1] - 1, newSelections));
                    cursorSet(c, s[1][1], s[0]);
                }
                newSelections.splice(newSelections.indexOf(thisSel[0]), 1);
            }
        }
        this["do"].select(newSelections);
        this["do"].setCursors(newCursors);
        return this["do"].end();
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0bGluZXMuanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFPQSxJQUFBOztBQUFBLE1BQWtCLE9BQUEsQ0FBUSxLQUFSLENBQWxCLEVBQUUsdUJBQUYsRUFBWTs7QUFFWixNQUFNLENBQUMsT0FBUCxHQUVJO0lBQUEsT0FBQSxFQUNJO1FBQUEsSUFBQSxFQUFNLFFBQU47UUFFQSxlQUFBLEVBQ0k7WUFBQSxJQUFBLEVBQU8sbUJBQVA7WUFDQSxJQUFBLEVBQU8sd0VBRFA7WUFFQSxLQUFBLEVBQU8sV0FGUDtZQUdBLEtBQUEsRUFBTyxRQUhQO1NBSEo7UUFRQSxlQUFBLEVBQ0k7WUFBQSxJQUFBLEVBQU0sbUJBQU47WUFDQSxJQUFBLEVBQU8sa0RBRFA7WUFFQSxLQUFBLEVBQU8saUJBRlA7WUFHQSxLQUFBLEVBQU8sY0FIUDtTQVRKO0tBREo7SUFlQSxlQUFBLEVBQWlCLFNBQUE7QUFFYixZQUFBO1FBQUEsSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLEtBQUosQ0FBQTtRQUNBLFVBQUEsR0FBZ0IsSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLE9BQUosQ0FBQTtRQUNoQixhQUFBLEdBQWdCLElBQUMsRUFBQSxFQUFBLEVBQUUsQ0FBQyxVQUFKLENBQUE7UUFFaEIsdUJBQUEsR0FBMEIsQ0FBQSxTQUFBLEtBQUE7bUJBQUEsU0FBQyxDQUFELEVBQUcsQ0FBSDtBQUN0QixvQkFBQTtnQkFBQSxLQUFBLEdBQVEsQ0FBQyxDQUFELEVBQUksQ0FBQyxDQUFELEVBQUksS0FBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLElBQUosQ0FBUyxDQUFULENBQVcsQ0FBQyxNQUFoQixDQUFKO2dCQUNSLGFBQWEsQ0FBQyxJQUFkLENBQW1CLEtBQW5CO3VCQUNBLFNBQUEsQ0FBVSxDQUFWLEVBQWEsV0FBQSxDQUFZLEtBQVosQ0FBYjtZQUhzQjtRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7UUFLMUIsS0FBQSxHQUFRO0FBQ1IsYUFBQSw0Q0FBQTs7WUFDSSxJQUFHLENBQUksSUFBQyxDQUFBLHFCQUFELENBQXVCLENBQUUsQ0FBQSxDQUFBLENBQXpCLENBQVA7Z0JBQ0ksdUJBQUEsQ0FBd0IsQ0FBeEIsRUFBMkIsQ0FBRSxDQUFBLENBQUEsQ0FBN0I7Z0JBQ0EsS0FBQSxHQUFRLEtBRlo7O0FBREo7UUFLQSxJQUFHLENBQUksS0FBUDtBQUNJLGlCQUFBLDhDQUFBOztnQkFDSSxJQUFxQyxDQUFFLENBQUEsQ0FBQSxDQUFGLEdBQU8sSUFBQyxDQUFBLFFBQUQsQ0FBQSxDQUFBLEdBQVksQ0FBeEQ7b0JBQUEsdUJBQUEsQ0FBd0IsQ0FBeEIsRUFBMkIsQ0FBRSxDQUFBLENBQUEsQ0FBRixHQUFLLENBQWhDLEVBQUE7O0FBREosYUFESjs7UUFJQSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsTUFBSixDQUFXLGFBQVg7UUFDQSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsVUFBSixDQUFlLFVBQWY7ZUFDQSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsR0FBSixDQUFBO0lBdkJhLENBZmpCO0lBd0NBLGVBQUEsRUFBaUIsU0FBQTtBQUViLFlBQUE7UUFBQSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsS0FBSixDQUFBO1FBQ0EsVUFBQSxHQUFnQixJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsT0FBSixDQUFBO1FBQ2hCLGFBQUEsR0FBZ0IsSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLFVBQUosQ0FBQTtBQUVoQjtBQUFBLGFBQUEsc0NBQUE7O1lBQ0ksT0FBQSxHQUFVLHlCQUFBLENBQTBCLENBQUUsQ0FBQSxDQUFBLENBQTVCLEVBQWdDLGFBQWhDO1lBQ1YsSUFBRyxPQUFPLENBQUMsTUFBWDtnQkFDSSxJQUFHLElBQUMsQ0FBQSxxQkFBRCxDQUF1QixDQUFFLENBQUEsQ0FBQSxDQUFGLEdBQUssQ0FBNUIsQ0FBSDtvQkFDSSxDQUFBLEdBQUksQ0FBQyxDQUFDLEtBQUYsQ0FBUSx5QkFBQSxDQUEwQixDQUFFLENBQUEsQ0FBQSxDQUFGLEdBQUssQ0FBL0IsRUFBa0MsYUFBbEMsQ0FBUjtvQkFDSixTQUFBLENBQVUsQ0FBVixFQUFhLENBQUUsQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQWxCLEVBQXNCLENBQUUsQ0FBQSxDQUFBLENBQXhCLEVBRko7O2dCQUdBLGFBQWEsQ0FBQyxNQUFkLENBQXFCLGFBQWEsQ0FBQyxPQUFkLENBQXNCLE9BQVEsQ0FBQSxDQUFBLENBQTlCLENBQXJCLEVBQXdELENBQXhELEVBSko7O0FBRko7UUFRQSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsTUFBSixDQUFXLGFBQVg7UUFDQSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsVUFBSixDQUFlLFVBQWY7ZUFDQSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsR0FBSixDQUFBO0lBaEJhLENBeENqQiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4jICAwMDAwMDAwICAwMDAwMDAwMCAgMDAwICAgICAgMDAwMDAwMDAgICAwMDAwMDAwICAwMDAwMDAwMDAgICAgICAgIDAwMCAgICAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAgIFxyXG4jIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDAgICAgICAgICAgIDAwMCAgICAgIDAwMCAgMDAwMCAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIFxyXG4jIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgICAgMDAwMDAwMCAgIDAwMCAgICAgICAgICAwMDAgICAgICAgICAgIDAwMCAgICAgIDAwMCAgMDAwIDAgMDAwICAwMDAwMDAwICAgMDAwMDAwMCAgIFxyXG4jICAgICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDAgICAgICAgICAgIDAwMCAgICAgIDAwMCAgMDAwICAwMDAwICAwMDAgICAgICAgICAgICAwMDAgIFxyXG4jIDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwMDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwICAgICAwMDAgICAgICAgICAgIDAwMDAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMCAgIFxyXG5cclxueyByZXZlcnNlZCwgXyB9ID0gcmVxdWlyZSAna3hrJ1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPVxyXG5cclxuICAgIGFjdGlvbnM6XHJcbiAgICAgICAgbWVudTogJ1NlbGVjdCdcclxuICAgICAgICBcclxuICAgICAgICBzZWxlY3RNb3JlTGluZXM6XHJcbiAgICAgICAgICAgIG5hbWU6ICAnU2VsZWN0IE1vcmUgTGluZXMnXHJcbiAgICAgICAgICAgIHRleHQ6ICAnc2VsZWN0cyBsaW5lIGF0IGN1cnNvciBvciBuZXh0IGxpbmUgaWYgY3Vyc29yIGxpbmUgaXMgc2VsZWN0ZWQgYWxyZWFkeSdcclxuICAgICAgICAgICAgY29tYm86ICdjb21tYW5kK2wnXHJcbiAgICAgICAgICAgIGFjY2VsOiAnY3RybCtsJ1xyXG4gICAgICAgICAgICBcclxuICAgICAgICBzZWxlY3RMZXNzTGluZXM6XHJcbiAgICAgICAgICAgIG5hbWU6ICdTZWxlY3QgTGVzcyBMaW5lcydcclxuICAgICAgICAgICAgdGV4dDogICdyZW1vdmVzIGEgbGluZSBmcm9tIGVhY2ggYmxvY2sgb2Ygc2VsZWN0ZWQgbGluZXMnXHJcbiAgICAgICAgICAgIGNvbWJvOiAnY29tbWFuZCtzaGlmdCtsJ1xyXG4gICAgICAgICAgICBhY2NlbDogJ2N0cmwrc2hpZnQrbCdcclxuXHJcbiAgICBzZWxlY3RNb3JlTGluZXM6IC0+XHJcbiAgICAgICAgXHJcbiAgICAgICAgQGRvLnN0YXJ0KClcclxuICAgICAgICBuZXdDdXJzb3JzICAgID0gQGRvLmN1cnNvcnMoKVxyXG4gICAgICAgIG5ld1NlbGVjdGlvbnMgPSBAZG8uc2VsZWN0aW9ucygpXHJcbiAgICAgICAgXHJcbiAgICAgICAgc2VsZWN0Q3Vyc29yTGluZUF0SW5kZXggPSAoYyxpKSA9PlxyXG4gICAgICAgICAgICByYW5nZSA9IFtpLCBbMCwgQGRvLmxpbmUoaSkubGVuZ3RoXV0gXHJcbiAgICAgICAgICAgIG5ld1NlbGVjdGlvbnMucHVzaCByYW5nZVxyXG4gICAgICAgICAgICBjdXJzb3JTZXQgYywgcmFuZ2VFbmRQb3MgcmFuZ2VcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgc3RhcnQgPSBmYWxzZVxyXG4gICAgICAgIGZvciBjIGluIG5ld0N1cnNvcnNcclxuICAgICAgICAgICAgaWYgbm90IEBpc1NlbGVjdGVkTGluZUF0SW5kZXggY1sxXVxyXG4gICAgICAgICAgICAgICAgc2VsZWN0Q3Vyc29yTGluZUF0SW5kZXggYywgY1sxXVxyXG4gICAgICAgICAgICAgICAgc3RhcnQgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICBpZiBub3Qgc3RhcnRcclxuICAgICAgICAgICAgZm9yIGMgaW4gbmV3Q3Vyc29yc1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0Q3Vyc29yTGluZUF0SW5kZXggYywgY1sxXSsxIGlmIGNbMV0gPCBAbnVtTGluZXMoKS0xXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICBAZG8uc2VsZWN0IG5ld1NlbGVjdGlvbnNcclxuICAgICAgICBAZG8uc2V0Q3Vyc29ycyBuZXdDdXJzb3JzXHJcbiAgICAgICAgQGRvLmVuZCgpICAgICAgIFxyXG5cclxuICAgIHNlbGVjdExlc3NMaW5lczogLT4gXHJcbiAgICAgICAgXHJcbiAgICAgICAgQGRvLnN0YXJ0KClcclxuICAgICAgICBuZXdDdXJzb3JzICAgID0gQGRvLmN1cnNvcnMoKVxyXG4gICAgICAgIG5ld1NlbGVjdGlvbnMgPSBAZG8uc2VsZWN0aW9ucygpXHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yIGMgaW4gcmV2ZXJzZWQgbmV3Q3Vyc29yc1xyXG4gICAgICAgICAgICB0aGlzU2VsID0gcmFuZ2VzQXRMaW5lSW5kZXhJblJhbmdlcyBjWzFdLCBuZXdTZWxlY3Rpb25zXHJcbiAgICAgICAgICAgIGlmIHRoaXNTZWwubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICBpZiBAaXNTZWxlY3RlZExpbmVBdEluZGV4IGNbMV0tMVxyXG4gICAgICAgICAgICAgICAgICAgIHMgPSBfLmZpcnN0IHJhbmdlc0F0TGluZUluZGV4SW5SYW5nZXMgY1sxXS0xLCBuZXdTZWxlY3Rpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yU2V0IGMsIHNbMV1bMV0sIHNbMF1cclxuICAgICAgICAgICAgICAgIG5ld1NlbGVjdGlvbnMuc3BsaWNlIG5ld1NlbGVjdGlvbnMuaW5kZXhPZih0aGlzU2VsWzBdKSwgMVxyXG5cclxuICAgICAgICBAZG8uc2VsZWN0IG5ld1NlbGVjdGlvbnNcclxuICAgICAgICBAZG8uc2V0Q3Vyc29ycyBuZXdDdXJzb3JzXHJcbiAgICAgICAgQGRvLmVuZCgpICBcclxuIl19
//# sourceURL=../../../coffee/editor/actions/selectlines.coffee