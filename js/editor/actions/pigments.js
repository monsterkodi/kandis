// koffee 1.3.0
var Pigments, matchr,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

matchr = require('../../tools/matchr');

Pigments = (function() {
    function Pigments(editor) {
        var hexa, rgb, rgba, trio;
        this.editor = editor;
        this.onFile = bind(this.onFile, this);
        this.onLineChanged = bind(this.onLineChanged, this);
        this.onLineInserted = bind(this.onLineInserted, this);
        this.test = /#[a-fA-F0-9]{3}|rgba?/;
        trio = /#[a-fA-F0-9]{3}(?![\w\d])/;
        hexa = /#[a-fA-F0-9]{6}(?![\w\d])/;
        rgb = /rgb\s*\(\s*\d+\s*\,\s*\d+\s*\,\s*\d+\s*\)/;
        rgba = /rgba\s*\(\s*\d+\s*\,\s*\d+\s*\,\s*\d+\s*\,\s*\d+\.?\d*\s*\)/;
        this.regexps = [[trio, 'trio'], [hexa, 'hexa'], [rgb, 'rgb'], [rgba, 'rgbaa']];
        this.editor.on('file', this.onFile);
    }

    Pigments.prototype.del = function() {
        return this.editor.removeListener('file', this.onFile);
    };

    Pigments.prototype.onLineInserted = function(li) {
        var i, len, line, results, ri, rng, rngs;
        line = this.editor.line(li);
        if (this.test.test(line)) {
            rngs = matchr.ranges(this.regexps, line);
            ri = -1;
            results = [];
            for (i = 0, len = rngs.length; i < len; i++) {
                rng = rngs[i];
                ri++;
                results.push(this.editor.meta.add({
                    line: li,
                    start: line.length + 2 + ri * 3,
                    end: line.length + 2 + ri * 3 + 2,
                    clss: 'pigment',
                    style: {
                        backgroundColor: rng.match
                    }
                }));
            }
            return results;
        }
    };

    Pigments.prototype.onLineChanged = function(li) {
        var i, len, m, metas;
        metas = this.editor.meta.metasAtLineIndex(li).filter(function(m) {
            return m[2].clss === 'pigment';
        });
        if (metas.length) {
            for (i = 0, len = metas.length; i < len; i++) {
                m = metas[i];
                this.editor.meta.delMeta(m);
            }
        }
        return this.onLineInserted(li);
    };

    Pigments.prototype.onFile = function(file) {
        if (window.state.get("pigments|" + file)) {
            return this.pigmentize();
        }
    };

    Pigments.prototype.activate = function() {
        window.state.set("pigments|" + this.editor.currentFile, true);
        return this.pigmentize();
    };

    Pigments.prototype.deactivate = function() {
        window.state.set("pigments|" + this.editor.currentFile);
        return this.clear();
    };

    Pigments.prototype.clear = function() {
        this.editor.removeListener('lineChanged', this.onLineChanged);
        this.editor.removeListener('lineInserted', this.onLineInserted);
        return this.editor.meta.delClass('pigment');
    };

    Pigments.prototype.pigmentize = function() {
        var i, li, ref, results;
        this.clear();
        this.editor.on('lineChanged', this.onLineChanged);
        this.editor.on('lineInserted', this.onLineInserted);
        results = [];
        for (li = i = 0, ref = this.editor.numLines(); 0 <= ref ? i < ref : i > ref; li = 0 <= ref ? ++i : --i) {
            results.push(this.onLineInserted(li));
        }
        return results;
    };

    return Pigments;

})();

module.exports = {
    actions: {
        togglePigments: {
            name: 'Toggle Pigments',
            text: 'toggle pigments for current file',
            combo: 'command+alt+shift+p',
            accel: 'alt+ctrl+shift+p'
        }
    },
    initPigments: function() {
        return this.pigments != null ? this.pigments : this.pigments = new Pigments(this);
    },
    togglePigments: function() {
        if (window.state.get("pigments|" + this.currentFile)) {
            return this.pigments.deactivate();
        } else {
            return this.pigments.activate();
        }
    }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../../coffee/editor/actions/pigments.coffee