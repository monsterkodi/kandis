// koffee 1.4.0
var _, kerror, post, ref,
    indexOf = [].indexOf;

ref = require('kxk'), post = ref.post, kerror = ref.kerror, _ = ref._;

module.exports = {
    actions: {
        menu: 'Select',
        selectAll: {
            name: 'Select All',
            combo: 'command+a',
            accel: 'ctrl+a'
        },
        selectNone: {
            name: 'Deselect',
            combo: 'command+shift+a',
            accel: 'ctrl+shift+a'
        },
        selectInverted: {
            name: 'Invert Selection',
            text: 'selects all lines that have no cursors and no selections',
            combo: 'command+shift+i',
            accel: 'ctrl+shift+i'
        },
        selectNextHighlight: {
            separator: true,
            name: 'Select Next Highlight',
            combo: 'command+g',
            accel: 'ctrl+g'
        },
        selectPrevHighlight: {
            name: 'Select Previous Highlight',
            combo: 'command+shift+g',
            accel: 'ctrl+shift+g'
        },
        selectTextBetweenCursorsOrSurround: {
            name: 'Select Between Cursors, Brackets or Quotes',
            text: "select text between even cursors, if at least two cursors exist. \nselect text between highlighted brackets or quotes otherwise.",
            combo: 'command+alt+b',
            accel: 'alt+ctrl+b'
        },
        toggleStickySelection: {
            separator: true,
            name: 'Toggle Sticky Selection',
            text: 'current selection is not removed when adding new selections',
            combo: 'command+`',
            accel: "ctrl+'"
        }
    },
    selectSingleRange: function(r, opt) {
        var cursorX;
        if (r == null) {
            return kerror("Editor." + name + ".selectSingleRange -- undefined range!");
        }
        cursorX = (opt != null ? opt.before : void 0) ? r[1][0] : r[1][1];
        this["do"].start();
        this["do"].setCursors([[cursorX, r[0]]]);
        this["do"].select([r]);
        this["do"].end();
        return this;
    },
    toggleStickySelection: function() {
        if (this.stickySelection) {
            return this.endStickySelection();
        } else {
            return this.startStickySelection();
        }
    },
    startStickySelection: function() {
        this.stickySelection = true;
        post.emit('sticky', true);
        return this.emit('selection');
    },
    endStickySelection: function() {
        this.stickySelection = false;
        post.emit('sticky', false);
        return this.emit('selection');
    },
    startSelection: function(opt) {
        var c, j, len, ref1, sel;
        if (opt == null) {
            opt = {
                extend: false
            };
        }
        if (!(opt != null ? opt.extend : void 0)) {
            this.startSelectionCursors = null;
            if (!this.stickySelection) {
                this["do"].select([]);
            }
            return;
        }
        if (!this.startSelectionCursors || this.numCursors() !== this.startSelectionCursors.length) {
            this.startSelectionCursors = this["do"].cursors();
            if (this.numSelections()) {
                ref1 = this.startSelectionCursors;
                for (j = 0, len = ref1.length; j < len; j++) {
                    c = ref1[j];
                    if (sel = this.continuousSelectionAtPosInRanges(c, this["do"].selections())) {
                        if (isSamePos(sel[1], c)) {
                            c[0] = sel[0][0];
                            c[1] = sel[0][1];
                        }
                    }
                }
            }
            if (!this.stickySelection) {
                return this["do"].select(rangesFromPositions(this.startSelectionCursors));
            }
        }
    },
    endSelection: function(opt) {
        var ci, j, nc, newCursors, newSelection, oc, oldCursors, ranges, ref1, ref2;
        if (opt == null) {
            opt = {
                extend: false
            };
        }
        if (!(opt != null ? opt.extend : void 0)) {
            this.startSelectionCursors = null;
            if (!this.stickySelection) {
                this["do"].select([]);
            }
        } else {
            oldCursors = (ref1 = this.startSelectionCursors) != null ? ref1 : this["do"].cursors();
            newSelection = this.stickySelection && this["do"].selections() || [];
            newCursors = this["do"].cursors();
            if (oldCursors.length !== newCursors.length) {
                return kerror("Editor." + this.name + ".endSelection -- oldCursors.size != newCursors.size", oldCursors.length, newCursors.length);
            }
            for (ci = j = 0, ref2 = this["do"].numCursors(); 0 <= ref2 ? j < ref2 : j > ref2; ci = 0 <= ref2 ? ++j : --j) {
                oc = oldCursors[ci];
                nc = newCursors[ci];
                if ((oc == null) || (nc == null)) {
                    return kerror("Editor." + this.name + ".endSelection -- invalid cursors", oc, nc);
                } else {
                    ranges = this.rangesForLinesBetweenPositions(oc, nc, true);
                    newSelection = newSelection.concat(ranges);
                }
            }
            this["do"].select(newSelection);
        }
        return this.checkSalterMode();
    },
    addRangeToSelection: function(range) {
        var newSelections;
        this["do"].start();
        newSelections = this["do"].selections();
        newSelections.push(range);
        this["do"].setCursors(endPositionsFromRanges(newSelections), {
            main: 'last'
        });
        this["do"].select(newSelections);
        return this["do"].end();
    },
    removeSelectionAtIndex: function(si) {
        var newCursors, newSelections;
        this["do"].start();
        newSelections = this["do"].selections();
        newSelections.splice(si, 1);
        if (newSelections.length) {
            newCursors = endPositionsFromRanges(newSelections);
            this["do"].setCursors(newCursors, {
                main: (newCursors.length + si - 1) % newCursors.length
            });
        }
        this["do"].select(newSelections);
        return this["do"].end();
    },
    clearSelection: function() {
        return this.selectNone();
    },
    selectNone: function() {
        this["do"].start();
        this["do"].select([]);
        return this["do"].end();
    },
    selectAll: function() {
        this["do"].start();
        this["do"].select(this.rangesForAllLines());
        return this["do"].end();
    },
    selectInverted: function() {
        var invertedRanges, j, li, ref1, sc;
        invertedRanges = [];
        sc = this.selectedAndCursorLineIndices();
        for (li = j = 0, ref1 = this.numLines(); 0 <= ref1 ? j < ref1 : j > ref1; li = 0 <= ref1 ? ++j : --j) {
            if (indexOf.call(sc, li) < 0) {
                invertedRanges.push(this.rangeForLineAtIndex(li));
            }
        }
        if (invertedRanges.length) {
            this["do"].start();
            this["do"].setCursors([rangeStartPos(_.first(invertedRanges))]);
            this["do"].select(invertedRanges);
            return this["do"].end();
        }
    },
    selectTextBetweenCursorsOrSurround: function() {
        var c0, c1, i, j, newCursors, newSelections, oldCursors, ref1;
        if (this.numCursors() && this.numCursors() % 2 === 0) {
            this["do"].start();
            newSelections = [];
            newCursors = [];
            oldCursors = this["do"].cursors();
            for (i = j = 0, ref1 = oldCursors.length; j < ref1; i = j += 2) {
                c0 = oldCursors[i];
                c1 = oldCursors[i + 1];
                newSelections = newSelections.concat(this.rangesForLinesBetweenPositions(c0, c1));
                newCursors.push(c1);
            }
            this["do"].setCursors(newCursors);
            this["do"].select(newSelections);
            return this["do"].end();
        } else {
            return this.selectBetweenSurround();
        }
    },
    selectBetweenSurround: function() {
        var end, s, start, surr;
        if (surr = this.highlightsSurroundingCursor()) {
            this["do"].start();
            start = rangeEndPos(surr[0]);
            end = rangeStartPos(surr[1]);
            s = this.rangesForLinesBetweenPositions(start, end);
            s = cleanRanges(s);
            if (s.length) {
                this["do"].select(s);
                if (this["do"].numSelections()) {
                    this["do"].setCursors([rangeEndPos(_.last(s))], {
                        Main: 'closest'
                    });
                }
            }
            return this["do"].end();
        }
    },
    selectSurround: function() {
        var r, surr;
        if (surr = this.highlightsSurroundingCursor()) {
            this["do"].start();
            this["do"].select(surr);
            if (this["do"].numSelections()) {
                this["do"].setCursors((function() {
                    var j, len, ref1, results;
                    ref1 = this["do"].selections();
                    results = [];
                    for (j = 0, len = ref1.length; j < len; j++) {
                        r = ref1[j];
                        results.push(rangeEndPos(r));
                    }
                    return results;
                }).call(this), {
                    main: 'closest'
                });
            }
            return this["do"].end();
        }
    },
    selectNextHighlight: function() {
        var r, ref1, ref2, searchText;
        if (!this.numHighlights() && (typeof window !== "undefined" && window !== null)) {
            searchText = (ref1 = window.commandline.commands.find) != null ? ref1.currentText : void 0;
            if (searchText != null ? searchText.length : void 0) {
                this.highlightText(searchText);
            }
        }
        if (!this.numHighlights()) {
            return;
        }
        r = rangeAfterPosInRanges(this.cursorPos(), this.highlights());
        if (r != null) {
            r;
        } else {
            r = this.highlight(0);
        }
        if (r != null) {
            this.selectSingleRange(r, {
                before: ((ref2 = r[2]) != null ? ref2.clss : void 0) === 'close'
            });
            return typeof this.scrollCursorIntoView === "function" ? this.scrollCursorIntoView() : void 0;
        }
    },
    selectPrevHighlight: function() {
        var hs, r, ref1, searchText;
        if (!this.numHighlights() && (typeof window !== "undefined" && window !== null)) {
            searchText = (ref1 = window.commandline.commands.find) != null ? ref1.currentText : void 0;
            if (searchText != null ? searchText.length : void 0) {
                this.highlightText(searchText);
            }
        }
        if (!this.numHighlights()) {
            return;
        }
        hs = this.highlights();
        r = rangeBeforePosInRanges(this.cursorPos(), hs);
        if (r != null) {
            r;
        } else {
            r = _.last(hs);
        }
        if (r != null) {
            return this.selectSingleRange(r);
        }
    }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../../coffee/editor/actions/selection.coffee