// koffee 1.11.0
var _, empty, klog, post, ref,
    indexOf = [].indexOf;

ref = require('kxk'), _ = ref._, empty = ref.empty, klog = ref.klog, post = ref.post;

module.exports = {
    actions: {
        menu: 'Select',
        highlightWordAndAddToSelection: {
            name: 'Highlight and Select Word',
            text: 'highlights all occurrences of text in selection or word at cursor and selects the first|next highlight.',
            combo: 'command+d',
            accel: 'ctrl+d'
        },
        selectAllWords: {
            name: 'Select All Words',
            combo: 'command+alt+d',
            accel: 'alt+ctrl+d'
        },
        removeSelectedHighlight: {
            name: 'Remove Highlighted Word from Selection',
            text: "does the inverse of 'highlight and select' word",
            combo: 'command+shift+d',
            accel: 'ctrl+shift+d'
        },
        highlightTextOfSelectionOrWordAtCursor: {
            name: 'Highlight and Select Word',
            text: 'highlights all occurrences of text in selection or word at cursor and selects it. expands to the left if already selected.',
            combo: 'command+e',
            accel: 'ctrl+e'
        }
    },
    highlightText: function(text, opt) {
        var hls, ref1, ref2;
        hls = this.rangesForText(text, opt);
        if (hls.length) {
            switch (opt != null ? opt.select : void 0) {
                case 'after':
                    this.selectSingleRange((ref1 = rangeAfterPosInRanges(this.cursorPos(), hls)) != null ? ref1 : _.first(hls));
                    break;
                case 'before':
                    this.selectSingleRange((ref2 = rangeBeforePosInRanges(this.cursorPos(), hls)) != null ? ref2 : _.first(hls));
                    break;
                case 'first':
                    this.selectSingleRange(_.first(hls));
            }
        }
        this.setHighlights(hls);
        this.renderHighlights();
        return this.emit('highlight');
    },
    wordHighlights: function() {
        return this.highlights().filter(function(h) {
            var ref1, ref2, ref3, ref4;
            return !((ref1 = h[2]) != null ? (ref2 = ref1.clss) != null ? ref2.startsWith('stringmatch') : void 0 : void 0) && !((ref3 = h[2]) != null ? (ref4 = ref3.clss) != null ? ref4.startsWith('bracketmatch') : void 0 : void 0);
        });
    },
    selectAllWords: function() {
        var editor, ref1, ref2;
        if (this.name === 'commandline-editor') {
            if (editor = (ref1 = window.commandline) != null ? (ref2 = ref1.command) != null ? ref2.receivingEditor() : void 0 : void 0) {
                editor.selectAllWords();
                editor.focus();
                return;
            }
        }
        this.highlightWordAndAddToSelection();
        this["do"].start();
        this["do"].select(this["do"].highlights());
        if (this["do"].numSelections()) {
            this["do"].setCursors(endPositionsFromRanges(this["do"].selections()), {
                main: 'closest'
            });
        }
        return this["do"].end();
    },
    highlightWordAndAddToSelection: function() {
        var cp, cursorInWordHighlight, r, sr, wordHighlights;
        cp = this.cursorPos();
        wordHighlights = this.wordHighlights();
        cursorInWordHighlight = wordHighlights.length && rangeAtPosInRanges(cp, wordHighlights);
        if (!cursorInWordHighlight) {
            return this.highlightTextOfSelectionOrWordAtCursor();
        } else {
            this["do"].start();
            sr = rangeAtPosInRanges(cp, this["do"].selections());
            if (sr) {
                r = rangeAfterPosInRanges(cp, wordHighlights);
            } else {
                r = rangeAtPosInRanges(cp, wordHighlights);
            }
            if (r != null) {
                r;
            } else {
                r = wordHighlights[0];
            }
            this.addRangeToSelection(r);
            return this["do"].end();
        }
    },
    highlightTextOfSelectionOrWordAtCursor: function() {
        var largerRange, largerText, nr, nt, ref1, ref2, sel, srange, text;
        if (this.numSelections() === 0) {
            srange = this.rangeForRealWordAtPos(this.cursorPos());
            if (empty(this.textInRange(srange).trim())) {
                this.clearHighlights();
                this.selectNone();
                return;
            }
            this.selectSingleRange(srange);
        }
        sel = this.selection(0);
        text = this.textInRange(sel);
        if (text.length) {
            if (this.numHighlights()) {
                if (text === this.textInRange(this.highlight(0))) {
                    largerRange = [sel[0], [sel[1][0] - 1, sel[1][1]]];
                    largerText = this.textInRange(largerRange);
                    if ((ref1 = largerText[0], indexOf.call("@#$%&*+-!?:.'\"/", ref1) >= 0) || /[A-Za-z]/.test(largerText[0])) {
                        if (ref2 = largerText[0], indexOf.call("'\"", ref2) >= 0) {
                            nr = [sel[0], [sel[1][0] - 1, sel[1][1] + 1]];
                            nt = this.textInRange(nr);
                            if (nt[nt.length - 1] === largerText[0]) {
                                largerText = nt;
                                largerRange = nr;
                            }
                        } else if (/[A-Za-z]/.test(largerText[0])) {
                            while (largerRange[1][0] > 0 && /[A-Za-z]/.test(this.line(largerRange[0])[largerRange[1][0] - 1])) {
                                largerRange[1][0] -= 1;
                                largerText = this.textInRange(largerRange);
                            }
                        }
                        text = largerText;
                        if (this.numSelections() === 1) {
                            klog('largerRange ----------- ', largerRange);
                            this.selectSingleRange(largerRange);
                        }
                    }
                }
            }
            this.setHighlights(this.rangesForText(text, {
                max: 9999
            }));
            if (this.renderHighlights != null) {
                this.renderHighlights();
                this.emit('highlight');
                post.emit('searchText', text);
                return this.focus();
            }
        }
    },
    clearHighlights: function() {
        if (this.numHighlights()) {
            this.setHighlights([]);
            return this.emit('highlight');
        }
    },
    removeSelectedHighlight: function() {
        var cp, hr, sel, sr;
        cp = this.cursorPos();
        sel = this.selections();
        sr = rangeAtPosInRanges(cp, sel);
        hr = rangeAtPosInRanges(cp, this.highlights());
        if (sr && hr) {
            return this.removeSelectionAtIndex(sel.indexOf(sr));
        }
    }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../../coffee/editor/actions/highlight.coffee