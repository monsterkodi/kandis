// koffee 1.4.0
var _, empty, kerror, ref,
    indexOf = [].indexOf;

ref = require('kxk'), empty = ref.empty, kerror = ref.kerror, _ = ref._;

module.exports = {
    actions: {
        menu: 'Select',
        highlightWordAndAddToSelection: {
            name: 'Highlight and Select Word',
            text: 'highlights all occurrences of text in selection or word at cursor and selects the first|next highlight.',
            combo: 'command+d',
            accel: 'ctrl+d'
        },
        selectAllWords: {
            name: 'Select All Words',
            combo: 'command+alt+d',
            accel: 'alt+ctrl+d'
        },
        removeSelectedHighlight: {
            name: 'Remove Highlighted Word from Selection',
            text: "does the inverse of 'highlight and select' word",
            combo: 'command+shift+d',
            accel: 'ctrl+shift+d'
        },
        highlightTextOfSelectionOrWordAtCursor: {
            name: 'Highlight and Select Word',
            text: 'highlights all occurrences of text in selection or word at cursor and selects it. expands to the left if already selected.',
            combo: 'command+e',
            accel: 'ctrl+e'
        }
    },
    highlightText: function(text, opt) {
        var hls, ref1, ref2, ref3;
        hls = this.rangesForText(text, opt);
        if (hls.length) {
            switch (opt != null ? opt.select : void 0) {
                case 'after':
                    this.selectSingleRange((ref1 = rangeAfterPosInRanges(this.cursorPos(), hls)) != null ? ref1 : _.first(hls));
                    break;
                case 'before':
                    this.selectSingleRange((ref2 = rangeBeforePosInRanges(this.cursorPos(), hls)) != null ? ref2 : _.first(hls));
                    break;
                case 'first':
                    this.selectSingleRange(_.first(hls));
            }
            if (!(opt != null ? opt.noScroll : void 0)) {
                if ((ref3 = this.scroll) != null) {
                    ref3.cursorToTop();
                }
            }
        }
        this.setHighlights(hls);
        this.renderHighlights();
        return this.emit('highlight');
    },
    wordHighlights: function() {
        return this.highlights().filter(function(h) {
            var ref1, ref2, ref3, ref4;
            return !((ref1 = h[2]) != null ? (ref2 = ref1.clss) != null ? ref2.startsWith('stringmatch') : void 0 : void 0) && !((ref3 = h[2]) != null ? (ref4 = ref3.clss) != null ? ref4.startsWith('bracketmatch') : void 0 : void 0);
        });
    },
    highlightForFind: function() {
        var cp, cursorInWordHighlight, wordHighlights;
        if (this.numSelections() === 1 && !empty(this.textInRange(this.selection(0)).trim())) {
            this.highlightText(this.textInRange(this.selection(0)));
        } else {
            cp = this.cursorPos();
            wordHighlights = this.wordHighlights();
            cursorInWordHighlight = wordHighlights.length;
            if (!cursorInWordHighlight) {
                this.highlightTextOfSelectionOrWordAtCursor();
            }
        }
        return this.selectNextHighlight();
    },
    highlightWordAndAddToSelection: function(skipScroll) {
        var cp, cursorInWordHighlight, r, ref1, sr, wordHighlights;
        cp = this.cursorPos();
        wordHighlights = this.wordHighlights();
        cursorInWordHighlight = wordHighlights.length && rangeAtPosInRanges(cp, wordHighlights);
        if (!cursorInWordHighlight) {
            return this.highlightTextOfSelectionOrWordAtCursor();
        } else {
            this["do"].start();
            sr = rangeAtPosInRanges(cp, this["do"].selections());
            if (sr) {
                r = rangeAfterPosInRanges(cp, wordHighlights);
            } else {
                r = rangeAtPosInRanges(cp, wordHighlights);
            }
            if (r != null) {
                r;
            } else {
                r = wordHighlights[0];
            }
            this.addRangeToSelection(r);
            if (!skipScroll) {
                if ((ref1 = this.scroll) != null) {
                    ref1.cursorToTop();
                }
            }
            return this["do"].end();
        }
    },
    selectAllWords: function() {
        var editor, ref1, ref2;
        if (this.name === 'commandline-editor') {
            if (editor = (ref1 = window.commandline) != null ? (ref2 = ref1.command) != null ? ref2.receivingEditor() : void 0 : void 0) {
                editor.selectAllWords();
                editor.focus();
                return;
            }
        }
        this.highlightWordAndAddToSelection();
        this["do"].start();
        this["do"].select(this["do"].highlights());
        if (this["do"].numSelections()) {
            this["do"].setCursors(endPositionsFromRanges(this["do"].selections()), {
                main: 'closest'
            });
        }
        return this["do"].end();
    },
    highlightTextOfSelectionOrWordAtCursor: function() {
        var largerRange, largerText, nr, nt, ref1, ref2, ref3, ref4, sel, srange, text;
        if (this.numSelections() === 0) {
            srange = this.rangeForRealWordAtPos(this.cursorPos());
            if (empty(this.textInRange(srange).trim())) {
                this.clearHighlights();
                this.selectNone();
                return;
            }
            this.selectSingleRange(srange);
        }
        sel = this.selection(0);
        text = this.textInRange(sel);
        if (text.length) {
            if (this.numHighlights()) {
                if (text === this.textInRange(this.highlight(0))) {
                    largerRange = [sel[0], [sel[1][0] - 1, sel[1][1]]];
                    largerText = this.textInRange(largerRange);
                    if ((ref1 = largerText[0], indexOf.call("@#$%&*+-!?:.'\"/", ref1) >= 0) || /[A-Za-z]/.test(largerText[0])) {
                        if (ref2 = largerText[0], indexOf.call("'\"", ref2) >= 0) {
                            nr = [sel[0], [sel[1][0] - 1, sel[1][1] + 1]];
                            nt = this.textInRange(nr);
                            if (nt[nt.length - 1] === largerText[0]) {
                                largerText = nt;
                                largerRange = nr;
                            }
                        } else if (/[A-Za-z]/.test(largerText[0])) {
                            while (largerRange[1][0] > 0 && /[A-Za-z]/.test(this.line(largerRange[0])[largerRange[1][0] - 1])) {
                                largerRange[1][0] -= 1;
                                largerText = this.textInRange(largerRange);
                            }
                        }
                        text = largerText;
                        if (this.numSelections() === 1) {
                            this.selectSingleRange(largerRange);
                        }
                    }
                }
            }
            this.setHighlights(this.rangesForText(text, {
                max: 9999
            }));
            if (this.renderHighlights != null) {
                this.renderHighlights();
                this.emit('highlight');
                if (window.split.commandlineVisible()) {
                    if ((ref3 = (ref4 = window.commandline.command) != null ? ref4.prefsID : void 0) !== 'search' && ref3 !== 'find') {
                        window.commandline.startCommand('find');
                    }
                }
                window.commandline.commands.find.currentText = text;
                window.commandline.commands.search.currentText = text;
                window.commandline.setText(text);
                return this.focus();
            }
        }
    },
    clearHighlights: function() {
        if (this.numHighlights()) {
            this.setHighlights([]);
            return this.emit('highlight');
        }
    },
    removeSelectedHighlight: function() {
        var cp, hr, sel, sr;
        cp = this.cursorPos();
        sel = this.selections();
        sr = rangeAtPosInRanges(cp, sel);
        hr = rangeAtPosInRanges(cp, this.highlights());
        if (sr && hr) {
            return this.removeSelectionAtIndex(sel.indexOf(sr));
        }
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBT0EsSUFBQSxxQkFBQTtJQUFBOztBQUFBLE1BQXVCLE9BQUEsQ0FBUSxLQUFSLENBQXZCLEVBQUUsaUJBQUYsRUFBUyxtQkFBVCxFQUFpQjs7QUFFakIsTUFBTSxDQUFDLE9BQVAsR0FFSTtJQUFBLE9BQUEsRUFDSTtRQUFBLElBQUEsRUFBTSxRQUFOO1FBRUEsOEJBQUEsRUFDSTtZQUFBLElBQUEsRUFBTywyQkFBUDtZQUNBLElBQUEsRUFBTyx5R0FEUDtZQUVBLEtBQUEsRUFBTyxXQUZQO1lBR0EsS0FBQSxFQUFPLFFBSFA7U0FISjtRQVFBLGNBQUEsRUFDSTtZQUFBLElBQUEsRUFBTyxrQkFBUDtZQUNBLEtBQUEsRUFBTyxlQURQO1lBRUEsS0FBQSxFQUFPLFlBRlA7U0FUSjtRQWFBLHVCQUFBLEVBQ0k7WUFBQSxJQUFBLEVBQU0sd0NBQU47WUFDQSxJQUFBLEVBQU8saURBRFA7WUFFQSxLQUFBLEVBQU8saUJBRlA7WUFHQSxLQUFBLEVBQU8sY0FIUDtTQWRKO1FBbUJBLHNDQUFBLEVBQ0k7WUFBQSxJQUFBLEVBQU8sMkJBQVA7WUFDQSxJQUFBLEVBQU8sNEhBRFA7WUFFQSxLQUFBLEVBQU8sV0FGUDtZQUdBLEtBQUEsRUFBTyxRQUhQO1NBcEJKO0tBREo7SUFnQ0EsYUFBQSxFQUFlLFNBQUMsSUFBRCxFQUFPLEdBQVA7QUFFWCxZQUFBO1FBQUEsR0FBQSxHQUFNLElBQUMsQ0FBQSxhQUFELENBQWUsSUFBZixFQUFxQixHQUFyQjtRQUNOLElBQUcsR0FBRyxDQUFDLE1BQVA7QUFDSSxrQ0FBTyxHQUFHLENBQUUsZUFBWjtBQUFBLHFCQUNTLE9BRFQ7b0JBQ3VCLElBQUMsQ0FBQSxpQkFBRCx3RUFBOEQsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxHQUFSLENBQTlEO0FBQWQ7QUFEVCxxQkFFUyxRQUZUO29CQUV1QixJQUFDLENBQUEsaUJBQUQseUVBQStELENBQUMsQ0FBQyxLQUFGLENBQVEsR0FBUixDQUEvRDtBQUFkO0FBRlQscUJBR1MsT0FIVDtvQkFHdUIsSUFBQyxDQUFBLGlCQUFELENBQW1CLENBQUMsQ0FBQyxLQUFGLENBQVEsR0FBUixDQUFuQjtBQUh2QjtZQUlBLElBQTBCLGdCQUFJLEdBQUcsQ0FBRSxrQkFBbkM7O3dCQUFPLENBQUUsV0FBVCxDQUFBO2lCQUFBO2FBTEo7O1FBTUEsSUFBQyxDQUFBLGFBQUQsQ0FBZSxHQUFmO1FBQ0EsSUFBQyxDQUFBLGdCQUFELENBQUE7ZUFDQSxJQUFDLENBQUEsSUFBRCxDQUFNLFdBQU47SUFYVyxDQWhDZjtJQW1EQSxjQUFBLEVBQWdCLFNBQUE7ZUFBRyxJQUFDLENBQUEsVUFBRCxDQUFBLENBQWEsQ0FBQyxNQUFkLENBQXFCLFNBQUMsQ0FBRDtBQUFPLGdCQUFBO21CQUFBLDJEQUFjLENBQUUsVUFBWixDQUF1QixhQUF2QixvQkFBSixJQUE4QywyREFBYyxDQUFFLFVBQVosQ0FBdUIsY0FBdkI7UUFBekQsQ0FBckI7SUFBSCxDQW5EaEI7SUFxREEsZ0JBQUEsRUFBa0IsU0FBQTtBQUVkLFlBQUE7UUFBQSxJQUFHLElBQUMsQ0FBQSxhQUFELENBQUEsQ0FBQSxLQUFvQixDQUFwQixJQUEwQixDQUFJLEtBQUEsQ0FBTSxJQUFDLENBQUEsV0FBRCxDQUFhLElBQUMsQ0FBQSxTQUFELENBQVcsQ0FBWCxDQUFiLENBQTBCLENBQUMsSUFBM0IsQ0FBQSxDQUFOLENBQWpDO1lBQ0ksSUFBQyxDQUFBLGFBQUQsQ0FBZSxJQUFDLENBQUEsV0FBRCxDQUFhLElBQUMsQ0FBQSxTQUFELENBQVcsQ0FBWCxDQUFiLENBQWYsRUFESjtTQUFBLE1BQUE7WUFHSSxFQUFBLEdBQUssSUFBQyxDQUFBLFNBQUQsQ0FBQTtZQUNMLGNBQUEsR0FBaUIsSUFBQyxDQUFBLGNBQUQsQ0FBQTtZQUNqQixxQkFBQSxHQUF3QixjQUFjLENBQUM7WUFDdkMsSUFBRyxDQUFJLHFCQUFQO2dCQUNJLElBQUMsQ0FBQSxzQ0FBRCxDQUFBLEVBREo7YUFOSjs7ZUFRQSxJQUFDLENBQUEsbUJBQUQsQ0FBQTtJQVZjLENBckRsQjtJQWlFQSw4QkFBQSxFQUFnQyxTQUFDLFVBQUQ7QUFFNUIsWUFBQTtRQUFBLEVBQUEsR0FBSyxJQUFDLENBQUEsU0FBRCxDQUFBO1FBQ0wsY0FBQSxHQUFpQixJQUFDLENBQUEsY0FBRCxDQUFBO1FBQ2pCLHFCQUFBLEdBQXdCLGNBQWMsQ0FBQyxNQUFmLElBQTBCLGtCQUFBLENBQW1CLEVBQW5CLEVBQXVCLGNBQXZCO1FBQ2xELElBQUcsQ0FBSSxxQkFBUDttQkFDSSxJQUFDLENBQUEsc0NBQUQsQ0FBQSxFQURKO1NBQUEsTUFBQTtZQUdJLElBQUMsRUFBQSxFQUFBLEVBQUUsQ0FBQyxLQUFKLENBQUE7WUFDQSxFQUFBLEdBQUssa0JBQUEsQ0FBbUIsRUFBbkIsRUFBdUIsSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLFVBQUosQ0FBQSxDQUF2QjtZQUNMLElBQUcsRUFBSDtnQkFDSSxDQUFBLEdBQUkscUJBQUEsQ0FBc0IsRUFBdEIsRUFBMEIsY0FBMUIsRUFEUjthQUFBLE1BQUE7Z0JBR0ksQ0FBQSxHQUFJLGtCQUFBLENBQW1CLEVBQW5CLEVBQXVCLGNBQXZCLEVBSFI7OztnQkFJQTs7Z0JBQUEsSUFBSyxjQUFlLENBQUEsQ0FBQTs7WUFDcEIsSUFBQyxDQUFBLG1CQUFELENBQXFCLENBQXJCO1lBQ0EsSUFBRyxDQUFJLFVBQVA7O3dCQUNXLENBQUUsV0FBVCxDQUFBO2lCQURKOzttQkFFQSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsR0FBSixDQUFBLEVBYko7O0lBTDRCLENBakVoQztJQXFGQSxjQUFBLEVBQWdCLFNBQUE7QUFFWixZQUFBO1FBQUEsSUFBRyxJQUFDLENBQUEsSUFBRCxLQUFTLG9CQUFaO1lBQ0ksSUFBRyxNQUFBLDZFQUFvQyxDQUFFLGVBQTdCLENBQUEsbUJBQVo7Z0JBQ0ksTUFBTSxDQUFDLGNBQVAsQ0FBQTtnQkFDQSxNQUFNLENBQUMsS0FBUCxDQUFBO0FBQ0EsdUJBSEo7YUFESjs7UUFNQSxJQUFDLENBQUEsOEJBQUQsQ0FBQTtRQUNBLElBQUMsRUFBQSxFQUFBLEVBQUUsQ0FBQyxLQUFKLENBQUE7UUFDQSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsTUFBSixDQUFXLElBQUMsRUFBQSxFQUFBLEVBQUUsQ0FBQyxVQUFKLENBQUEsQ0FBWDtRQUNBLElBQUcsSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLGFBQUosQ0FBQSxDQUFIO1lBQ0ksSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLFVBQUosQ0FBZSxzQkFBQSxDQUF1QixJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsVUFBSixDQUFBLENBQXZCLENBQWYsRUFBeUQ7Z0JBQUEsSUFBQSxFQUFNLFNBQU47YUFBekQsRUFESjs7ZUFFQSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsR0FBSixDQUFBO0lBYlksQ0FyRmhCO0lBMEdBLHNDQUFBLEVBQXdDLFNBQUE7QUFFcEMsWUFBQTtRQUFBLElBQUcsSUFBQyxDQUFBLGFBQUQsQ0FBQSxDQUFBLEtBQW9CLENBQXZCO1lBQ0ksTUFBQSxHQUFTLElBQUMsQ0FBQSxxQkFBRCxDQUF1QixJQUFDLENBQUEsU0FBRCxDQUFBLENBQXZCO1lBQ1QsSUFBRyxLQUFBLENBQU0sSUFBQyxDQUFBLFdBQUQsQ0FBYSxNQUFiLENBQW9CLENBQUMsSUFBckIsQ0FBQSxDQUFOLENBQUg7Z0JBQ0ksSUFBQyxDQUFBLGVBQUQsQ0FBQTtnQkFDQSxJQUFDLENBQUEsVUFBRCxDQUFBO0FBQ0EsdUJBSEo7O1lBSUEsSUFBQyxDQUFBLGlCQUFELENBQW1CLE1BQW5CLEVBTko7O1FBUUEsR0FBQSxHQUFNLElBQUMsQ0FBQSxTQUFELENBQVcsQ0FBWDtRQUNOLElBQUEsR0FBTyxJQUFDLENBQUEsV0FBRCxDQUFhLEdBQWI7UUFDUCxJQUFHLElBQUksQ0FBQyxNQUFSO1lBRUksSUFBRyxJQUFDLENBQUEsYUFBRCxDQUFBLENBQUg7Z0JBQ0ksSUFBRyxJQUFBLEtBQVEsSUFBQyxDQUFBLFdBQUQsQ0FBYSxJQUFDLENBQUEsU0FBRCxDQUFXLENBQVgsQ0FBYixDQUFYO29CQUNJLFdBQUEsR0FBYyxDQUFDLEdBQUksQ0FBQSxDQUFBLENBQUwsRUFBUyxDQUFDLEdBQUksQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQVAsR0FBVSxDQUFYLEVBQWMsR0FBSSxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBckIsQ0FBVDtvQkFDZCxVQUFBLEdBQWEsSUFBQyxDQUFBLFdBQUQsQ0FBYSxXQUFiO29CQUNiLElBQUcsUUFBQSxVQUFXLENBQUEsQ0FBQSxDQUFYLEVBQUEsYUFBaUIsa0JBQWpCLEVBQUEsSUFBQSxNQUFBLENBQUEsSUFBdUMsVUFBVSxDQUFDLElBQVgsQ0FBZ0IsVUFBVyxDQUFBLENBQUEsQ0FBM0IsQ0FBMUM7d0JBQ0ksV0FBRyxVQUFXLENBQUEsQ0FBQSxDQUFYLEVBQUEsYUFBaUIsS0FBakIsRUFBQSxJQUFBLE1BQUg7NEJBQ0ksRUFBQSxHQUFLLENBQUMsR0FBSSxDQUFBLENBQUEsQ0FBTCxFQUFTLENBQUMsR0FBSSxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBUCxHQUFVLENBQVgsRUFBYyxHQUFJLENBQUEsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFQLEdBQVUsQ0FBeEIsQ0FBVDs0QkFDTCxFQUFBLEdBQUssSUFBQyxDQUFBLFdBQUQsQ0FBYSxFQUFiOzRCQUNMLElBQUcsRUFBRyxDQUFBLEVBQUUsQ0FBQyxNQUFILEdBQVUsQ0FBVixDQUFILEtBQW1CLFVBQVcsQ0FBQSxDQUFBLENBQWpDO2dDQUNJLFVBQUEsR0FBYTtnQ0FDYixXQUFBLEdBQWMsR0FGbEI7NkJBSEo7eUJBQUEsTUFNSyxJQUFHLFVBQVUsQ0FBQyxJQUFYLENBQWdCLFVBQVcsQ0FBQSxDQUFBLENBQTNCLENBQUg7QUFDRCxtQ0FBTSxXQUFZLENBQUEsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFmLEdBQW9CLENBQXBCLElBQTBCLFVBQVUsQ0FBQyxJQUFYLENBQWdCLElBQUMsQ0FBQSxJQUFELENBQU0sV0FBWSxDQUFBLENBQUEsQ0FBbEIsQ0FBc0IsQ0FBQSxXQUFZLENBQUEsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFmLEdBQWtCLENBQWxCLENBQXRDLENBQWhDO2dDQUNJLFdBQVksQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQWYsSUFBcUI7Z0NBQ3JCLFVBQUEsR0FBYSxJQUFDLENBQUEsV0FBRCxDQUFhLFdBQWI7NEJBRmpCLENBREM7O3dCQUlMLElBQUEsR0FBTzt3QkFDUCxJQUFrQyxJQUFDLENBQUEsYUFBRCxDQUFBLENBQUEsS0FBb0IsQ0FBdEQ7NEJBQUEsSUFBQyxDQUFBLGlCQUFELENBQW1CLFdBQW5CLEVBQUE7eUJBWko7cUJBSEo7aUJBREo7O1lBa0JBLElBQUMsQ0FBQSxhQUFELENBQWUsSUFBQyxDQUFBLGFBQUQsQ0FBZSxJQUFmLEVBQXFCO2dCQUFBLEdBQUEsRUFBSSxJQUFKO2FBQXJCLENBQWY7WUFHQSxJQUFHLDZCQUFIO2dCQUNJLElBQUMsQ0FBQSxnQkFBRCxDQUFBO2dCQUNBLElBQUMsQ0FBQSxJQUFELENBQU0sV0FBTjtnQkFFQSxJQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsa0JBQWIsQ0FBQSxDQUFIO29CQUNJLDhEQUFvRSxDQUFFLGlCQUE1QixLQUE0QyxRQUE1QyxJQUFBLElBQUEsS0FBc0QsTUFBaEc7d0JBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxZQUFuQixDQUFnQyxNQUFoQyxFQUFBO3FCQURKOztnQkFFQSxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBakMsR0FBK0M7Z0JBQy9DLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxXQUFuQyxHQUFpRDtnQkFDakQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFuQixDQUEyQixJQUEzQjt1QkFFQSxJQUFDLENBQUEsS0FBRCxDQUFBLEVBVko7YUF2Qko7O0lBWm9DLENBMUd4QztJQStKQSxlQUFBLEVBQWlCLFNBQUE7UUFFYixJQUFHLElBQUMsQ0FBQSxhQUFELENBQUEsQ0FBSDtZQUNJLElBQUMsQ0FBQSxhQUFELENBQWUsRUFBZjttQkFDQSxJQUFDLENBQUEsSUFBRCxDQUFNLFdBQU4sRUFGSjs7SUFGYSxDQS9KakI7SUEyS0EsdUJBQUEsRUFBeUIsU0FBQTtBQUVyQixZQUFBO1FBQUEsRUFBQSxHQUFLLElBQUMsQ0FBQSxTQUFELENBQUE7UUFDTCxHQUFBLEdBQU0sSUFBQyxDQUFBLFVBQUQsQ0FBQTtRQUNOLEVBQUEsR0FBSyxrQkFBQSxDQUFtQixFQUFuQixFQUF1QixHQUF2QjtRQUNMLEVBQUEsR0FBSyxrQkFBQSxDQUFtQixFQUFuQixFQUF1QixJQUFDLENBQUEsVUFBRCxDQUFBLENBQXZCO1FBQ0wsSUFBRyxFQUFBLElBQU8sRUFBVjttQkFDSSxJQUFDLENBQUEsc0JBQUQsQ0FBd0IsR0FBRyxDQUFDLE9BQUosQ0FBWSxFQUFaLENBQXhCLEVBREo7O0lBTnFCLENBM0t6QiIsInNvdXJjZXNDb250ZW50IjpbIlxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgXG4jIDAwMCAgIDAwMCAgMDAwICAwMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAwMDAgICAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICBcbiMgMDAwMDAwMDAwICAwMDAgIDAwMCAgMDAwMCAgMDAwMDAwMDAwICAwMDAgICAgICAwMDAgIDAwMCAgMDAwMCAgMDAwMDAwMDAwICAgICAwMDAgICAgIFxuIyAwMDAgICAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgICAgMDAwICAgICBcblxueyBlbXB0eSwga2Vycm9yLCBfIH0gPSByZXF1aXJlICdreGsnXG5cbm1vZHVsZS5leHBvcnRzID0gXG5cbiAgICBhY3Rpb25zOlxuICAgICAgICBtZW51OiAnU2VsZWN0J1xuICAgICAgICBcbiAgICAgICAgaGlnaGxpZ2h0V29yZEFuZEFkZFRvU2VsZWN0aW9uOlxuICAgICAgICAgICAgbmFtZTogICdIaWdobGlnaHQgYW5kIFNlbGVjdCBXb3JkJ1xuICAgICAgICAgICAgdGV4dDogICdoaWdobGlnaHRzIGFsbCBvY2N1cnJlbmNlcyBvZiB0ZXh0IGluIHNlbGVjdGlvbiBvciB3b3JkIGF0IGN1cnNvciBhbmQgc2VsZWN0cyB0aGUgZmlyc3R8bmV4dCBoaWdobGlnaHQuJ1xuICAgICAgICAgICAgY29tYm86ICdjb21tYW5kK2QnXG4gICAgICAgICAgICBhY2NlbDogJ2N0cmwrZCdcbiAgICAgICAgICAgIFxuICAgICAgICBzZWxlY3RBbGxXb3JkczpcbiAgICAgICAgICAgIG5hbWU6ICAnU2VsZWN0IEFsbCBXb3JkcydcbiAgICAgICAgICAgIGNvbWJvOiAnY29tbWFuZCthbHQrZCdcbiAgICAgICAgICAgIGFjY2VsOiAnYWx0K2N0cmwrZCdcbiAgICAgICAgICAgIFxuICAgICAgICByZW1vdmVTZWxlY3RlZEhpZ2hsaWdodDpcbiAgICAgICAgICAgIG5hbWU6ICdSZW1vdmUgSGlnaGxpZ2h0ZWQgV29yZCBmcm9tIFNlbGVjdGlvbidcbiAgICAgICAgICAgIHRleHQ6ICBcImRvZXMgdGhlIGludmVyc2Ugb2YgJ2hpZ2hsaWdodCBhbmQgc2VsZWN0JyB3b3JkXCJcbiAgICAgICAgICAgIGNvbWJvOiAnY29tbWFuZCtzaGlmdCtkJ1xuICAgICAgICAgICAgYWNjZWw6ICdjdHJsK3NoaWZ0K2QnXG4gICAgICAgICAgICBcbiAgICAgICAgaGlnaGxpZ2h0VGV4dE9mU2VsZWN0aW9uT3JXb3JkQXRDdXJzb3I6XG4gICAgICAgICAgICBuYW1lOiAgJ0hpZ2hsaWdodCBhbmQgU2VsZWN0IFdvcmQnXG4gICAgICAgICAgICB0ZXh0OiAgJ2hpZ2hsaWdodHMgYWxsIG9jY3VycmVuY2VzIG9mIHRleHQgaW4gc2VsZWN0aW9uIG9yIHdvcmQgYXQgY3Vyc29yIGFuZCBzZWxlY3RzIGl0LiBleHBhbmRzIHRvIHRoZSBsZWZ0IGlmIGFscmVhZHkgc2VsZWN0ZWQuJ1xuICAgICAgICAgICAgY29tYm86ICdjb21tYW5kK2UnXG4gICAgICAgICAgICBhY2NlbDogJ2N0cmwrZSdcblxuICAgICMgMDAwMDAwMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMDAgIFxuICAgICMgICAgMDAwICAgICAwMDAgICAgICAgIDAwMCAwMDAgICAgICAwMDAgICAgIFxuICAgICMgICAgMDAwICAgICAwMDAwMDAwICAgICAwMDAwMCAgICAgICAwMDAgICAgIFxuICAgICMgICAgMDAwICAgICAwMDAgICAgICAgIDAwMCAwMDAgICAgICAwMDAgICAgIFxuICAgICMgICAgMDAwICAgICAwMDAwMDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuICAgIFxuICAgIGhpZ2hsaWdodFRleHQ6ICh0ZXh0LCBvcHQpIC0+ICMgY2FsbGVkIGZyb20gZmluZCBjb21tYW5kXG4gICAgICAgIFxuICAgICAgICBobHMgPSBAcmFuZ2VzRm9yVGV4dCB0ZXh0LCBvcHRcbiAgICAgICAgaWYgaGxzLmxlbmd0aFxuICAgICAgICAgICAgc3dpdGNoIG9wdD8uc2VsZWN0XG4gICAgICAgICAgICAgICAgd2hlbiAnYWZ0ZXInICB0aGVuIEBzZWxlY3RTaW5nbGVSYW5nZSByYW5nZUFmdGVyUG9zSW5SYW5nZXMoQGN1cnNvclBvcygpLCBobHMpID8gXy5maXJzdCBobHNcbiAgICAgICAgICAgICAgICB3aGVuICdiZWZvcmUnIHRoZW4gQHNlbGVjdFNpbmdsZVJhbmdlIHJhbmdlQmVmb3JlUG9zSW5SYW5nZXMoQGN1cnNvclBvcygpLCBobHMpID8gXy5maXJzdCBobHNcbiAgICAgICAgICAgICAgICB3aGVuICdmaXJzdCcgIHRoZW4gQHNlbGVjdFNpbmdsZVJhbmdlIF8uZmlyc3QgaGxzXG4gICAgICAgICAgICBAc2Nyb2xsPy5jdXJzb3JUb1RvcCgpIGlmIG5vdCBvcHQ/Lm5vU2Nyb2xsICMgPCBzdWNrcyFcbiAgICAgICAgQHNldEhpZ2hsaWdodHMgaGxzXG4gICAgICAgIEByZW5kZXJIaWdobGlnaHRzKClcbiAgICAgICAgQGVtaXQgJ2hpZ2hsaWdodCdcbiAgICBcbiAgICAjIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAgICAgIDAwMDAwMDAgIFxuICAgICMgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgXG4gICAgIyAwMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAgICAwMDAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAwMDAgIFxuICAgICMgMDAgICAgIDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwICAgXG4gICAgICAgIFxuICAgIHdvcmRIaWdobGlnaHRzOiAtPiBAaGlnaGxpZ2h0cygpLmZpbHRlciAoaCkgLT4gbm90IGhbMl0/LmNsc3M/LnN0YXJ0c1dpdGgoJ3N0cmluZ21hdGNoJykgYW5kIG5vdCBoWzJdPy5jbHNzPy5zdGFydHNXaXRoKCdicmFja2V0bWF0Y2gnKVxuXG4gICAgaGlnaGxpZ2h0Rm9yRmluZDogLT5cbiAgICAgICAgXG4gICAgICAgIGlmIEBudW1TZWxlY3Rpb25zKCkgPT0gMSBhbmQgbm90IGVtcHR5IEB0ZXh0SW5SYW5nZShAc2VsZWN0aW9uIDApLnRyaW0oKVxuICAgICAgICAgICAgQGhpZ2hsaWdodFRleHQgQHRleHRJblJhbmdlKEBzZWxlY3Rpb24gMClcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY3AgPSBAY3Vyc29yUG9zKClcbiAgICAgICAgICAgIHdvcmRIaWdobGlnaHRzID0gQHdvcmRIaWdobGlnaHRzKClcbiAgICAgICAgICAgIGN1cnNvckluV29yZEhpZ2hsaWdodCA9IHdvcmRIaWdobGlnaHRzLmxlbmd0aCAjYW5kIHJhbmdlQXRQb3NJblJhbmdlcyBjcCwgd29yZEhpZ2hsaWdodHNcbiAgICAgICAgICAgIGlmIG5vdCBjdXJzb3JJbldvcmRIaWdobGlnaHRcbiAgICAgICAgICAgICAgICBAaGlnaGxpZ2h0VGV4dE9mU2VsZWN0aW9uT3JXb3JkQXRDdXJzb3IoKSAjIHRoaXMgYWxzbyBzZWxlY3RzXG4gICAgICAgIEBzZWxlY3ROZXh0SGlnaGxpZ2h0KClcbiAgICBcbiAgICBoaWdobGlnaHRXb3JkQW5kQWRkVG9TZWxlY3Rpb246IChza2lwU2Nyb2xsKSAtPiAjIGNvbW1hbmQrZFxuICAgICAgICBcbiAgICAgICAgY3AgPSBAY3Vyc29yUG9zKClcbiAgICAgICAgd29yZEhpZ2hsaWdodHMgPSBAd29yZEhpZ2hsaWdodHMoKVxuICAgICAgICBjdXJzb3JJbldvcmRIaWdobGlnaHQgPSB3b3JkSGlnaGxpZ2h0cy5sZW5ndGggYW5kIHJhbmdlQXRQb3NJblJhbmdlcyBjcCwgd29yZEhpZ2hsaWdodHNcbiAgICAgICAgaWYgbm90IGN1cnNvckluV29yZEhpZ2hsaWdodFxuICAgICAgICAgICAgQGhpZ2hsaWdodFRleHRPZlNlbGVjdGlvbk9yV29yZEF0Q3Vyc29yKCkgIyB0aGlzIGFsc28gc2VsZWN0c1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBAZG8uc3RhcnQoKVxuICAgICAgICAgICAgc3IgPSByYW5nZUF0UG9zSW5SYW5nZXMgY3AsIEBkby5zZWxlY3Rpb25zKClcbiAgICAgICAgICAgIGlmIHNyICMgY3Vyc29yIGluIHNlbGVjdGlvbiAtPiBzZWxlY3QgbmV4dCBoaWdobGlnaHRcbiAgICAgICAgICAgICAgICByID0gcmFuZ2VBZnRlclBvc0luUmFuZ2VzIGNwLCB3b3JkSGlnaGxpZ2h0c1xuICAgICAgICAgICAgZWxzZSAjIHNlbGVjdCBjdXJyZW50IGhpZ2hsaWdodCBmaXJzdFxuICAgICAgICAgICAgICAgIHIgPSByYW5nZUF0UG9zSW5SYW5nZXMgY3AsIHdvcmRIaWdobGlnaHRzXG4gICAgICAgICAgICByID89IHdvcmRIaWdobGlnaHRzWzBdXG4gICAgICAgICAgICBAYWRkUmFuZ2VUb1NlbGVjdGlvbiByXG4gICAgICAgICAgICBpZiBub3Qgc2tpcFNjcm9sbFxuICAgICAgICAgICAgICAgIEBzY3JvbGw/LmN1cnNvclRvVG9wKCkgIyA8IHN1Y2tzIVxuICAgICAgICAgICAgQGRvLmVuZCgpXG5cbiAgICBzZWxlY3RBbGxXb3JkczogLT4gIyBjb21tYW5kK2FsdCtkXG4gICAgICAgIFxuICAgICAgICBpZiBAbmFtZSA9PSAnY29tbWFuZGxpbmUtZWRpdG9yJyAjIGhhY2sgdG8gZm9yd2FyZCBhY3Rpb24gdG8gbWFpbiBlZGl0b3JcbiAgICAgICAgICAgIGlmIGVkaXRvciA9IHdpbmRvdy5jb21tYW5kbGluZT8uY29tbWFuZD8ucmVjZWl2aW5nRWRpdG9yKClcbiAgICAgICAgICAgICAgICBlZGl0b3Iuc2VsZWN0QWxsV29yZHMoKVxuICAgICAgICAgICAgICAgIGVkaXRvci5mb2N1cygpXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgXG4gICAgICAgIEBoaWdobGlnaHRXb3JkQW5kQWRkVG9TZWxlY3Rpb24oKVxuICAgICAgICBAZG8uc3RhcnQoKVxuICAgICAgICBAZG8uc2VsZWN0IEBkby5oaWdobGlnaHRzKClcbiAgICAgICAgaWYgQGRvLm51bVNlbGVjdGlvbnMoKVxuICAgICAgICAgICAgQGRvLnNldEN1cnNvcnMgZW5kUG9zaXRpb25zRnJvbVJhbmdlcyhAZG8uc2VsZWN0aW9ucygpKSwgbWFpbjogJ2Nsb3Nlc3QnXG4gICAgICAgIEBkby5lbmQoKVxuXG4gICAgIyAgMDAwMDAwMCAgMDAwMDAwMDAgIDAwMCAgICAgIDAwMDAwMDAwICAgMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgMDAwICAgMDAwICAwMDAwICAwMDAgIFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAgICAwMDAwMDAwICAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgXG4gICAgIyAgICAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgICAgICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICBcbiAgICAjIDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwMDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIFxuICAgIFxuICAgIGhpZ2hsaWdodFRleHRPZlNlbGVjdGlvbk9yV29yZEF0Q3Vyc29yOiAtPiAjIGNvbW1hbmQrZSAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICBpZiBAbnVtU2VsZWN0aW9ucygpID09IDBcbiAgICAgICAgICAgIHNyYW5nZSA9IEByYW5nZUZvclJlYWxXb3JkQXRQb3MgQGN1cnNvclBvcygpXG4gICAgICAgICAgICBpZiBlbXB0eSBAdGV4dEluUmFuZ2Uoc3JhbmdlKS50cmltKClcbiAgICAgICAgICAgICAgICBAY2xlYXJIaWdobGlnaHRzKCkgIyBuZWVkZWQ/XG4gICAgICAgICAgICAgICAgQHNlbGVjdE5vbmUoKVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgQHNlbGVjdFNpbmdsZVJhbmdlIHNyYW5nZVxuICAgICAgICBcbiAgICAgICAgc2VsID0gQHNlbGVjdGlvbiAwICAgICBcbiAgICAgICAgdGV4dCA9IEB0ZXh0SW5SYW5nZSBzZWxcbiAgICAgICAgaWYgdGV4dC5sZW5ndGhcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgQG51bUhpZ2hsaWdodHMoKVxuICAgICAgICAgICAgICAgIGlmIHRleHQgPT0gQHRleHRJblJhbmdlIEBoaWdobGlnaHQgMCAjIHNlZSBpZiB3ZSBjYW4gZ3JvdyB0aGUgY3VycmVudCBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgbGFyZ2VyUmFuZ2UgPSBbc2VsWzBdLCBbc2VsWzFdWzBdLTEsIHNlbFsxXVsxXV1dXG4gICAgICAgICAgICAgICAgICAgIGxhcmdlclRleHQgPSBAdGV4dEluUmFuZ2UgbGFyZ2VyUmFuZ2VcbiAgICAgICAgICAgICAgICAgICAgaWYgbGFyZ2VyVGV4dFswXSBpbiBcIkAjJCUmKistIT86LidcXFwiL1wiIG9yIC9bQS1aYS16XS8udGVzdCBsYXJnZXJUZXh0WzBdXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiBsYXJnZXJUZXh0WzBdIGluIFwiJ1xcXCJcIiAjIGdyb3cgc3RyaW5ncyBpbiBib3RoIGRpcmVjdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuciA9IFtzZWxbMF0sIFtzZWxbMV1bMF0tMSwgc2VsWzFdWzFdKzFdXSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudCA9IEB0ZXh0SW5SYW5nZSBuclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG50W250Lmxlbmd0aC0xXSA9PSBsYXJnZXJUZXh0WzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhcmdlclRleHQgPSBudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXJnZXJSYW5nZSA9IG5yXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIC9bQS1aYS16XS8udGVzdCBsYXJnZXJUZXh0WzBdICMgZ3JvdyB3aG9sZSB3b3Jkc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIGxhcmdlclJhbmdlWzFdWzBdID4gMCBhbmQgL1tBLVphLXpdLy50ZXN0IEBsaW5lKGxhcmdlclJhbmdlWzBdKVtsYXJnZXJSYW5nZVsxXVswXS0xXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXJnZXJSYW5nZVsxXVswXSAtPSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhcmdlclRleHQgPSBAdGV4dEluUmFuZ2UgbGFyZ2VyUmFuZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSBsYXJnZXJUZXh0ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBAc2VsZWN0U2luZ2xlUmFuZ2UgbGFyZ2VyUmFuZ2UgaWYgQG51bVNlbGVjdGlvbnMoKSA9PSAxXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIEBzZXRIaWdobGlnaHRzIEByYW5nZXNGb3JUZXh0IHRleHQsIG1heDo5OTk5XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICMgdGhpcyBzaG91bGQgYmUgZG9uZSBzb21ld2hlcmUgZWxzZSAoY29tbWFuZGxpbmUgb3IgZmluZC9zZWFyY2ggY29tbWFuZHMpXG4gICAgICAgICAgICBpZiBAcmVuZGVySGlnaGxpZ2h0cz9cbiAgICAgICAgICAgICAgICBAcmVuZGVySGlnaGxpZ2h0cygpXG4gICAgICAgICAgICAgICAgQGVtaXQgJ2hpZ2hsaWdodCdcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiB3aW5kb3cuc3BsaXQuY29tbWFuZGxpbmVWaXNpYmxlKClcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmNvbW1hbmRsaW5lLnN0YXJ0Q29tbWFuZCAnZmluZCcgaWYgd2luZG93LmNvbW1hbmRsaW5lLmNvbW1hbmQ/LnByZWZzSUQgbm90IGluIFsnc2VhcmNoJywgJ2ZpbmQnXVxuICAgICAgICAgICAgICAgIHdpbmRvdy5jb21tYW5kbGluZS5jb21tYW5kcy5maW5kLmN1cnJlbnRUZXh0ID0gdGV4dFxuICAgICAgICAgICAgICAgIHdpbmRvdy5jb21tYW5kbGluZS5jb21tYW5kcy5zZWFyY2guY3VycmVudFRleHQgPSB0ZXh0XG4gICAgICAgICAgICAgICAgd2luZG93LmNvbW1hbmRsaW5lLnNldFRleHQgdGV4dFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBmb2N1cygpXG5cbiAgICAjICAwMDAwMDAwICAwMDAgICAgICAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4gICAgXG4gICAgY2xlYXJIaWdobGlnaHRzOiAtPlxuICAgICAgICBcbiAgICAgICAgaWYgQG51bUhpZ2hsaWdodHMoKVxuICAgICAgICAgICAgQHNldEhpZ2hsaWdodHMgW11cbiAgICAgICAgICAgIEBlbWl0ICdoaWdobGlnaHQnXG4gICAgICAgICAgICBcbiAgICAjIDAwMDAwMDAwICAgMDAwMDAwMDAgIDAwICAgICAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICBcbiAgICAjIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwICAgMDAwICAgMDAwIDAwMCAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAwIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAgICAgMCAgICAgIDAwMDAwMDAwICBcbiAgICBcbiAgICByZW1vdmVTZWxlY3RlZEhpZ2hsaWdodDogLT4gIyBjb21tYW5kK3NoaWZ0K2RcbiAgICAgICAgXG4gICAgICAgIGNwID0gQGN1cnNvclBvcygpXG4gICAgICAgIHNlbCA9IEBzZWxlY3Rpb25zKClcbiAgICAgICAgc3IgPSByYW5nZUF0UG9zSW5SYW5nZXMgY3AsIHNlbFxuICAgICAgICBociA9IHJhbmdlQXRQb3NJblJhbmdlcyBjcCwgQGhpZ2hsaWdodHMoKVxuICAgICAgICBpZiBzciBhbmQgaHJcbiAgICAgICAgICAgIEByZW1vdmVTZWxlY3Rpb25BdEluZGV4IHNlbC5pbmRleE9mIHNyIFxuIl19
//# sourceURL=../../../coffee/editor/actions/highlight.coffee