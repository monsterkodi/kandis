// koffee 1.4.0

/*
000   000  00000000  000   000  000      000  000   000  00000000
0000  000  000       000 0 000  000      000  0000  000  000     
000 0 000  0000000   000000000  000      000  000 0 000  0000000 
000  0000  000       000   000  000      000  000  0000  000     
000   000  00000000  00     00  0000000  000  000   000  00000000
 */
var _;

_ = require('kxk')._;

module.exports = {
    actions: {
        menu: 'Line',
        newline: {
            name: 'Insert Newline',
            combos: ['enter']
        },
        newlineAtEnd: {
            name: 'Insert Newline at End',
            combo: 'alt+enter'
        }
    },
    newlineAtEnd: function() {
        this.moveCursorsToLineBoundary('right');
        return this.newline({
            indent: true
        });
    },
    newline: function(key, info) {
        var after, before, bl, c, doIndent, i, indent, j, len, len1, nc, newCursors, ref, ref1, ref2, ref3, ref4;
        if ((info == null) && _.isObject(key)) {
            info = key;
        }
        if (this.salterMode) {
            this.endSalter();
            this.singleCursorAtPos(_.last(this.cursors()));
            this.newlineAtEnd();
            return;
        }
        doIndent = (ref = info != null ? info.indent : void 0) != null ? ref : !this.isCursorInIndent();
        this.surroundStack = [];
        this.deleteSelection();
        this["do"].start();
        if (this.salterMode) {
            newCursors = [rangeEndPos(this.rangeForLineAtIndex(this.mainCursor()[1]))];
            this.setSalterMode(false);
        } else {
            newCursors = this["do"].cursors();
        }
        ref1 = this["do"].cursors().reverse();
        for (i = 0, len = ref1.length; i < len; i++) {
            c = ref1[i];
            ref2 = this.splitStateLineAtPos(this["do"], c), before = ref2[0], after = ref2[1];
            if (doIndent) {
                after = after.trimLeft();
            }
            if (doIndent) {
                indent = this.indentStringForLineAtIndex(c[1]);
                if ((ref3 = this.fileType) === 'coffee' || ref3 === 'koffee') {
                    if (/(when|if)/.test(before)) {
                        if (after.startsWith('then ')) {
                            after = after.slice(4).trimLeft();
                            indent += this.indentString;
                        } else if (before.trim().endsWith('then')) {
                            before = before.trimRight();
                            before = before.slice(0, before.length - 4);
                            indent += this.indentString;
                        }
                    }
                }
            } else {
                if (c[0] <= indentationInLine(this["do"].line(c[1]))) {
                    indent = this["do"].line(c[1]).slice(0, c[0]);
                } else {
                    indent = '';
                }
            }
            bl = c[0];
            if (c[0] >= this["do"].line(c[1]).length) {
                this["do"].insert(c[1] + 1, indent);
            } else {
                this["do"].insert(c[1] + 1, indent + after);
                if ((this.insertIndentedEmptyLineBetween != null) && before.trimRight().endsWith(this.insertIndentedEmptyLineBetween[0] && after.trimLeft().startsWith(this.insertIndentedEmptyLineBetween[1]))) {
                    indent += this.indentString;
                    this["do"].insert(c[1] + 1, indent);
                }
                this["do"].change(c[1], before);
            }
            ref4 = positionsFromPosInPositions(c, newCursors);
            for (j = 0, len1 = ref4.length; j < len1; j++) {
                nc = ref4[j];
                cursorDelta(nc, nc[1] === c[1] && indent.length - bl || 0, 1);
            }
        }
        this["do"].setCursors(newCursors);
        return this["do"].end();
    }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../../coffee/editor/actions/newline.coffee