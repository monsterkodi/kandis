// koffee 1.4.0
var Transform, _, kerror, kstr, matchr, ref, reversed, slash,
    indexOf = [].indexOf,
    slice = [].slice;

ref = require('kxk'), reversed = ref.reversed, slash = ref.slash, kstr = ref.kstr, kerror = ref.kerror, _ = ref._;

matchr = require('../../tools/matchr');

Transform = (function() {
    Transform.transformNames = ['upper', 'lower', 'title', 'case', 'count', 'add', 'sub', 'up', 'down', 'sort', 'uniq', 'reverse', 'resolve', 'unresolve', 'dir', 'base', 'file', 'ext'];

    Transform.transformMenus = {
        Case: ['upper', 'lower', 'title', 'case'],
        Calc: ['count', 'add', 'sub'],
        Sort: ['up', 'down', 'sort', 'uniq', 'reverse'],
        Path: ['resolve', 'unresolve', 'dir', 'base', 'file', 'ext']
    };

    function Transform(editor1) {
        this.editor = editor1;
        this.editor.transform = this;
        this.last = null;
        this.caseFuncs = ['upper', 'lower', 'title'];
        this.resolveFuncs = ['resolve', 'unresolve'];
        this.sortFuncs = ['up', 'down'];
    }

    Transform.prototype.count = function(typ, offset, step) {
        var base, cs, i, numbers, pad;
        if (typ == null) {
            typ = 'dec';
        }
        if (offset == null) {
            offset = 0;
        }
        if (step == null) {
            step = 1;
        }
        offset = parseInt(offset);
        step = parseInt(step);
        this.editor["do"].start();
        this.editor.fillVirtualSpaces();
        cs = this.editor["do"].cursors();
        this.editor["do"].select(rangesFromPositions(cs));
        switch (typ) {
            case 'hex':
                base = 16;
                break;
            case 'bin':
                base = 2;
                break;
            default:
                base = 10;
        }
        pad = Number(step * (cs.length - 1) + offset).toString(base).length;
        numbers = (function() {
            var j, ref1, results;
            results = [];
            for (i = j = 0, ref1 = cs.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
                results.push(_.padStart(Number(step * i + offset).toString(base), pad, '0'));
            }
            return results;
        })();
        this.editor.replaceSelectedText(numbers);
        this.editor["do"].end();
        return 'count';
    };

    Transform.prototype.add = function(d) {
        if (d == null) {
            d = 1;
        }
        this.apply(function(t) {
            return kstr(parseInt(t) + parseInt(d));
        });
        return 'add';
    };

    Transform.prototype.sub = function(d) {
        if (d == null) {
            d = 1;
        }
        this.apply(function(t) {
            return kstr(parseInt(t) - parseInt(d));
        });
        return 'sub';
    };

    Transform.prototype.reverse = function() {
        this.trans(function(l) {
            return reversed(l);
        });
        return 'reverse';
    };

    Transform.prototype.sort = function() {
        return this.toggle(this.sortFuncs);
    };

    Transform.prototype.up = function() {
        this.trans(function(l) {
            return l.sort(function(a, b) {
                return a.localeCompare(b);
            });
        });
        return 'up';
    };

    Transform.prototype.down = function() {
        this.trans(function(l) {
            return reversed(l.sort(function(a, b) {
                return a.localeCompare(b);
            }));
        });
        return 'down';
    };

    Transform.prototype.uniq = function() {
        this.trans(function(l) {
            var a, j, len, r, v;
            v = [];
            r = [];
            for (j = 0, len = l.length; j < len; j++) {
                a = l[j];
                r.push(indexOf.call(v, a) >= 0 ? '' : (v.push(a), a));
            }
            return r;
        });
        return 'uniq';
    };

    Transform.prototype["case"] = function() {
        return this.toggle(this.caseFuncs);
    };

    Transform.prototype.upper = function() {
        this.apply(function(t) {
            return t.toUpperCase();
        });
        return 'upper';
    };

    Transform.prototype.lower = function() {
        this.apply(function(t) {
            return t.toLowerCase();
        });
        return 'lower';
    };

    Transform.prototype.title = function() {
        var pattern;
        pattern = /\w+/;
        this.apply(function(t) {
            var j, len, r, ref1;
            ref1 = matchr.ranges(/\w+/, t);
            for (j = 0, len = ref1.length; j < len; j++) {
                r = ref1[j];
                t = t.splice(r.start, r.match.length, r.match.substr(0, 1).toUpperCase() + r.match.slice(1).toLowerCase());
            }
            return t;
        });
        return 'title';
    };

    Transform.prototype.toggleResolve = function() {
        return this.toggle(this.resolveFuncs);
    };

    Transform.prototype.resolve = function() {
        var cwd;
        cwd = process.cwd();
        if (this.editor.currentFile != null) {
            process.chdir(slash.dir(this.editor.currentFile));
        }
        this.apply(function(t) {
            return slash.resolve(t);
        });
        process.chdir(cwd);
        return 'resolve';
    };

    Transform.prototype.unresolve = function() {
        this.apply(function(t) {
            return slash.unresolve(t);
        });
        return 'unresolve';
    };

    Transform.prototype.base = function() {
        this.apply(function(t) {
            return slash.base(t);
        });
        return 'basename';
    };

    Transform.prototype.dir = function() {
        this.apply(function(t) {
            return slash.dir(t);
        });
        return 'dirname';
    };

    Transform.prototype.ext = function() {
        this.apply(function(t) {
            return slash.ext(t);
        });
        return 'ext';
    };

    Transform.prototype.file = function() {
        this.apply(function(t) {
            return slash.file(t);
        });
        return 'file';
    };

    Transform.prototype.apply = function(func) {
        return this.tfunc({
            apply: func
        });
    };

    Transform.prototype.trans = function(func) {
        return this.tfunc({
            trans: func
        });
    };

    Transform.prototype.tfunc = function(opt) {
        var selections, tl;
        if (!this.editor.numSelections()) {
            if (opt.trans) {
                this.editor.selectMoreLines();
            } else {
                this.editor.select(this.editor.rangesForWordsAtCursors());
            }
        }
        selections = this.editor.selections();
        tl = this.editor.textsInRanges(selections);
        if (opt.apply != null) {
            tl = tl.map(opt.apply);
        }
        if (opt.trans != null) {
            tl = opt.trans(tl);
        }
        this.editor["do"].start();
        this.editor.replaceSelectedText(tl);
        return this.editor["do"].end();
    };

    Transform.prototype.toggle = function(funcList) {
        var nextIndex, ref1;
        if (ref1 = this.last, indexOf.call(funcList, ref1) < 0) {
            this.last = _.last(funcList);
        }
        nextIndex = (1 + funcList.indexOf(this.last)) % funcList.length;
        return this["do"](funcList[nextIndex]);
    };

    Transform.prototype["do"] = function() {
        var args, f, transName;
        transName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        f = this[transName];
        if (f && _.isFunction(f)) {
            this.last = f.apply(this, args);
        } else {
            return kerror("unhandled transform " + transName);
        }
        return this.last;
    };

    Transform["do"] = function() {
        var args, editor, ref1, t, transName;
        editor = arguments[0], transName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
        t = (ref1 = editor.transform) != null ? ref1 : new Transform(editor);
        return t["do"].apply(t, [transName].concat(args));
    };

    return Transform;

})();

module.exports = {
    actions: {
        menu: "Misc",
        toggleCase: {
            name: 'Toggle Case',
            text: 'toggles selected texts between lower- upper- and title-case',
            combo: 'command+alt+ctrl+u',
            accel: 'alt+ctrl+u'
        },
        reverseSelection: {
            name: 'Reverse Selection',
            text: 'reverses the order of selected texts',
            combo: 'command+alt+ctrl+r',
            accel: 'alt+ctrl+r'
        },
        doTransform: {
            name: 'doTransform'
        }
    },
    toggleCase: function() {
        return Transform["do"](this, 'case');
    },
    reverseSelection: function() {
        return Transform["do"](this, 'reverse');
    },
    doTransform: function(arg) {
        return Transform["do"](this, arg);
    },
    Transform: Transform,
    transformNames: Transform.transformNames
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBT0EsSUFBQSx3REFBQTtJQUFBOzs7QUFBQSxNQUF1QyxPQUFBLENBQVEsS0FBUixDQUF2QyxFQUFFLHVCQUFGLEVBQVksaUJBQVosRUFBbUIsZUFBbkIsRUFBeUIsbUJBQXpCLEVBQWlDOztBQUVqQyxNQUFBLEdBQVMsT0FBQSxDQUFRLG9CQUFSOztBQUVIO0lBRUYsU0FBQyxDQUFBLGNBQUQsR0FBa0IsQ0FDZCxPQURjLEVBQ04sT0FETSxFQUNFLE9BREYsRUFDVSxNQURWLEVBRWQsT0FGYyxFQUVOLEtBRk0sRUFFQSxLQUZBLEVBR2QsSUFIYyxFQUdULE1BSFMsRUFHRixNQUhFLEVBR0ssTUFITCxFQUlkLFNBSmMsRUFLZCxTQUxjLEVBS0osV0FMSSxFQU1kLEtBTmMsRUFNUixNQU5RLEVBT2QsTUFQYyxFQU9QLEtBUE87O0lBU2xCLFNBQUMsQ0FBQSxjQUFELEdBQ0k7UUFBQSxJQUFBLEVBQU0sQ0FBQyxPQUFELEVBQVMsT0FBVCxFQUFpQixPQUFqQixFQUF5QixNQUF6QixDQUFOO1FBQ0EsSUFBQSxFQUFNLENBQUMsT0FBRCxFQUFTLEtBQVQsRUFBZSxLQUFmLENBRE47UUFFQSxJQUFBLEVBQU0sQ0FBQyxJQUFELEVBQU0sTUFBTixFQUFhLE1BQWIsRUFBb0IsTUFBcEIsRUFBMkIsU0FBM0IsQ0FGTjtRQUdBLElBQUEsRUFBTSxDQUFFLFNBQUYsRUFBWSxXQUFaLEVBQXdCLEtBQXhCLEVBQThCLE1BQTlCLEVBQXFDLE1BQXJDLEVBQTRDLEtBQTVDLENBSE47OztJQUtELG1CQUFDLE9BQUQ7UUFBQyxJQUFDLENBQUEsU0FBRDtRQUVBLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBUixHQUFvQjtRQUNwQixJQUFDLENBQUEsSUFBRCxHQUFnQjtRQUNoQixJQUFDLENBQUEsU0FBRCxHQUFnQixDQUFDLE9BQUQsRUFBUyxPQUFULEVBQWlC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QUEsRUFBTyxvQkFGUDtZQUdBLEtBQUEsRUFBTyxZQUhQO1NBVEo7UUFjQSxXQUFBLEVBQ0k7WUFBQSxJQUFBLEVBQU8sYUFBUDtTQWZKO0tBRko7SUFtQkEsVUFBQSxFQUFtQixTQUFBO2VBQUcsU0FBUyxFQUFDLEVBQUQsRUFBVCxDQUFhLElBQWIsRUFBZ0IsTUFBaEI7SUFBSCxDQW5CbkI7SUFvQkEsZ0JBQUEsRUFBbUIsU0FBQTtlQUFHLFNBQVMsRUFBQyxFQUFELEVBQVQsQ0FBYSxJQUFiLEVBQWdCLFNBQWhCO0lBQUgsQ0FwQm5CO0lBcUJBLFdBQUEsRUFBYSxTQUFDLEdBQUQ7ZUFBUyxTQUFTLEVBQUMsRUFBRCxFQUFULENBQWEsSUFBYixFQUFnQixHQUFoQjtJQUFULENBckJiO0lBc0JBLFNBQUEsRUFBbUIsU0F0Qm5CO0lBdUJBLGNBQUEsRUFBbUIsU0FBUyxDQUFDLGNBdkI3QiIsInNvdXJjZXNDb250ZW50IjpbIlxuIyAwMDAwMDAwMDAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgICAwMDAgICAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwICAgICAwMFxuIyAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuIyAgICAwMDAgICAgIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAgMCAwMDAgIDAwMDAwMDAgICAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAwMFxuIyAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAgICAgICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMFxuIyAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAgICAgICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuXG57IHJldmVyc2VkLCBzbGFzaCwga3N0ciwga2Vycm9yLCBfIH0gPSByZXF1aXJlICdreGsnXG5cbm1hdGNociA9IHJlcXVpcmUgJy4uLy4uL3Rvb2xzL21hdGNocidcblxuY2xhc3MgVHJhbnNmb3JtXG5cbiAgICBAdHJhbnNmb3JtTmFtZXMgPSBbXG4gICAgICAgICd1cHBlcicgJ2xvd2VyJyAndGl0bGUnICdjYXNlJ1xuICAgICAgICAnY291bnQnICdhZGQnICdzdWInXG4gICAgICAgICd1cCcgJ2Rvd24nICdzb3J0JyAndW5pcSdcbiAgICAgICAgJ3JldmVyc2UnXG4gICAgICAgICdyZXNvbHZlJyAndW5yZXNvbHZlJ1xuICAgICAgICAnZGlyJyAnYmFzZSdcbiAgICAgICAgJ2ZpbGUnICdleHQnXG4gICAgXVxuICAgIEB0cmFuc2Zvcm1NZW51cyA9XG4gICAgICAgIENhc2U6IFsndXBwZXInICdsb3dlcicgJ3RpdGxlJyAnY2FzZSddXG4gICAgICAgIENhbGM6IFsnY291bnQnICdhZGQnICdzdWInXVxuICAgICAgICBTb3J0OiBbJ3VwJyAnZG93bicgJ3NvcnQnICd1bmlxJyAncmV2ZXJzZSddXG4gICAgICAgIFBhdGg6IFsgJ3Jlc29sdmUnICd1bnJlc29sdmUnICdkaXInICdiYXNlJyAnZmlsZScgJ2V4dCcgXVxuXG4gICAgQDogKEBlZGl0b3IpIC0+XG5cbiAgICAgICAgQGVkaXRvci50cmFuc2Zvcm0gPSBAXG4gICAgICAgIEBsYXN0ICAgICAgICAgPSBudWxsXG4gICAgICAgIEBjYXNlRnVuY3MgICAgPSBbJ3VwcGVyJyAnbG93ZXInICd0aXRsZSddXG4gICAgICAgIEByZXNvbHZlRnVuY3MgPSBbJ3Jlc29sdmUnICd1bnJlc29sdmUnXVxuICAgICAgICBAc29ydEZ1bmNzICAgID0gWyd1cCcgJ2Rvd24nXVxuXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgICAgMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgICAgMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgICAgMDAwXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgICAgMDAwXG5cbiAgICBjb3VudDogKHR5cD0nZGVjJyBvZmZzZXQ9MCwgc3RlcD0xKSAtPlxuXG4gICAgICAgIG9mZnNldCA9IHBhcnNlSW50IG9mZnNldFxuICAgICAgICBzdGVwICAgPSBwYXJzZUludCBzdGVwXG5cbiAgICAgICAgQGVkaXRvci5kby5zdGFydCgpXG4gICAgICAgIEBlZGl0b3IuZmlsbFZpcnR1YWxTcGFjZXMoKVxuICAgICAgICBjcyA9IEBlZGl0b3IuZG8uY3Vyc29ycygpXG4gICAgICAgIEBlZGl0b3IuZG8uc2VsZWN0IHJhbmdlc0Zyb21Qb3NpdGlvbnMgY3NcblxuICAgICAgICBzd2l0Y2ggdHlwXG4gICAgICAgICAgICB3aGVuICdoZXgnXG4gICAgICAgICAgICAgICAgYmFzZSA9IDE2XG4gICAgICAgICAgICB3aGVuICdiaW4nXG4gICAgICAgICAgICAgICAgYmFzZSA9IDJcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBiYXNlID0gMTBcblxuICAgICAgICBwYWQgPSBOdW1iZXIoc3RlcCooY3MubGVuZ3RoLTEpK29mZnNldCkudG9TdHJpbmcoYmFzZSkubGVuZ3RoXG4gICAgICAgIG51bWJlcnMgPSAoXy5wYWRTdGFydCBOdW1iZXIoc3RlcCppK29mZnNldCkudG9TdHJpbmcoYmFzZSksIHBhZCwgJzAnIGZvciBpIGluIFswLi4uY3MubGVuZ3RoXSlcblxuICAgICAgICBAZWRpdG9yLnJlcGxhY2VTZWxlY3RlZFRleHQgbnVtYmVyc1xuICAgICAgICBAZWRpdG9yLmRvLmVuZCgpXG4gICAgICAgICdjb3VudCdcblxuICAgIGFkZDogKGQ9MSkgLT5cblxuICAgICAgICBAYXBwbHkgKHQpIC0+IGtzdHIocGFyc2VJbnQodCkgKyBwYXJzZUludChkKSlcbiAgICAgICAgJ2FkZCdcblxuICAgIHN1YjogKGQ9MSkgLT5cblxuICAgICAgICBAYXBwbHkgKHQpIC0+IGtzdHIocGFyc2VJbnQodCkgLSBwYXJzZUludChkKSlcbiAgICAgICAgJ3N1YidcblxuICAgICMgMDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwMDAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMFxuICAgICMgMDAwMDAwMCAgICAwMDAwMDAwICAgIDAwMCAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgMDAwICAgICAgIDAwMCAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAgICAgMCAgICAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwMFxuXG4gICAgcmV2ZXJzZTogLT5cbiAgICAgICAgQHRyYW5zIChsKSAtPiByZXZlcnNlZCBsXG4gICAgICAgICdyZXZlcnNlJ1xuXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDBcbiAgICAjIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgICAgMDAwXG4gICAgIyAgICAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMFxuICAgICMgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgMDAwICAgICAwMDBcblxuICAgIHNvcnQ6IC0+IEB0b2dnbGUgQHNvcnRGdW5jc1xuXG4gICAgdXA6IC0+XG4gICAgICAgIEB0cmFucyAobCkgLT4gbC5zb3J0IChhLGIpIC0+IGEubG9jYWxlQ29tcGFyZSBiXG4gICAgICAgICd1cCdcblxuICAgIGRvd246IC0+XG4gICAgICAgIEB0cmFucyAobCkgLT4gcmV2ZXJzZWQgbC5zb3J0IChhLGIpIC0+IGEubG9jYWxlQ29tcGFyZSBiXG4gICAgICAgICdkb3duJ1xuXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwMDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAwMDAgMDAgMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAwMDAwICAwMDAgIDAwMCAwMDAwXG4gICAgIyAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwMDAgMDBcblxuICAgIHVuaXE6IC0+XG4gICAgICAgIEB0cmFucyAobCkgLT5cbiAgICAgICAgICAgIHYgPSBbXVxuICAgICAgICAgICAgciA9IFtdXG4gICAgICAgICAgICBmb3IgYSBpbiBsXG4gICAgICAgICAgICAgICAgci5wdXNoIGlmIGEgaW4gdiB0aGVuICcnIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdi5wdXNoIGFcbiAgICAgICAgICAgICAgICAgICAgYVxuICAgICAgICAgICAgclxuICAgICAgICAndW5pcSdcblxuICAgICMgIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwXG4gICAgIyAwMDAgICAgICAgMDAwMDAwMDAwICAwMDAwMDAwICAgMDAwMDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgICAgICAwMDAgIDAwMFxuICAgICMgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAwXG5cbiAgICBjYXNlOiAtPiBAdG9nZ2xlIEBjYXNlRnVuY3NcblxuICAgIHVwcGVyOiAtPlxuXG4gICAgICAgIEBhcHBseSAodCkgLT4gdC50b1VwcGVyQ2FzZSgpXG4gICAgICAgICd1cHBlcidcblxuICAgIGxvd2VyOiAtPlxuXG4gICAgICAgIEBhcHBseSAodCkgLT4gdC50b0xvd2VyQ2FzZSgpXG4gICAgICAgICdsb3dlcidcblxuICAgIHRpdGxlOiAtPlxuXG4gICAgICAgIHBhdHRlcm4gPSAvXFx3Ky9cbiAgICAgICAgQGFwcGx5ICh0KSAtPlxuICAgICAgICAgICAgZm9yIHIgaW4gbWF0Y2hyLnJhbmdlcyAvXFx3Ky8sIHRcbiAgICAgICAgICAgICAgICB0ID0gdC5zcGxpY2Ugci5zdGFydCwgci5tYXRjaC5sZW5ndGgsIHIubWF0Y2guc3Vic3RyKDAsMSkudG9VcHBlckNhc2UoKSArIHIubWF0Y2guc2xpY2UoMSkudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgdFxuICAgICAgICAndGl0bGUnXG5cbiAgICAjIDAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwXG4gICAgIyAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwIDAwMCAgIDAwMDAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgICAgICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgIDAwMCAgICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgICAgMCAgICAgIDAwMDAwMDAwXG5cbiAgICB0b2dnbGVSZXNvbHZlOiAtPiBAdG9nZ2xlIEByZXNvbHZlRnVuY3NcblxuICAgIHJlc29sdmU6IC0+XG5cbiAgICAgICAgY3dkID0gcHJvY2Vzcy5jd2QoKVxuICAgICAgICBpZiBAZWRpdG9yLmN1cnJlbnRGaWxlP1xuICAgICAgICAgICAgcHJvY2Vzcy5jaGRpciBzbGFzaC5kaXIgQGVkaXRvci5jdXJyZW50RmlsZVxuICAgICAgICBAYXBwbHkgKHQpIC0+IHNsYXNoLnJlc29sdmUgdFxuICAgICAgICBwcm9jZXNzLmNoZGlyIGN3ZFxuICAgICAgICAncmVzb2x2ZSdcblxuICAgIHVucmVzb2x2ZTogLT5cblxuICAgICAgICBAYXBwbHkgKHQpIC0+IHNsYXNoLnVucmVzb2x2ZSB0XG4gICAgICAgICd1bnJlc29sdmUnXG5cbiAgICAjIDAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwXG4gICAgIyAwMDAwMDAwMCAgIDAwMDAwMDAwMCAgICAgMDAwICAgICAwMDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMFxuICAgICMgMDAwICAgICAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwXG5cbiAgICBiYXNlOiAtPlxuXG4gICAgICAgIEBhcHBseSAodCkgLT4gc2xhc2guYmFzZSB0XG4gICAgICAgICdiYXNlbmFtZSdcblxuICAgIGRpcjogLT5cblxuICAgICAgICBAYXBwbHkgKHQpIC0+IHNsYXNoLmRpciB0XG4gICAgICAgICdkaXJuYW1lJ1xuXG4gICAgZXh0OiAtPlxuXG4gICAgICAgIEBhcHBseSAodCkgLT4gc2xhc2guZXh0IHRcbiAgICAgICAgJ2V4dCdcblxuICAgIGZpbGU6IC0+XG5cbiAgICAgICAgQGFwcGx5ICh0KSAtPiBzbGFzaC5maWxlIHRcbiAgICAgICAgJ2ZpbGUnXG5cbiAgICAjICAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMCAgICAgIDAwMCAgIDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAwMDBcbiAgICAjIDAwMDAwMDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMCAgICAgICAgMDAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgICAwMDAgICAgICAgIDAwMCAgICAgICAgIDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgIDAwMCAgICAgICAgMDAwMDAwMCAgICAgMDAwXG5cbiAgICBhcHBseTogKGZ1bmMpIC0+IEB0ZnVuYyBhcHBseTpmdW5jXG5cbiAgICAjIDAwMDAwMDAwMCAgMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgIDAwMDAwMDBcbiAgICAjICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgMDAwXG4gICAgIyAgICAwMDAgICAgIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAgMCAwMDAgIDAwMDAwMDBcbiAgICAjICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgICAgICAwMDBcbiAgICAjICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMFxuXG4gICAgdHJhbnM6IChmdW5jKSAtPiBAdGZ1bmMgdHJhbnM6ZnVuY1xuXG4gICAgIyAwMDAwMDAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDBcbiAgICAjICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwMCAgMDAwICAwMDBcbiAgICAjICAgIDAwMCAgICAgMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwICAwMDBcbiAgICAjICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAwMDBcbiAgICAjICAgIDAwMCAgICAgMDAwICAgICAgICAwMDAwMDAwICAgMDAwICAgMDAwICAgMDAwMDAwMFxuXG4gICAgdGZ1bmM6IChvcHQpIC0+XG5cbiAgICAgICAgaWYgbm90IEBlZGl0b3IubnVtU2VsZWN0aW9ucygpXG5cbiAgICAgICAgICAgIGlmIG9wdC50cmFuc1xuICAgICAgICAgICAgICAgIEBlZGl0b3Iuc2VsZWN0TW9yZUxpbmVzKClcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBAZWRpdG9yLnNlbGVjdCBAZWRpdG9yLnJhbmdlc0ZvcldvcmRzQXRDdXJzb3JzKClcblxuICAgICAgICBzZWxlY3Rpb25zID0gQGVkaXRvci5zZWxlY3Rpb25zKClcblxuICAgICAgICB0bCA9IEBlZGl0b3IudGV4dHNJblJhbmdlcyBzZWxlY3Rpb25zXG4gICAgICAgIHRsID0gdGwubWFwIG9wdC5hcHBseSBpZiBvcHQuYXBwbHk/XG4gICAgICAgIHRsID0gb3B0LnRyYW5zIHRsICAgICBpZiBvcHQudHJhbnM/XG5cbiAgICAgICAgQGVkaXRvci5kby5zdGFydCgpXG4gICAgICAgIEBlZGl0b3IucmVwbGFjZVNlbGVjdGVkVGV4dCB0bFxuICAgICAgICBAZWRpdG9yLmRvLmVuZCgpXG5cbiAgICAjIDAwMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgICAgMDAwMDAwMDBcbiAgICAjICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAgICAgIDAwMCAgICAgICAgMDAwICAgICAgMDAwXG4gICAgIyAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAwMDAgIDAwMDAgIDAwMCAgICAgIDAwMDAwMDBcbiAgICAjICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwXG4gICAgIyAgICAwMDAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwXG5cbiAgICB0b2dnbGU6IChmdW5jTGlzdCkgLT5cblxuICAgICAgICBpZiBAbGFzdCBub3QgaW4gZnVuY0xpc3RcbiAgICAgICAgICAgIEBsYXN0ID0gXy5sYXN0IGZ1bmNMaXN0XG5cbiAgICAgICAgbmV4dEluZGV4ID0gKDEgKyBmdW5jTGlzdC5pbmRleE9mIEBsYXN0KSAlIGZ1bmNMaXN0Lmxlbmd0aFxuICAgICAgICBAZG8gZnVuY0xpc3RbbmV4dEluZGV4XVxuXG4gICAgIyAwMDAwMDAwICAgICAwMDAwMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAwMDAwICAgICAwMDAwMDAwXG5cbiAgICBkbzogKHRyYW5zTmFtZSwgYXJncy4uLikgLT5cblxuICAgICAgICBmID0gQFt0cmFuc05hbWVdXG5cbiAgICAgICAgaWYgZiBhbmQgXy5pc0Z1bmN0aW9uIGZcbiAgICAgICAgICAgIEBsYXN0ID0gZi5hcHBseSBALCBhcmdzXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiBrZXJyb3IgXCJ1bmhhbmRsZWQgdHJhbnNmb3JtICN7dHJhbnNOYW1lfVwiXG5cbiAgICAgICAgQGxhc3RcblxuICAgIEBkbzogKGVkaXRvciwgdHJhbnNOYW1lLCBhcmdzLi4uKSAtPlxuXG4gICAgICAgIHQgPSBlZGl0b3IudHJhbnNmb3JtID8gbmV3IFRyYW5zZm9ybSBlZGl0b3JcbiAgICAgICAgdC5kby5hcHBseSB0LCBbdHJhbnNOYW1lXS5jb25jYXQgYXJnc1xuXG5tb2R1bGUuZXhwb3J0cyA9XG5cbiAgICBhY3Rpb25zOlxuXG4gICAgICAgIG1lbnU6IFwiTWlzY1wiXG5cbiAgICAgICAgdG9nZ2xlQ2FzZTpcbiAgICAgICAgICAgIG5hbWU6ICAnVG9nZ2xlIENhc2UnXG4gICAgICAgICAgICB0ZXh0OiAgJ3RvZ2dsZXMgc2VsZWN0ZWQgdGV4dHMgYmV0d2VlbiBsb3dlci0gdXBwZXItIGFuZCB0aXRsZS1jYXNlJ1xuICAgICAgICAgICAgY29tYm86ICdjb21tYW5kK2FsdCtjdHJsK3UnXG4gICAgICAgICAgICBhY2NlbDogJ2FsdCtjdHJsK3UnXG5cbiAgICAgICAgcmV2ZXJzZVNlbGVjdGlvbjpcbiAgICAgICAgICAgIG5hbWU6ICAnUmV2ZXJzZSBTZWxlY3Rpb24nXG4gICAgICAgICAgICB0ZXh0OiAgJ3JldmVyc2VzIHRoZSBvcmRlciBvZiBzZWxlY3RlZCB0ZXh0cydcbiAgICAgICAgICAgIGNvbWJvOiAnY29tbWFuZCthbHQrY3RybCtyJ1xuICAgICAgICAgICAgYWNjZWw6ICdhbHQrY3RybCtyJ1xuXG4gICAgICAgIGRvVHJhbnNmb3JtOlxuICAgICAgICAgICAgbmFtZTogICdkb1RyYW5zZm9ybSdcblxuICAgIHRvZ2dsZUNhc2U6ICAgICAgICAtPiBUcmFuc2Zvcm0uZG8gQCwgJ2Nhc2UnXG4gICAgcmV2ZXJzZVNlbGVjdGlvbjogIC0+IFRyYW5zZm9ybS5kbyBALCAncmV2ZXJzZSdcbiAgICBkb1RyYW5zZm9ybTogKGFyZykgLT4gVHJhbnNmb3JtLmRvIEAsIGFyZ1xuICAgIFRyYW5zZm9ybTogICAgICAgICBUcmFuc2Zvcm1cbiAgICB0cmFuc2Zvcm1OYW1lczogICAgVHJhbnNmb3JtLnRyYW5zZm9ybU5hbWVzXG4iXX0=
//# sourceURL=../../../coffee/editor/actions/transform.coffee