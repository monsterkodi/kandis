// koffee 1.4.0
var _;

_ = require('kxk')._;

module.exports = {
    actions: {
        menu: 'Line',
        moveLinesUp: {
            name: 'Move Lines Up',
            combo: 'alt+up'
        },
        moveLinesDown: {
            name: 'Move Lines Down',
            combo: 'alt+down'
        }
    },
    moveLinesUp: function() {
        return this.moveLines('up');
    },
    moveLinesDown: function() {
        return this.moveLines('down');
    },
    moveLines: function(dir) {
        var csr, d, i, j, k, l, len, len1, len2, li, ls, m, n, nc, newCursors, newSelections, ns, r, ref, ref1, ref2, ref3, si;
        csr = this.continuousCursorAndSelectedLineIndexRanges();
        if (!csr.length) {
            return;
        }
        if (dir === 'up' && _.first(csr)[0] === 0) {
            return;
        }
        if (dir === 'down' && _.last(csr)[1] === this.numLines() - 1) {
            return;
        }
        d = dir === 'up' && -1 || 1;
        this["do"].start();
        newCursors = this["do"].cursors();
        newSelections = this["do"].selections();
        ref = csr.reverse();
        for (j = 0, len = ref.length; j < len; j++) {
            r = ref[j];
            ls = [];
            for (li = k = ref1 = r[0], ref2 = r[1]; ref1 <= ref2 ? k <= ref2 : k >= ref2; li = ref1 <= ref2 ? ++k : --k) {
                ls.push(this["do"].line(li));
            }
            switch (dir) {
                case 'up':
                    si = r[0] - 1;
                    ls.push(this["do"].line(si));
                    break;
                case 'down':
                    si = r[0];
                    ls.unshift(this["do"].line(r[1] + 1));
            }
            for (i = l = 0, ref3 = ls.length; 0 <= ref3 ? l < ref3 : l > ref3; i = 0 <= ref3 ? ++l : --l) {
                this["do"].change(si + i, ls[i]);
            }
        }
        for (m = 0, len1 = newSelections.length; m < len1; m++) {
            ns = newSelections[m];
            ns[0] += d;
        }
        for (n = 0, len2 = newCursors.length; n < len2; n++) {
            nc = newCursors[n];
            cursorDelta(nc, 0, d);
        }
        this["do"].select(newSelections);
        this["do"].setCursors(newCursors);
        return this["do"].end();
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW92ZWxpbmVzLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBT0EsSUFBQTs7QUFBRSxJQUFNLE9BQUEsQ0FBUSxLQUFSOztBQUVSLE1BQU0sQ0FBQyxPQUFQLEdBRUk7SUFBQSxPQUFBLEVBQ0k7UUFBQSxJQUFBLEVBQU0sTUFBTjtRQUVBLFdBQUEsRUFDSTtZQUFBLElBQUEsRUFBTSxlQUFOO1lBQ0EsS0FBQSxFQUFPLFFBRFA7U0FISjtRQU1BLGFBQUEsRUFDSTtZQUFBLElBQUEsRUFBTSxpQkFBTjtZQUNBLEtBQUEsRUFBTyxVQURQO1NBUEo7S0FESjtJQVdBLFdBQUEsRUFBZSxTQUFBO2VBQUcsSUFBQyxDQUFBLFNBQUQsQ0FBVyxJQUFYO0lBQUgsQ0FYZjtJQVlBLGFBQUEsRUFBZSxTQUFBO2VBQUcsSUFBQyxDQUFBLFNBQUQsQ0FBVyxNQUFYO0lBQUgsQ0FaZjtJQWNBLFNBQUEsRUFBVyxTQUFDLEdBQUQ7QUFFUCxZQUFBO1FBQUEsR0FBQSxHQUFNLElBQUMsQ0FBQSwwQ0FBRCxDQUFBO1FBRU4sSUFBVSxDQUFJLEdBQUcsQ0FBQyxNQUFsQjtBQUFBLG1CQUFBOztRQUNBLElBQVUsR0FBQSxLQUFPLElBQVAsSUFBZ0IsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxHQUFSLENBQWEsQ0FBQSxDQUFBLENBQWIsS0FBbUIsQ0FBN0M7QUFBQSxtQkFBQTs7UUFDQSxJQUFVLEdBQUEsS0FBTyxNQUFQLElBQWtCLENBQUMsQ0FBQyxJQUFGLENBQU8sR0FBUCxDQUFZLENBQUEsQ0FBQSxDQUFaLEtBQWtCLElBQUMsQ0FBQSxRQUFELENBQUEsQ0FBQSxHQUFZLENBQTFEO0FBQUEsbUJBQUE7O1FBRUEsQ0FBQSxHQUFJLEdBQUEsS0FBTyxJQUFQLElBQWdCLENBQUMsQ0FBakIsSUFBc0I7UUFFMUIsSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLEtBQUosQ0FBQTtRQUNBLFVBQUEsR0FBZ0IsSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLE9BQUosQ0FBQTtRQUNoQixhQUFBLEdBQWdCLElBQUMsRUFBQSxFQUFBLEVBQUUsQ0FBQyxVQUFKLENBQUE7QUFFaEI7QUFBQSxhQUFBLHFDQUFBOztZQUNJLEVBQUEsR0FBSztBQUNMLGlCQUFVLHNHQUFWO2dCQUNJLEVBQUUsQ0FBQyxJQUFILENBQVEsSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLElBQUosQ0FBUyxFQUFULENBQVI7QUFESjtBQUdBLG9CQUFPLEdBQVA7QUFBQSxxQkFDUyxJQURUO29CQUNzQixFQUFBLEdBQUssQ0FBRSxDQUFBLENBQUEsQ0FBRixHQUFLO29CQUFLLEVBQUUsQ0FBQyxJQUFILENBQVEsSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLElBQUosQ0FBUyxFQUFULENBQVI7QUFBNUI7QUFEVCxxQkFFUyxNQUZUO29CQUVzQixFQUFBLEdBQUssQ0FBRSxDQUFBLENBQUE7b0JBQVEsRUFBRSxDQUFDLE9BQUgsQ0FBVyxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsSUFBSixDQUFTLENBQUUsQ0FBQSxDQUFBLENBQUYsR0FBSyxDQUFkLENBQVg7QUFGckM7QUFJQSxpQkFBUyx1RkFBVDtnQkFDSSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsTUFBSixDQUFXLEVBQUEsR0FBRyxDQUFkLEVBQWlCLEVBQUcsQ0FBQSxDQUFBLENBQXBCO0FBREo7QUFUSjtBQVlBLGFBQUEsaURBQUE7O1lBQ0ksRUFBRyxDQUFBLENBQUEsQ0FBSCxJQUFTO0FBRGI7QUFHQSxhQUFBLDhDQUFBOztZQUNJLFdBQUEsQ0FBWSxFQUFaLEVBQWdCLENBQWhCLEVBQW1CLENBQW5CO0FBREo7UUFHQSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsTUFBSixDQUFXLGFBQVg7UUFDQSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsVUFBSixDQUFlLFVBQWY7ZUFDQSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsR0FBSixDQUFBO0lBbENPLENBZFgiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuIyAwMCAgICAgMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgXHJcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgMDAwMCAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIFxyXG4jIDAwMDAwMDAwMCAgMDAwICAgMDAwICAgMDAwIDAwMCAgIDAwMDAwMDAgICAwMDAgICAgICAwMDAgIDAwMCAwIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgICBcclxuIyAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgICAgICAgICAgIDAwMCAgXHJcbiMgMDAwICAgMDAwICAgMDAwMDAwMCAgICAgICAwICAgICAgMDAwMDAwMDAgIDAwMDAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMCAgIFxyXG5cclxueyBfIH0gPSByZXF1aXJlICdreGsnXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9XHJcbiAgICBcclxuICAgIGFjdGlvbnM6XHJcbiAgICAgICAgbWVudTogJ0xpbmUnXHJcbiAgICAgICAgXHJcbiAgICAgICAgbW92ZUxpbmVzVXA6XHJcbiAgICAgICAgICAgIG5hbWU6ICdNb3ZlIExpbmVzIFVwJ1xyXG4gICAgICAgICAgICBjb21ibzogJ2FsdCt1cCdcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgbW92ZUxpbmVzRG93bjpcclxuICAgICAgICAgICAgbmFtZTogJ01vdmUgTGluZXMgRG93bidcclxuICAgICAgICAgICAgY29tYm86ICdhbHQrZG93bidcclxuICAgIFxyXG4gICAgbW92ZUxpbmVzVXA6ICAgLT4gQG1vdmVMaW5lcyAndXAnXHJcbiAgICBtb3ZlTGluZXNEb3duOiAtPiBAbW92ZUxpbmVzICdkb3duJ1xyXG4gICAgICAgICAgICBcclxuICAgIG1vdmVMaW5lczogKGRpcikgLT5cclxuXHJcbiAgICAgICAgY3NyID0gQGNvbnRpbnVvdXNDdXJzb3JBbmRTZWxlY3RlZExpbmVJbmRleFJhbmdlcygpXHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGlmIG5vdCBjc3IubGVuZ3RoXHJcbiAgICAgICAgcmV0dXJuIGlmIGRpciA9PSAndXAnIGFuZCBfLmZpcnN0KGNzcilbMF0gPT0gMFxyXG4gICAgICAgIHJldHVybiBpZiBkaXIgPT0gJ2Rvd24nIGFuZCBfLmxhc3QoY3NyKVsxXSA9PSBAbnVtTGluZXMoKS0xXHJcbiAgICAgICAgXHJcbiAgICAgICAgZCA9IGRpciA9PSAndXAnIGFuZCAtMSBvciAxXHJcbiAgICAgICAgXHJcbiAgICAgICAgQGRvLnN0YXJ0KClcclxuICAgICAgICBuZXdDdXJzb3JzICAgID0gQGRvLmN1cnNvcnMoKVxyXG4gICAgICAgIG5ld1NlbGVjdGlvbnMgPSBAZG8uc2VsZWN0aW9ucygpXHJcblxyXG4gICAgICAgIGZvciByIGluIGNzci5yZXZlcnNlKClcclxuICAgICAgICAgICAgbHMgPSBbXVxyXG4gICAgICAgICAgICBmb3IgbGkgaW4gW3JbMF0uLnJbMV1dXHJcbiAgICAgICAgICAgICAgICBscy5wdXNoIEBkby5saW5lKGxpKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgc3dpdGNoIGRpciBcclxuICAgICAgICAgICAgICAgIHdoZW4gJ3VwJyAgIHRoZW4gKHNpID0gclswXS0xKSA7IGxzLnB1c2ggQGRvLmxpbmUoc2kpXHJcbiAgICAgICAgICAgICAgICB3aGVuICdkb3duJyB0aGVuIChzaSA9IHJbMF0pICAgOyBscy51bnNoaWZ0IEBkby5saW5lKHJbMV0rMSlcclxuXHJcbiAgICAgICAgICAgIGZvciBpIGluIFswLi4ubHMubGVuZ3RoXVxyXG4gICAgICAgICAgICAgICAgQGRvLmNoYW5nZSBzaStpLCBsc1tpXVxyXG5cclxuICAgICAgICBmb3IgbnMgaW4gbmV3U2VsZWN0aW9uc1xyXG4gICAgICAgICAgICBuc1swXSArPSBkXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGZvciBuYyBpbiBuZXdDdXJzb3JzXHJcbiAgICAgICAgICAgIGN1cnNvckRlbHRhIG5jLCAwLCBkXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICBAZG8uc2VsZWN0IG5ld1NlbGVjdGlvbnNcclxuICAgICAgICBAZG8uc2V0Q3Vyc29ycyBuZXdDdXJzb3JzXHJcbiAgICAgICAgQGRvLmVuZCgpICAgICAgIFxyXG4iXX0=
//# sourceURL=../../../coffee/editor/actions/movelines.coffee