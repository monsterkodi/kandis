// koffee 1.4.0

/*
 0000000  000   000  000   000  000000000   0000000   000   000
000        000 000   0000  000     000     000   000   000 000
0000000     00000    000 0 000     000     000000000    00000
     000     000     000  0000     000     000   000   000 000
0000000      000     000   000     000     000   000  000   000
 */
var Balancer, Syntax, _, elem, empty, fs, kerror, klog, klor, kstr, matchr, noon, ref, slash, valid,
    indexOf = [].indexOf;

ref = require('kxk'), kerror = ref.kerror, kstr = ref.kstr, valid = ref.valid, klog = ref.klog, elem = ref.elem, empty = ref.empty, fs = ref.fs, noon = ref.noon, slash = ref.slash, _ = ref._;

matchr = require('../tools/matchr');

Balancer = require('./balancer');

klor = require('klor');

Syntax = (function() {
    function Syntax(name, getLine, getLines) {
        this.name = name;
        this.getLine = getLine;
        this.getLines = getLines;
        this.diss = [];
        this.colors = {};
        this.balancer = new Balancer(this, this.getLine);
    }

    Syntax.prototype.newDiss = function(li) {
        var diss;
        diss = this.balancer.dissForLine(li);
        return diss;
    };

    Syntax.prototype.getDiss = function(li) {
        if (this.diss[li] == null) {
            this.diss[li] = this.newDiss(li);
        }
        return this.diss[li];
    };

    Syntax.prototype.setDiss = function(li, dss) {
        this.diss[li] = dss;
        return dss;
    };

    Syntax.prototype.fillDiss = function(bot) {
        var i, li, ref1, results;
        results = [];
        for (li = i = 0, ref1 = bot; 0 <= ref1 ? i <= ref1 : i >= ref1; li = 0 <= ref1 ? ++i : --i) {
            results.push(this.getDiss(li));
        }
        return results;
    };

    Syntax.prototype.setLines = function(lines) {
        return this.balancer.setLines(lines);
    };

    Syntax.prototype.changed = function(changeInfo) {
        var ch, change, di, i, len, li, ref1, ref2, results;
        if (valid(changeInfo.changes)) {
            this.balancer.blocks = null;
        }
        ref1 = changeInfo.changes;
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
            change = ref1[i];
            ref2 = [change.doIndex, change.newIndex, change.change], di = ref2[0], li = ref2[1], ch = ref2[2];
            switch (ch) {
                case 'changed':
                    results.push(this.diss[di] = this.newDiss(di));
                    break;
                case 'deleted':
                    this.balancer.deleteLine(di);
                    results.push(this.diss.splice(di, 1));
                    break;
                case 'inserted':
                    this.balancer.insertLine(di);
                    results.push(this.diss.splice(di, 0, this.newDiss(di)));
                    break;
                default:
                    results.push(void 0);
            }
        }
        return results;
    };

    Syntax.prototype.setFileType = function(fileType) {
        this.name = fileType;
        return this.balancer.setFileType(fileType);
    };

    Syntax.prototype.clear = function() {
        this.diss = [];
        return this.balancer.clear();
    };

    Syntax.prototype.colorForClassnames = function(clss) {
        var color, computedStyle, div, opacity;
        if (this.colors[clss] == null) {
            div = elem({
                "class": clss
            });
            document.body.appendChild(div);
            computedStyle = window.getComputedStyle(div);
            color = computedStyle.color;
            opacity = computedStyle.opacity;
            if (opacity !== '1') {
                color = 'rgba(' + color.slice(4, color.length - 2) + ', ' + opacity + ')';
            }
            this.colors[clss] = color;
            div.remove();
        }
        return this.colors[clss];
    };

    Syntax.prototype.colorForStyle = function(styl) {
        var div;
        if (this.colors[styl] == null) {
            div = elem('div');
            div.style = styl;
            document.body.appendChild(div);
            this.colors[styl] = window.getComputedStyle(div).color;
            div.remove();
        }
        return this.colors[styl];
    };

    Syntax.prototype.schemeChanged = function() {
        return this.colors = {};
    };


    /*
     0000000  000000000   0000000   000000000  000   0000000
    000          000     000   000     000     000  000
    0000000      000     000000000     000     000  000
         000     000     000   000     000     000  000
    0000000      000     000   000     000     000   0000000
     */

    Syntax.matchrConfigs = {};

    Syntax.syntaxNames = [];

    Syntax.spanForText = function(text) {
        return this.spanForTextAndSyntax(text, 'ko');
    };

    Syntax.spanForTextAndSyntax = function(text, n) {
        var clrzd, d, di, diss, i, j, l, last, ref1, ref2, ref3, sp, spc, style, value;
        l = "";
        diss = this.dissForTextAndSyntax(text, n);
        if (diss != null ? diss.length : void 0) {
            last = 0;
            for (di = i = 0, ref1 = diss.length; 0 <= ref1 ? i < ref1 : i > ref1; di = 0 <= ref1 ? ++i : --i) {
                d = diss[di];
                style = (d.styl != null) && d.styl.length && (" style=\"" + d.styl + "\"") || '';
                spc = '';
                for (sp = j = ref2 = last, ref3 = d.start; ref2 <= ref3 ? j < ref3 : j > ref3; sp = ref2 <= ref3 ? ++j : --j) {
                    spc += '&nbsp;';
                }
                last = d.start + d.match.length;
                value = (d.value != null) && d.value.length && (" class=\"" + d.value + "\"") || '';
                clrzd = "<span" + style + value + ">" + spc + (kstr.encode(d.match)) + "</span>";
                l += clrzd;
            }
        }
        return l;
    };

    Syntax.rangesForTextAndSyntax = function(line, n) {
        return matchr.ranges(Syntax.matchrConfigs[n], line);
    };

    Syntax.dissForTextAndSyntax = function(text, n) {
        var result;
        if (n !== 'browser' && n !== 'ko' && n !== 'commandline' && n !== 'macro' && n !== 'term' && n !== 'test') {
            result = klor.ranges(text, n);
        } else {
            if ((n == null) || (Syntax.matchrConfigs[n] == null)) {
                return kerror("no syntax? " + n);
            }
            result = matchr.dissect(matchr.ranges(Syntax.matchrConfigs[n], text));
        }
        return result;
    };

    Syntax.lineForDiss = function(dss) {
        var d, i, l, len;
        l = "";
        for (i = 0, len = dss.length; i < len; i++) {
            d = dss[i];
            l = _.padEnd(l, d.start);
            l += d.match;
        }
        return l;
    };

    Syntax.shebang = function(line) {
        var lastWord;
        if (line.startsWith("#!")) {
            lastWord = _.last(line.split(/[\s\/]/));
            switch (lastWord) {
                case 'python':
                    return 'py';
                case 'node':
                    return 'js';
                case 'bash':
                    return 'sh';
                default:
                    if (indexOf.call(this.syntaxNames, lastWord) >= 0) {
                        return lastWord;
                    }
            }
        }
        return 'txt';
    };

    Syntax.init = function() {
        var config, extnames, i, j, len, len1, patterns, ref1, ref2, syntaxDir, syntaxFile, syntaxName;
        syntaxDir = __dirname + "/../../syntax/";
        ref1 = fs.readdirSync(syntaxDir);
        for (i = 0, len = ref1.length; i < len; i++) {
            syntaxFile = ref1[i];
            syntaxName = slash.basename(syntaxFile, '.noon');
            patterns = noon.load(slash.join(syntaxDir, syntaxFile));
            patterns['\\w+'] = 'text';
            patterns['[^\\w\\s]+'] = 'syntax';
            if (((ref2 = patterns.ko) != null ? ref2.extnames : void 0) != null) {
                extnames = patterns.ko.extnames;
                delete patterns.ko;
                config = matchr.config(patterns);
                for (j = 0, len1 = extnames.length; j < len1; j++) {
                    syntaxName = extnames[j];
                    this.syntaxNames.push(syntaxName);
                    this.matchrConfigs[syntaxName] = config;
                }
            } else {
                this.syntaxNames.push(syntaxName);
                this.matchrConfigs[syntaxName] = matchr.config(patterns);
            }
        }
        return this.syntaxNames = this.syntaxNames.concat(klor.exts);
    };

    return Syntax;

})();

Syntax.init();

module.exports = Syntax;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ludGF4LmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQSwrRkFBQTtJQUFBOztBQVFBLE1BQWlFLE9BQUEsQ0FBUSxLQUFSLENBQWpFLEVBQUUsbUJBQUYsRUFBVSxlQUFWLEVBQWdCLGlCQUFoQixFQUF1QixlQUF2QixFQUE2QixlQUE3QixFQUFtQyxpQkFBbkMsRUFBMEMsV0FBMUMsRUFBOEMsZUFBOUMsRUFBb0QsaUJBQXBELEVBQTJEOztBQUUzRCxNQUFBLEdBQVcsT0FBQSxDQUFRLGlCQUFSOztBQUNYLFFBQUEsR0FBVyxPQUFBLENBQVEsWUFBUjs7QUFDWCxJQUFBLEdBQVcsT0FBQSxDQUFRLE1BQVI7O0FBRUw7SUFFVyxnQkFBQyxJQUFELEVBQVEsT0FBUixFQUFrQixRQUFsQjtRQUFDLElBQUMsQ0FBQSxPQUFEO1FBQU8sSUFBQyxDQUFBLFVBQUQ7UUFBVSxJQUFDLENBQUEsV0FBRDtRQUUzQixJQUFDLENBQUEsSUFBRCxHQUFZO1FBQ1osSUFBQyxDQUFBLE1BQUQsR0FBWTtRQUNaLElBQUMsQ0FBQSxRQUFELEdBQVksSUFBSSxRQUFKLENBQWEsSUFBYixFQUFnQixJQUFDLENBQUEsT0FBakI7SUFKSDs7cUJBWWIsT0FBQSxHQUFTLFNBQUMsRUFBRDtBQUVMLFlBQUE7UUFBQSxJQUFBLEdBQU8sSUFBQyxDQUFBLFFBQVEsQ0FBQyxXQUFWLENBQXNCLEVBQXRCO2VBQ1A7SUFISzs7cUJBS1QsT0FBQSxHQUFTLFNBQUMsRUFBRDtRQUVMLElBQU8scUJBQVA7WUFDSSxJQUFDLENBQUEsSUFBSyxDQUFBLEVBQUEsQ0FBTixHQUFZLElBQUMsQ0FBQSxPQUFELENBQVMsRUFBVCxFQURoQjs7ZUFHQSxJQUFDLENBQUEsSUFBSyxDQUFBLEVBQUE7SUFMRDs7cUJBT1QsT0FBQSxHQUFTLFNBQUMsRUFBRCxFQUFLLEdBQUw7UUFFTCxJQUFDLENBQUEsSUFBSyxDQUFB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QUFQLENBQWMsUUFBZCxFQVZqQzs7QUFSSjtlQXFCQSxJQUFDLENBQUEsV0FBRCxHQUFlLElBQUMsQ0FBQSxXQUFXLENBQUMsTUFBYixDQUFvQixJQUFJLENBQUMsSUFBekI7SUF6Qlo7Ozs7OztBQTJCWCxNQUFNLENBQUMsSUFBUCxDQUFBOztBQUNBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4gMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDBcbjAwMCAgICAgICAgMDAwIDAwMCAgIDAwMDAgIDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgICAwMDAgMDAwXG4wMDAwMDAwICAgICAwMDAwMCAgICAwMDAgMCAwMDAgICAgIDAwMCAgICAgMDAwMDAwMDAwICAgIDAwMDAwXG4gICAgIDAwMCAgICAgMDAwICAgICAwMDAgIDAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAgMDAwIDAwMFxuMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4jIyNcblxueyBrZXJyb3IsIGtzdHIsIHZhbGlkLCBrbG9nLCBlbGVtLCBlbXB0eSwgZnMsIG5vb24sIHNsYXNoLCBfIH0gPSByZXF1aXJlICdreGsnXG5cbm1hdGNociAgID0gcmVxdWlyZSAnLi4vdG9vbHMvbWF0Y2hyJ1xuQmFsYW5jZXIgPSByZXF1aXJlICcuL2JhbGFuY2VyJ1xua2xvciAgICAgPSByZXF1aXJlICdrbG9yJ1xuXG5jbGFzcyBTeW50YXhcbiAgICBcbiAgICBjb25zdHJ1Y3RvcjogKEBuYW1lLCBAZ2V0TGluZSwgQGdldExpbmVzKSAtPlxuXG4gICAgICAgIEBkaXNzICAgICA9IFtdXG4gICAgICAgIEBjb2xvcnMgICA9IHt9XG4gICAgICAgIEBiYWxhbmNlciA9IG5ldyBCYWxhbmNlciBALCBAZ2V0TGluZVxuXG4gICAgIyAwMDAwMDAwICAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgMDAwICAgICAgIDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwXG4gICAgIyAwMDAwMDAwICAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDBcblxuICAgIG5ld0Rpc3M6IChsaSkgLT5cblxuICAgICAgICBkaXNzID0gQGJhbGFuY2VyLmRpc3NGb3JMaW5lIGxpXG4gICAgICAgIGRpc3NcblxuICAgIGdldERpc3M6IChsaSkgLT5cblxuICAgICAgICBpZiBub3QgQGRpc3NbbGldP1xuICAgICAgICAgICAgQGRpc3NbbGldID0gQG5ld0Rpc3MgbGlcblxuICAgICAgICBAZGlzc1tsaV1cblxuICAgIHNldERpc3M6IChsaSwgZHNzKSAtPlxuXG4gICAgICAgIEBkaXNzW2xpXSA9IGRzc1xuICAgICAgICBkc3NcblxuICAgIGZpbGxEaXNzOiAoYm90KSAtPlxuXG4gICAgICAgIGZvciBsaSBpbiBbMC4uYm90XVxuICAgICAgICAgICAgQGdldERpc3MgbGlcblxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAwICAwMDAwMDAwMDAgIDAwMCAgICAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgICAgIDAwMCAgMDAwMCAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAgICAgICAwMDAgICAgIDAwMCAgICAgIDAwMCAgMDAwIDAgMDAwICAwMDAwMDAwICAgMDAwMDAwMCAgIFxuICAgICMgICAgICAwMDAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgICAgIDAwMCAgMDAwICAwMDAwICAwMDAgICAgICAgICAgICAwMDAgIFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAwICAgICAwMDAgICAgIDAwMDAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMCAgIFxuICAgIFxuICAgIHNldExpbmVzOiAobGluZXMpIC0+XG4gICAgICAgIFxuICAgICAgICBAYmFsYW5jZXIuc2V0TGluZXMgbGluZXNcbiAgICAgICAgICAgIFxuICAgICMgIDAwMDAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgIDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMCAgMDAwICAwMDAgICAgICAgIDAwMCAgICAgICAwMDAgICAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwIDAgMDAwICAwMDAgIDAwMDAgIDAwMDAwMDAgICAwMDAgICAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDBcbiAgICAjICAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAwMDAwMDAwXG5cbiAgICBjaGFuZ2VkOiAoY2hhbmdlSW5mbykgLT5cblxuICAgICAgICBpZiB2YWxpZCBjaGFuZ2VJbmZvLmNoYW5nZXNcbiAgICAgICAgICAgIEBiYWxhbmNlci5ibG9ja3MgPSBudWxsXG4gICAgICAgIFxuICAgICAgICBmb3IgY2hhbmdlIGluIGNoYW5nZUluZm8uY2hhbmdlc1xuXG4gICAgICAgICAgICBbZGksbGksY2hdID0gW2NoYW5nZS5kb0luZGV4LCBjaGFuZ2UubmV3SW5kZXgsIGNoYW5nZS5jaGFuZ2VdXG5cbiAgICAgICAgICAgIHN3aXRjaCBjaFxuXG4gICAgICAgICAgICAgICAgd2hlbiAnY2hhbmdlZCdcblxuICAgICAgICAgICAgICAgICAgICBAZGlzc1tkaV0gPSBAbmV3RGlzcyBkaVxuXG4gICAgICAgICAgICAgICAgd2hlbiAnZGVsZXRlZCdcblxuICAgICAgICAgICAgICAgICAgICBAYmFsYW5jZXIuZGVsZXRlTGluZSBkaVxuICAgICAgICAgICAgICAgICAgICBAZGlzcy5zcGxpY2UgZGksIDFcblxuICAgICAgICAgICAgICAgIHdoZW4gJ2luc2VydGVkJ1xuXG4gICAgICAgICAgICAgICAgICAgIEBiYWxhbmNlci5pbnNlcnRMaW5lIGRpXG4gICAgICAgICAgICAgICAgICAgIEBkaXNzLnNwbGljZSBkaSwgMCwgQG5ld0Rpc3MgZGlcblxuICAgICMgMDAwMDAwMDAgIDAwMCAgMDAwICAgICAgMDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAwMDAgICAgICAwMDAgICAgICAgICAgMDAwICAgICAgMDAwIDAwMCAgIDAwMCAgIDAwMCAgMDAwXG4gICAgIyAwMDAwMDAgICAgMDAwICAwMDAgICAgICAwMDAwMDAwICAgICAgMDAwICAgICAgIDAwMDAwICAgIDAwMDAwMDAwICAgMDAwMDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgICAgIDAwMCAgICAgICAgMDAwICAgICAwMDAgICAgICAgIDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgMDAwMDAwMCAgMDAwMDAwMDAgICAgIDAwMCAgICAgICAgMDAwICAgICAwMDAgICAgICAgIDAwMDAwMDAwXG5cbiAgICBzZXRGaWxlVHlwZTogKGZpbGVUeXBlKSAtPlxuXG4gICAgICAgICMga2xvZyAnU3ludGF4LnNldEZpbGVUeXBlJywgZmlsZVR5cGVcbiAgICAgICAgXG4gICAgICAgIEBuYW1lID0gZmlsZVR5cGVcbiAgICAgICAgQGJhbGFuY2VyLnNldEZpbGVUeXBlIGZpbGVUeXBlXG4gICAgICAgIFxuICAgICMgIDAwMDAwMDAgIDAwMCAgICAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuXG4gICAgY2xlYXI6IC0+XG5cbiAgICAgICAgQGRpc3MgPSBbXVxuICAgICAgICBAYmFsYW5jZXIuY2xlYXIoKVxuXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAgICAgMDAwMDAwMCAgIDAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgMDAwICAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuICAgICMgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDBcblxuICAgIGNvbG9yRm9yQ2xhc3NuYW1lczogKGNsc3MpIC0+XG5cbiAgICAgICAgaWYgbm90IEBjb2xvcnNbY2xzc10/XG5cbiAgICAgICAgICAgIGRpdiA9IGVsZW0gY2xhc3M6IGNsc3NcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQgZGl2XG4gICAgICAgICAgICBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUgZGl2XG4gICAgICAgICAgICBjb2xvciA9IGNvbXB1dGVkU3R5bGUuY29sb3JcbiAgICAgICAgICAgIG9wYWNpdHkgPSBjb21wdXRlZFN0eWxlLm9wYWNpdHlcbiAgICAgICAgICAgIGlmIG9wYWNpdHkgIT0gJzEnXG4gICAgICAgICAgICAgICAgY29sb3IgPSAncmdiYSgnICsgY29sb3Iuc2xpY2UoNCwgY29sb3IubGVuZ3RoLTIpICsgJywgJyArIG9wYWNpdHkgKyAnKSdcbiAgICAgICAgICAgIEBjb2xvcnNbY2xzc10gPSBjb2xvclxuICAgICAgICAgICAgZGl2LnJlbW92ZSgpXG5cbiAgICAgICAgcmV0dXJuIEBjb2xvcnNbY2xzc11cblxuICAgIGNvbG9yRm9yU3R5bGU6IChzdHlsKSAtPlxuXG4gICAgICAgIGlmIG5vdCBAY29sb3JzW3N0eWxdP1xuICAgICAgICAgICAgZGl2ID0gZWxlbSAnZGl2J1xuICAgICAgICAgICAgZGl2LnN0eWxlID0gc3R5bFxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCBkaXZcbiAgICAgICAgICAgIEBjb2xvcnNbc3R5bF0gPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkaXYpLmNvbG9yXG4gICAgICAgICAgICBkaXYucmVtb3ZlKClcblxuICAgICAgICByZXR1cm4gQGNvbG9yc1tzdHlsXVxuXG4gICAgc2NoZW1lQ2hhbmdlZDogLT4gQGNvbG9ycyA9IHt9XG5cbiAgICAjIyNcbiAgICAgMDAwMDAwMCAgMDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwICAgMDAwMDAwMFxuICAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgIDAwMFxuICAgIDAwMDAwMDAgICAgICAwMDAgICAgIDAwMDAwMDAwMCAgICAgMDAwICAgICAwMDAgIDAwMFxuICAgICAgICAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgIDAwMFxuICAgIDAwMDAwMDAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAwMDAwXG4gICAgIyMjXG5cbiAgICBAbWF0Y2hyQ29uZmlncyA9IHt9XG4gICAgQHN5bnRheE5hbWVzID0gW11cblxuICAgIEBzcGFuRm9yVGV4dDogKHRleHQpIC0+IEBzcGFuRm9yVGV4dEFuZFN5bnRheCB0ZXh0LCAna28nXG4gICAgQHNwYW5Gb3JUZXh0QW5kU3ludGF4OiAodGV4dCwgbikgLT5cblxuICAgICAgICBsID0gXCJcIlxuICAgICAgICBkaXNzID0gQGRpc3NGb3JUZXh0QW5kU3ludGF4IHRleHQsIG5cbiAgICAgICAgaWYgZGlzcz8ubGVuZ3RoXG4gICAgICAgICAgICBsYXN0ID0gMFxuICAgICAgICAgICAgZm9yIGRpIGluIFswLi4uZGlzcy5sZW5ndGhdXG4gICAgICAgICAgICAgICAgZCA9IGRpc3NbZGldXG4gICAgICAgICAgICAgICAgc3R5bGUgPSBkLnN0eWw/IGFuZCBkLnN0eWwubGVuZ3RoIGFuZCBcIiBzdHlsZT1cXFwiI3tkLnN0eWx9XFxcIlwiIG9yICcnXG4gICAgICAgICAgICAgICAgc3BjID0gJydcbiAgICAgICAgICAgICAgICBmb3Igc3AgaW4gW2xhc3QuLi5kLnN0YXJ0XVxuICAgICAgICAgICAgICAgICAgICBzcGMgKz0gJyZuYnNwOydcbiAgICAgICAgICAgICAgICBsYXN0ICA9IGQuc3RhcnQgKyBkLm1hdGNoLmxlbmd0aFxuICAgICAgICAgICAgICAgIHZhbHVlID0gZC52YWx1ZT8gYW5kIGQudmFsdWUubGVuZ3RoIGFuZCBcIiBjbGFzcz1cXFwiI3tkLnZhbHVlfVxcXCJcIiBvciAnJ1xuICAgICAgICAgICAgICAgIGNscnpkID0gXCI8c3BhbiN7c3R5bGV9I3t2YWx1ZX0+I3tzcGN9I3trc3RyLmVuY29kZSBkLm1hdGNofTwvc3Bhbj5cIlxuICAgICAgICAgICAgICAgIGwgKz0gY2xyemRcbiAgICAgICAgbFxuXG4gICAgQHJhbmdlc0ZvclRleHRBbmRTeW50YXg6IChsaW5lLCBuKSAtPlxuXG4gICAgICAgIG1hdGNoci5yYW5nZXMgU3ludGF4Lm1hdGNockNvbmZpZ3Nbbl0sIGxpbmVcblxuICAgIEBkaXNzRm9yVGV4dEFuZFN5bnRheDogKHRleHQsIG4pIC0+XG5cbiAgICAgICAgaWYgbiBub3QgaW4gWydicm93c2VyJywgJ2tvJywgJ2NvbW1hbmRsaW5lJywgJ21hY3JvJywgJ3Rlcm0nLCAndGVzdCddXG4gICAgICAgICAgICByZXN1bHQgPSBrbG9yLnJhbmdlcyB0ZXh0LCBuXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGlmIG5vdCBuPyBvciBub3QgU3ludGF4Lm1hdGNockNvbmZpZ3Nbbl0/XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtlcnJvciBcIm5vIHN5bnRheD8gI3tufVwiXG4gICAgICAgICAgICByZXN1bHQgPSBtYXRjaHIuZGlzc2VjdCBtYXRjaHIucmFuZ2VzIFN5bnRheC5tYXRjaHJDb25maWdzW25dLCB0ZXh0XG4gICAgICAgIHJlc3VsdFxuXG4gICAgQGxpbmVGb3JEaXNzOiAoZHNzKSAtPlxuXG4gICAgICAgIGwgPSBcIlwiXG4gICAgICAgIGZvciBkIGluIGRzc1xuICAgICAgICAgICAgbCA9IF8ucGFkRW5kIGwsIGQuc3RhcnRcbiAgICAgICAgICAgIGwgKz0gZC5tYXRjaFxuICAgICAgICBsXG5cbiAgICAjICAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAwMDAwICAgICAwMDAwMDAwICAgMDAwICAgMDAwICAgMDAwMDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAgMCAwMDAgIDAwMCAgMDAwMFxuICAgICMgICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAwMDAwMDAwXG5cbiAgICBAc2hlYmFuZzogKGxpbmUpIC0+XG5cbiAgICAgICAgaWYgbGluZS5zdGFydHNXaXRoIFwiIyFcIlxuICAgICAgICAgICAgbGFzdFdvcmQgPSBfLmxhc3QgbGluZS5zcGxpdCAvW1xcc1xcL10vXG4gICAgICAgICAgICBzd2l0Y2ggbGFzdFdvcmRcbiAgICAgICAgICAgICAgICB3aGVuICdweXRob24nIHRoZW4gcmV0dXJuICdweSdcbiAgICAgICAgICAgICAgICB3aGVuICdub2RlJyAgIHRoZW4gcmV0dXJuICdqcydcbiAgICAgICAgICAgICAgICB3aGVuICdiYXNoJyAgIHRoZW4gcmV0dXJuICdzaCdcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGlmIGxhc3RXb3JkIGluIEBzeW50YXhOYW1lc1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RXb3JkXG4gICAgICAgICd0eHQnXG5cbiAgICAjIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAwMDAwMFxuICAgICMgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgMDAwXG4gICAgIyAwMDAgIDAwMCAwIDAwMCAgMDAwICAgICAwMDBcbiAgICAjIDAwMCAgMDAwICAwMDAwICAwMDAgICAgIDAwMFxuICAgICMgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgMDAwXG5cbiAgICBAaW5pdDogLT5cblxuICAgICAgICBzeW50YXhEaXIgPSBcIiN7X19kaXJuYW1lfS8uLi8uLi9zeW50YXgvXCJcblxuICAgICAgICBmb3Igc3ludGF4RmlsZSBpbiBmcy5yZWFkZGlyU3luYyBzeW50YXhEaXJcblxuICAgICAgICAgICAgc3ludGF4TmFtZSA9IHNsYXNoLmJhc2VuYW1lIHN5bnRheEZpbGUsICcubm9vbidcbiAgICAgICAgICAgIHBhdHRlcm5zID0gbm9vbi5sb2FkIHNsYXNoLmpvaW4gc3ludGF4RGlyLCBzeW50YXhGaWxlXG5cbiAgICAgICAgICAgIHBhdHRlcm5zWydcXFxcdysnXSAgICAgICA9ICd0ZXh0JyAgICMgdGhpcyBlbnN1cmVzIHRoYXQgYWxsIC4uLlxuICAgICAgICAgICAgcGF0dGVybnNbJ1teXFxcXHdcXFxcc10rJ10gPSAnc3ludGF4JyAjIG5vbi1zcGFjZSBjaGFyYWN0ZXJzIG1hdGNoXG5cbiAgICAgICAgICAgIGlmIHBhdHRlcm5zLmtvPy5leHRuYW1lcz9cbiAgICAgICAgICAgICAgICBleHRuYW1lcyA9IHBhdHRlcm5zLmtvLmV4dG5hbWVzXG4gICAgICAgICAgICAgICAgZGVsZXRlIHBhdHRlcm5zLmtvXG5cbiAgICAgICAgICAgICAgICBjb25maWcgPSBtYXRjaHIuY29uZmlnIHBhdHRlcm5zXG4gICAgICAgICAgICAgICAgZm9yIHN5bnRheE5hbWUgaW4gZXh0bmFtZXNcbiAgICAgICAgICAgICAgICAgICAgQHN5bnRheE5hbWVzLnB1c2ggc3ludGF4TmFtZVxuICAgICAgICAgICAgICAgICAgICBAbWF0Y2hyQ29uZmlnc1tzeW50YXhOYW1lXSA9IGNvbmZpZ1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIEBzeW50YXhOYW1lcy5wdXNoIHN5bnRheE5hbWVcbiAgICAgICAgICAgICAgICBAbWF0Y2hyQ29uZmlnc1tzeW50YXhOYW1lXSA9IG1hdGNoci5jb25maWcgcGF0dGVybnNcblxuICAgICAgICAjIGtsb3IuaW5pdCgpXG4gICAgICAgIEBzeW50YXhOYW1lcyA9IEBzeW50YXhOYW1lcy5jb25jYXQga2xvci5leHRzXG5cblN5bnRheC5pbml0KClcbm1vZHVsZS5leHBvcnRzID0gU3ludGF4XG4iXX0=
//# sourceURL=../../coffee/editor/syntax.coffee