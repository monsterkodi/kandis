// koffee 0.56.0

/*
 0000000   0000000  00000000    0000000   000      000      00000000  00000000
000       000       000   000  000   000  000      000      000       000   000
0000000   000       0000000    000   000  000      000      0000000   0000000
     000  000       000   000  000   000  000      000      000       000   000
0000000    0000000  000   000   0000000   0000000  0000000  00000000  000   000
 */
var Scroller, clamp, drag, elem, ref, scheme, stopEvent,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), stopEvent = ref.stopEvent, clamp = ref.clamp, drag = ref.drag, elem = ref.elem;

scheme = require('../tools/scheme');

Scroller = (function() {
    function Scroller(column) {
        this.column = column;
        this.update = bind(this.update, this);
        this.onScroll = bind(this.onScroll, this);
        this.onWheel = bind(this.onWheel, this);
        this.onDrag = bind(this.onDrag, this);
        this.onStart = bind(this.onStart, this);
        this.elem = elem({
            "class": 'scrollbar right'
        });
        this.column.div.insertBefore(this.elem, this.column.table);
        this.handle = elem({
            "class": 'scrollhandle right'
        });
        this.elem.appendChild(this.handle);
        this.drag = new drag({
            target: this.elem,
            onStart: this.onStart,
            onMove: this.onDrag,
            cursor: 'ns-resize'
        });
        this.elem.addEventListener('wheel', this.onWheel);
        this.column.div.addEventListener('wheel', this.onWheel);
        this.column.div.addEventListener('scroll', this.onScroll);
        this.target = this.column.div;
    }

    Scroller.prototype.numRows = function() {
        return this.column.numRows();
    };

    Scroller.prototype.visRows = function() {
        return 1 + parseInt(this.column.browser.height() / this.column.rowHeight());
    };

    Scroller.prototype.rowHeight = function() {
        return this.column.rowHeight();
    };

    Scroller.prototype.height = function() {
        return this.column.browser.height();
    };

    Scroller.prototype.onStart = function(drag, event) {
        var br, ln, ly, sy;
        br = this.elem.getBoundingClientRect();
        sy = clamp(0, this.height(), event.clientY - br.top);
        ln = parseInt(this.numRows() * sy / this.height());
        ly = (ln - this.visRows() / 2) * this.rowHeight();
        return this.target.scrollTop = ly;
    };

    Scroller.prototype.onDrag = function(drag) {
        var delta;
        delta = (drag.delta.y / (this.visRows() * this.rowHeight())) * this.numRows() * this.rowHeight();
        this.target.scrollTop += delta;
        return this.update();
    };

    Scroller.prototype.onWheel = function(event) {
        if (Math.abs(event.deltaX) >= 2 * Math.abs(event.deltaY) || Math.abs(event.deltaY) === 0) {
            this.target.scrollLeft += event.deltaX;
        } else {
            this.target.scrollTop += event.deltaY;
        }
        return stopEvent(event);
    };

    Scroller.prototype.onScroll = function(event) {
        return this.update();
    };

    Scroller.prototype.toIndex = function(i) {
        var newTop, row;
        row = this.column.rows[i].div;
        newTop = this.target.scrollTop;
        if (newTop < row.offsetTop + this.rowHeight() - this.height()) {
            newTop = row.offsetTop + this.rowHeight() - this.height();
        } else if (newTop > row.offsetTop) {
            newTop = row.offsetTop;
        }
        this.target.scrollTop = parseInt(newTop);
        return this.update();
    };

    Scroller.prototype.update = function() {
        var base, base1, bh, cf, cs, longColor, ref1, ref2, ref3, scrollHeight, scrollTop, shortColor, vh;
        if (this.numRows() * this.rowHeight() < this.height()) {
            this.elem.style.display = 'none';
            this.elem.style.top = "0";
            this.handle.style.top = "0";
            this.handle.style.height = "0";
            this.handle.style.width = "0";
        } else {
            this.elem.style.display = 'block';
            bh = this.numRows() * this.rowHeight();
            vh = Math.min(this.visRows() * this.rowHeight(), this.height());
            scrollTop = parseInt((this.target.scrollTop / bh) * vh);
            scrollHeight = parseInt(((this.visRows() * this.rowHeight()) / bh) * vh);
            scrollHeight = Math.max(scrollHeight, parseInt(this.rowHeight() / 4));
            scrollTop = Math.min(scrollTop, this.height() - scrollHeight);
            scrollTop = Math.max(0, scrollTop);
            this.elem.style.top = this.target.scrollTop + "px";
            this.handle.style.top = scrollTop + "px";
            this.handle.style.height = scrollHeight + "px";
            this.handle.style.width = "2px";
            longColor = scheme.colorForClass('scroller long');
            shortColor = scheme.colorForClass('scroller short');
            cf = 1 - clamp(0, 1, (scrollHeight - 10) / 200);
            cs = scheme.fadeColor(longColor, shortColor, cf);
            this.handle.style.backgroundColor = cs;
        }
        if (((ref1 = this.column.parent) != null ? ref1.type : void 0) === 'preview') {
            if ((typeof (base = this.column).prevColumn === "function" ? base.prevColumn().div.scrollTop : void 0) !== this.target.scrollTop) {
                this.column.prevColumn().div.scrollTop = this.target.scrollTop;
            }
        } else if ((typeof (base1 = this.column).nextColumn === "function" ? (ref2 = base1.nextColumn()) != null ? (ref3 = ref2.parent) != null ? ref3.type : void 0 : void 0 : void 0) === 'preview') {
            if (this.column.nextColumn().div.scrollTop !== this.target.scrollTop) {
                this.column.nextColumn().div.scrollTop = this.target.scrollTop;
            }
        }
        return this.handle.style.right = "-" + this.target.scrollLeft + "px";
    };

    return Scroller;

})();

module.exports = Scroller;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/browser/scroller.coffee