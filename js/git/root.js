// koffee 1.4.0

/*
00000000    0000000    0000000   000000000  
000   000  000   000  000   000     000     
0000000    000   000  000   000     000     
000   000  000   000  000   000     000     
000   000   0000000    0000000      000
 */
var _, childp, dir, empty, fixPath, gitCmd, gitOpt, ref, root, slash, valid;

ref = require('kxk'), childp = ref.childp, slash = ref.slash, empty = ref.empty, valid = ref.valid, _ = ref._;

fixPath = function(p) {
    var ref1;
    p = p.trim();
    if ((p[0] === (ref1 = p[2]) && ref1 === '/')) {
        p = p[1].toUpperCase() + ':' + p.slice(2);
    }
    return slash.resolve(p);
};

gitCmd = 'git rev-parse --show-toplevel';

gitOpt = function(cwd) {
    return {
        cwd: cwd,
        encoding: 'utf8',
        stdio: ['pipe', 'pipe', 'ignore']
    };
};

root = function(pth, cb) {
    var err;
    pth = slash.resolve(pth);
    if (_.isFunction(cb)) {
        if (empty(pth)) {
            return cb('');
        } else {
            pth = slash.unslash(pth);
            return slash.dirExists(pth, function(stat) {
                pth = valid(stat) ? slash.unslash(pth) : slash.dir(pth);
                if (empty(pth)) {
                    return cb('');
                } else {
                    return childp.exec(gitCmd, gitOpt(pth), function(err, r) {
                        if (valid(err)) {
                            return cb('');
                        } else {
                            return cb(fixPath(r));
                        }
                    });
                }
            });
        }
    } else {
        if (empty(pth)) {
            return '';
        }
        try {
            pth = slash.dirExists(pth) ? slash.unslash(pth) : slash.dir(pth);
            if (empty(pth)) {
                return '';
            }
            return fixPath(childp.execSync(gitCmd, gitOpt(pth)));
        } catch (error) {
            err = error;
            return '';
        }
    }
};

if (module.parent) {
    module.exports = root;
} else {
    if (!empty(process.argv[2])) {
        dir = slash.resolve(process.argv[2]);
    } else {
        dir = process.cwd();
    }
    console.log(root(dir));
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdC5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUE7O0FBUUEsTUFBcUMsT0FBQSxDQUFRLEtBQVIsQ0FBckMsRUFBRSxtQkFBRixFQUFVLGlCQUFWLEVBQWlCLGlCQUFqQixFQUF3QixpQkFBeEIsRUFBK0I7O0FBRS9CLE9BQUEsR0FBVSxTQUFDLENBQUQ7QUFFTixRQUFBO0lBQUEsQ0FBQSxHQUFJLENBQUMsQ0FBQyxJQUFGLENBQUE7SUFDSixJQUFHLENBQUEsQ0FBRSxDQUFBLENBQUEsQ0FBRixhQUFRLENBQUUsQ0FBQSxDQUFBLEVBQVYsUUFBQSxLQUFnQixHQUFoQixDQUFIO1FBQ0ksQ0FBQSxHQUFJLENBQUUsQ0FBQSxDQUFBLENBQUUsQ0FBQyxXQUFMLENBQUEsQ0FBQSxHQUFxQixHQUFyQixHQUEyQixDQUFDLENBQUMsS0FBRixDQUFRLENBQVIsRUFEbkM7O0FBRUEsV0FBTyxLQUFLLENBQUMsT0FBTixDQUFjLENBQWQ7QUFMRDs7QUFPVixNQUFBLEdBQVU7O0FBQ1YsTUFBQSxHQUFTLFNBQUMsR0FBRDtXQUFTO1FBQUEsR0FBQSxFQUFJLEdBQUo7UUFBUyxRQUFBLEVBQVMsTUFBbEI7UUFBeUIsS0FBQSxFQUFNLENBQUMsTUFBRCxFQUFRLE1BQVIsRUFBZSxRQUFmLENBQS9COztBQUFUOztBQUVULElBQUEsR0FBTyxTQUFDLEdBQUQsRUFBTSxFQUFOO0FBRUgsUUFBQTtJQUFBLEdBQUEsR0FBTSxLQUFLLENBQUMsT0FBTixDQUFjLEdBQWQ7SUFFTixJQUFHLENBQUMsQ0FBQyxVQUFGLENBQWEsRUFBYixDQUFIO1FBRUksSUFBRyxLQUFBLENBQU0sR0FBTixDQUFIO21CQUNJLEVBQUEsQ0FBRyxFQUFILEVBREo7U0FBQSxNQUFBO1lBR0ksR0FBQSxHQUFNLEtBQUssQ0FBQyxPQUFOLENBQWMsR0FBZDttQkFFTixLQUFLLENBQUMsU0FBTixDQUFnQixHQUFoQixFQUFxQixTQUFDLElBQUQ7Z0JBQ2pCLEdBQUEsR0FBUyxLQUFBLENBQU0sSUFBTixDQUFILEdBQW9CLEtBQUssQ0FBQyxPQUFOLENBQWMsR0FBZCxDQUFwQixHQUE0QyxLQUFLLENBQUMsR0FBTixDQUFVLEdBQVY7Z0JBQ2xELElBQUcsS0FBQSxDQUFNLEdBQU4sQ0FBSDsyQkFDSSxFQUFBLENBQUcsRUFBSCxFQURKO2lCQUFBLE1BQUE7MkJBR0ksTUFBTSxDQUFDLElBQVAsQ0FBWSxNQUFaLEVBQW9CLE1BQUEsQ0FBTyxHQUFQLENBQXBCLEVBQWlDLFNBQUMsR0FBRCxFQUFLLENBQUw7d0JBQzdCLElBQUcsS0FBQSxDQUFNLEdBQU4sQ0FBSDttQ0FDSSxFQUFBLENBQUcsRUFBSCxFQURKO3lCQUFBLE1BQUE7bUNBR0ksRUFBQSxDQUFHLE9BQUEsQ0FBUSxDQUFSLENBQUgsRUFISjs7b0JBRDZCLENBQWpDLEVBSEo7O1lBRmlCLENBQXJCLEVBTEo7U0FGSjtLQUFBLE1BQUE7UUFtQkksSUFBYSxLQUFBLENBQU0sR0FBTixDQUFiO0FBQUEsbUJBQU8sR0FBUDs7QUFFQTtZQUNJLEdBQUEsR0FBUyxLQUFLLENBQUMsU0FBTixDQUFnQixHQUFoQixDQUFILEdBQTZCLEtBQUssQ0FBQyxPQUFOLENBQWMsR0FBZCxDQUE3QixHQUFxRCxLQUFLLENBQUMsR0FBTixDQUFVLEdBQVY7WUFDM0QsSUFBYSxLQUFBLENBQU0sR0FBTixDQUFiO0FBQUEsdUJBQU8sR0FBUDs7QUFDQSxtQkFBTyxPQUFBLENBQVEsTUFBTSxDQUFDLFFBQVAsQ0FBZ0IsTUFBaEIsRUFBd0IsTUFBQSxDQUFPLEdBQVAsQ0FBeEIsQ0FBUixFQUhYO1NBQUEsYUFBQTtZQUtNO0FBQ0YsbUJBQU8sR0FOWDtTQXJCSjs7QUFKRzs7QUF1Q1AsSUFBRyxNQUFNLENBQUMsTUFBVjtJQUVJLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLEtBRnJCO0NBQUEsTUFBQTtJQUtJLElBQUcsQ0FBSSxLQUFBLENBQU0sT0FBTyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQW5CLENBQVA7UUFDSSxHQUFBLEdBQU0sS0FBSyxDQUFDLE9BQU4sQ0FBYyxPQUFPLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBM0IsRUFEVjtLQUFBLE1BQUE7UUFHSSxHQUFBLEdBQU0sT0FBTyxDQUFDLEdBQVIsQ0FBQSxFQUhWOztJQUtBLE9BQUEsQ0FBQSxHQUFBLENBQUksSUFBQSxDQUFLLEdBQUwsQ0FBSixFQVZKIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAwMDAwMCAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICBcbjAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuMDAwICAgMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwICAgICAgMDAwICAgICBcbiMjI1xuXG57IGNoaWxkcCwgc2xhc2gsIGVtcHR5LCB2YWxpZCwgXyB9ID0gcmVxdWlyZSAna3hrJ1xuXG5maXhQYXRoID0gKHApIC0+XG4gICAgXG4gICAgcCA9IHAudHJpbSgpXG4gICAgaWYgcFswXSA9PSBwWzJdID09ICcvJ1xuICAgICAgICBwID0gcFsxXS50b1VwcGVyQ2FzZSgpICsgJzonICsgcC5zbGljZSAyXG4gICAgcmV0dXJuIHNsYXNoLnJlc29sdmUgcCAgICBcblxuZ2l0Q21kICA9ICdnaXQgcmV2LXBhcnNlIC0tc2hvdy10b3BsZXZlbCdcbmdpdE9wdCA9IChjd2QpIC0+IGN3ZDpjd2QsIGVuY29kaW5nOid1dGY4JyBzdGRpbzpbJ3BpcGUnICdwaXBlJyAnaWdub3JlJ11cbiAgICBcbnJvb3QgPSAocHRoLCBjYikgLT5cblxuICAgIHB0aCA9IHNsYXNoLnJlc29sdmUgcHRoXG4gICAgXG4gICAgaWYgXy5pc0Z1bmN0aW9uIGNiXG4gICAgICAgIFxuICAgICAgICBpZiBlbXB0eSBwdGhcbiAgICAgICAgICAgIGNiICcnXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHB0aCA9IHNsYXNoLnVuc2xhc2ggcHRoXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNsYXNoLmRpckV4aXN0cyBwdGgsIChzdGF0KSAtPlxuICAgICAgICAgICAgICAgIHB0aCA9IGlmIHZhbGlkKHN0YXQpIHRoZW4gc2xhc2gudW5zbGFzaChwdGgpIGVsc2Ugc2xhc2guZGlyKHB0aClcbiAgICAgICAgICAgICAgICBpZiBlbXB0eSBwdGhcbiAgICAgICAgICAgICAgICAgICAgY2IgJycgXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBjaGlsZHAuZXhlYyBnaXRDbWQsIGdpdE9wdChwdGgpLCAoZXJyLHIpIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiB2YWxpZCBlcnJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYiAnJyBcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYiBmaXhQYXRoIHJcbiAgICBlbHNlXG4gICAgXG4gICAgICAgIHJldHVybiAnJyBpZiBlbXB0eSBwdGhcbiAgICAgICAgXG4gICAgICAgIHRyeVxuICAgICAgICAgICAgcHRoID0gaWYgc2xhc2guZGlyRXhpc3RzKHB0aCkgdGhlbiBzbGFzaC51bnNsYXNoKHB0aCkgZWxzZSBzbGFzaC5kaXIocHRoKVxuICAgICAgICAgICAgcmV0dXJuICcnIGlmIGVtcHR5IHB0aFxuICAgICAgICAgICAgcmV0dXJuIGZpeFBhdGggY2hpbGRwLmV4ZWNTeW5jIGdpdENtZCwgZ2l0T3B0KHB0aClcbiAgICAgICAgICAgIFxuICAgICAgICBjYXRjaCBlcnJcbiAgICAgICAgICAgIHJldHVybiAnJ1xuXG4jIDAwICAgICAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwMDAwMDAgIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICBcbiMgMDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAwMDAwMDAwICAgXG4jIDAwMCAwIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIFxuIyAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAgMDAwMDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwICBcblxuaWYgbW9kdWxlLnBhcmVudFxuICAgIFxuICAgIG1vZHVsZS5leHBvcnRzID0gcm9vdFxuICAgIFxuZWxzZVxuICAgIGlmIG5vdCBlbXB0eSBwcm9jZXNzLmFyZ3ZbMl1cbiAgICAgICAgZGlyID0gc2xhc2gucmVzb2x2ZSBwcm9jZXNzLmFyZ3ZbMl1cbiAgICBlbHNlXG4gICAgICAgIGRpciA9IHByb2Nlc3MuY3dkKClcbiAgICAgICAgXG4gICAgbG9nIHJvb3QgZGlyXG4gICAgIl19
//# sourceURL=../../coffee/git/root.coffee