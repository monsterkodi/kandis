// koffee 1.4.0

/*
 0000000  000000000   0000000   000000000  000   000   0000000  
000          000     000   000     000     000   000  000       
0000000      000     000000000     000     000   000  0000000   
     000     000     000   000     000     000   000       000  
0000000      000     000   000     000      0000000   0000000
 */
var _, childp, dir, empty, gitCmd, gitOpt, parseResult, ref, slash, status, valid;

ref = require('kxk'), childp = ref.childp, slash = ref.slash, empty = ref.empty, valid = ref.valid, _ = ref._;

gitCmd = 'git status --porcelain';

gitOpt = function(gitDir) {
    return {
        encoding: 'utf8',
        cwd: slash.unslash(gitDir),
        stdio: ['pipe', 'pipe', 'ignore']
    };
};

status = function(gitDir, cb) {
    var err, r;
    if (_.isFunction(cb)) {
        if (empty(gitDir)) {
            return cb({});
        } else {
            try {
                return childp.exec(gitCmd, gitOpt(gitDir), function(err, r) {
                    if (valid(err)) {
                        return cb({});
                    } else {
                        return cb(parseResult(gitDir, r));
                    }
                });
            } catch (error) {
                err = error;
                return cb({});
            }
        }
    } else {
        if (empty(gitDir)) {
            return {};
        }
        try {
            r = childp.execSync(gitCmd, gitOpt(gitDir));
        } catch (error) {
            err = error;
            return {};
        }
        return parseResult(gitDir, r);
    }
};

parseResult = function(gitDir, result) {
    var dirSet, file, header, info, line, lines, rel;
    if (result.startsWith('fatal:')) {
        return {};
    }
    lines = result.split('\n');
    info = {
        gitDir: gitDir,
        changed: [],
        deleted: [],
        added: []
    };
    dirSet = new Set;
    while (line = lines.shift()) {
        rel = line.slice(3);
        file = slash.join(gitDir, line.slice(3));
        while ((rel = slash.dir(rel)) !== '') {
            dirSet.add(rel);
        }
        header = line.slice(0, 2);
        switch (header) {
            case ' D':
                info.deleted.push(file);
                break;
            case ' M':
                info.changed.push(file);
                break;
            case '??':
                info.added.push(file);
        }
    }
    info.dirs = Array.from(dirSet).map(function(d) {
        return slash.join(gitDir, d);
    });
    return info;
};

if (module.parent) {
    module.exports = status;
} else {
    if (!empty(process.argv[2])) {
        dir = slash.resolve(process.argv[2]);
    } else {
        dir = process.cwd();
    }
    console.log(status(dir));
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHVzLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQTs7QUFRQSxNQUFxQyxPQUFBLENBQVEsS0FBUixDQUFyQyxFQUFFLG1CQUFGLEVBQVUsaUJBQVYsRUFBaUIsaUJBQWpCLEVBQXdCLGlCQUF4QixFQUErQjs7QUFFL0IsTUFBQSxHQUFTOztBQUNULE1BQUEsR0FBUyxTQUFDLE1BQUQ7V0FBWTtRQUFBLFFBQUEsRUFBVSxNQUFWO1FBQWlCLEdBQUEsRUFBSyxLQUFLLENBQUMsT0FBTixDQUFjLE1BQWQsQ0FBdEI7UUFBNkMsS0FBQSxFQUFNLENBQUMsTUFBRCxFQUFRLE1BQVIsRUFBZSxRQUFmLENBQW5EOztBQUFaOztBQUVULE1BQUEsR0FBUyxTQUFDLE1BQUQsRUFBUyxFQUFUO0FBRUwsUUFBQTtJQUFBLElBQUcsQ0FBQyxDQUFDLFVBQUYsQ0FBYSxFQUFiLENBQUg7UUFFSSxJQUFHLEtBQUEsQ0FBTSxNQUFOLENBQUg7bUJBQ0ksRUFBQSxDQUFHLEVBQUgsRUFESjtTQUFBLE1BQUE7QUFHSTt1QkFDSSxNQUFNLENBQUMsSUFBUCxDQUFZLE1BQVosRUFBb0IsTUFBQSxDQUFPLE1BQVAsQ0FBcEIsRUFBb0MsU0FBQyxHQUFELEVBQUssQ0FBTDtvQkFDaEMsSUFBRyxLQUFBLENBQU0sR0FBTixDQUFIOytCQUNJLEVBQUEsQ0FBRyxFQUFILEVBREo7cUJBQUEsTUFBQTsrQkFHSSxFQUFBLENBQUcsV0FBQSxDQUFZLE1BQVosRUFBb0IsQ0FBcEIsQ0FBSCxFQUhKOztnQkFEZ0MsQ0FBcEMsRUFESjthQUFBLGFBQUE7Z0JBTU07dUJBQ0YsRUFBQSxDQUFHLEVBQUgsRUFQSjthQUhKO1NBRko7S0FBQSxNQUFBO1FBY0ksSUFBYSxLQUFBLENBQU0sTUFBTixDQUFiO0FBQUEsbUJBQU8sR0FBUDs7QUFDQTtZQUNJLENBQUEsR0FBSSxNQUFNLENBQUMsUUFBUCxDQUFnQixNQUFoQixFQUF3QixNQUFBLENBQU8sTUFBUCxDQUF4QixFQURSO1NBQUEsYUFBQTtZQUVNO0FBQ0YsbUJBQU8sR0FIWDs7ZUFLQSxXQUFBLENBQVksTUFBWixFQUFvQixDQUFwQixFQXBCSjs7QUFGSzs7QUE4QlQsV0FBQSxHQUFjLFNBQUMsTUFBRCxFQUFTLE1BQVQ7QUFFVixRQUFBO0lBQUEsSUFBRyxNQUFNLENBQUMsVUFBUCxDQUFrQixRQUFsQixDQUFIO0FBQW1DLGVBQU8sR0FBMUM7O0lBRUEsS0FBQSxHQUFRLE1BQU0sQ0FBQyxLQUFQLENBQWEsSUFBYjtJQUVSLElBQUEsR0FDSTtRQUFBLE1BQUEsRUFBUyxNQUFUO1FBQ0EsT0FBQSxFQUFTLEVBRFQ7UUFFQSxPQUFBLEVBQVMsRUFGVDtRQUdBLEtBQUEsRUFBUyxFQUhUOztJQUtKLE1BQUEsR0FBUyxJQUFJO0FBRWIsV0FBTSxJQUFBLEdBQU8sS0FBSyxDQUFDLEtBQU4sQ0FBQSxDQUFiO1FBQ0ksR0FBQSxHQUFTLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBWDtRQUNULElBQUEsR0FBUyxLQUFLLENBQUMsSUFBTixDQUFXLE1BQVgsRUFBbUIsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFYLENBQW5CO0FBQ1QsZUFBTSxDQUFDLEdBQUEsR0FBTSxLQUFLLENBQUMsR0FBTixDQUFVLEdBQVYsQ0FBUCxDQUFBLEtBQXlCLEVBQS9CO1lBQ0ksTUFBTSxDQUFDLEdBQVAsQ0FBVyxHQUFYO1FBREo7UUFHQSxNQUFBLEdBQVMsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFYLEVBQWEsQ0FBYjtBQUNULGdCQUFPLE1BQVA7QUFBQSxpQkFDUyxJQURUO2dCQUNtQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQWIsQ0FBa0IsSUFBbEI7QUFBVjtBQURULGlCQUVTLElBRlQ7Z0JBRW1CLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBYixDQUFrQixJQUFsQjtBQUFWO0FBRlQsaUJBR1MsSUFIVDtnQkFHbUIsSUFBSSxDQUFDLEtBQU8sQ0FBQyxJQUFiLENBQWtCLElBQWxCO0FBSG5CO0lBUEo7SUFZQSxJQUFJLENBQUMsSUFBTCxHQUFZLEtBQUssQ0FBQyxJQUFOLENBQVcsTUFBWCxDQUFrQixDQUFDLEdBQW5CLENBQXVCLFNBQUMsQ0FBRDtlQUFPLEtBQUssQ0FBQyxJQUFOLENBQVcsTUFBWCxFQUFtQixDQUFuQjtJQUFQLENBQXZCO1dBQ1o7QUEzQlU7O0FBbUNkLElBQUcsTUFBTSxDQUFDLE1BQVY7SUFFSSxNQUFNLENBQUMsT0FBUCxHQUFpQixPQUZyQjtDQUFBLE1BQUE7SUFLSSxJQUFHLENBQUksS0FBQSxDQUFNLE9BQU8sQ0FBQyxJQUFLLENBQUEsQ0FBQSxDQUFuQixDQUFQO1FBQ0ksR0FBQSxHQUFNLEtBQUssQ0FBQyxPQUFOLENBQWMsT0FBTyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQTNCLEVBRFY7S0FBQSxNQUFBO1FBR0ksR0FBQSxHQUFNLE9BQU8sQ0FBQyxHQUFSLENBQUEsRUFIVjs7SUFLQSxPQUFBLENBQUEsR0FBQSxDQUFJLE1BQUEsQ0FBTyxHQUFQLENBQUosRUFWSiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuIDAwMDAwMDAgIDAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgIFxuMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIFxuMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwMDAwMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIFxuICAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgICAgICAwMDAgIFxuMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwICAgMDAwICAgICAwMDAgICAgICAwMDAwMDAwICAgMDAwMDAwMCAgIFxuIyMjXG5cbnsgY2hpbGRwLCBzbGFzaCwgZW1wdHksIHZhbGlkLCBfIH0gPSByZXF1aXJlICdreGsnXG5cbmdpdENtZCA9ICdnaXQgc3RhdHVzIC0tcG9yY2VsYWluJ1xuZ2l0T3B0ID0gKGdpdERpcikgLT4gZW5jb2Rpbmc6wqAndXRmOCcgY3dkOiBzbGFzaC51bnNsYXNoKGdpdERpciksIHN0ZGlvOlsncGlwZScgJ3BpcGUnICdpZ25vcmUnXVxuXG5zdGF0dXMgPSAoZ2l0RGlyLCBjYikgLT5cblxuICAgIGlmIF8uaXNGdW5jdGlvbiBjYlxuICAgICAgICBcbiAgICAgICAgaWYgZW1wdHkgZ2l0RGlyXG4gICAgICAgICAgICBjYiB7fVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0cnlcbiAgICAgICAgICAgICAgICBjaGlsZHAuZXhlYyBnaXRDbWQsIGdpdE9wdChnaXREaXIpLCAoZXJyLHIpIC0+XG4gICAgICAgICAgICAgICAgICAgIGlmIHZhbGlkIGVyclxuICAgICAgICAgICAgICAgICAgICAgICAgY2Ige31cbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgY2IgcGFyc2VSZXN1bHQgZ2l0RGlyLCByXG4gICAgICAgICAgICBjYXRjaCBlcnJcbiAgICAgICAgICAgICAgICBjYiB7fVxuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIHt9IGlmIGVtcHR5IGdpdERpclxuICAgICAgICB0cnlcbiAgICAgICAgICAgIHIgPSBjaGlsZHAuZXhlY1N5bmMgZ2l0Q21kLCBnaXRPcHQgZ2l0RGlyXG4gICAgICAgIGNhdGNoIGVyclxuICAgICAgICAgICAgcmV0dXJuIHt9XG4gICAgICAgIFxuICAgICAgICBwYXJzZVJlc3VsdCBnaXREaXIsIHJcbiAgICBcbiMgMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMDAwMDAwICBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICBcbiMgMDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICBcbiMgMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAwMDAgIDAwMCAgICAgICBcbiMgMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAwICBcblxucGFyc2VSZXN1bHQgPSAoZ2l0RGlyLCByZXN1bHQpIC0+XG4gICAgXG4gICAgaWYgcmVzdWx0LnN0YXJ0c1dpdGggJ2ZhdGFsOicgdGhlbiByZXR1cm4ge31cbiAgICBcbiAgICBsaW5lcyA9IHJlc3VsdC5zcGxpdCAnXFxuJ1xuXG4gICAgaW5mbyA9IFxuICAgICAgICBnaXREaXI6ICBnaXREaXJcbiAgICAgICAgY2hhbmdlZDogW11cbiAgICAgICAgZGVsZXRlZDogW11cbiAgICAgICAgYWRkZWQ6ICAgW11cbiAgICAgICAgXG4gICAgZGlyU2V0ID0gbmV3IFNldFxuICAgIFxuICAgIHdoaWxlIGxpbmUgPSBsaW5lcy5zaGlmdCgpXG4gICAgICAgIHJlbCAgICA9IGxpbmUuc2xpY2UgM1xuICAgICAgICBmaWxlICAgPSBzbGFzaC5qb2luIGdpdERpciwgbGluZS5zbGljZSAzXG4gICAgICAgIHdoaWxlIChyZWwgPSBzbGFzaC5kaXIgcmVsKSAhPSAnJ1xuICAgICAgICAgICAgZGlyU2V0LmFkZCByZWxcbiAgICAgICAgICAgIFxuICAgICAgICBoZWFkZXIgPSBsaW5lLnNsaWNlIDAsMlxuICAgICAgICBzd2l0Y2ggaGVhZGVyXG4gICAgICAgICAgICB3aGVuICcgRCcgdGhlbiBpbmZvLmRlbGV0ZWQucHVzaCBmaWxlXG4gICAgICAgICAgICB3aGVuICcgTScgdGhlbiBpbmZvLmNoYW5nZWQucHVzaCBmaWxlXG4gICAgICAgICAgICB3aGVuICc/PycgdGhlbiBpbmZvLmFkZGVkICAucHVzaCBmaWxlXG4gICAgICAgICAgICBcbiAgICBpbmZvLmRpcnMgPSBBcnJheS5mcm9tKGRpclNldCkubWFwIChkKSAtPiBzbGFzaC5qb2luIGdpdERpciwgZFxuICAgIGluZm9cblxuIyAwMCAgICAgMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMDAwMDAwICBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAwMDAgICAgICAgXG4jIDAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwMDAwMCAgIFxuIyAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICBcbiMgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgIDAwMDAwMDAgICAwMDAwMDAwICAwMDAwMDAwMCAgXG5cbmlmIG1vZHVsZS5wYXJlbnRcbiAgICBcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHN0YXR1c1xuICAgIFxuZWxzZVxuICAgIGlmIG5vdCBlbXB0eSBwcm9jZXNzLmFyZ3ZbMl1cbiAgICAgICAgZGlyID0gc2xhc2gucmVzb2x2ZSBwcm9jZXNzLmFyZ3ZbMl1cbiAgICBlbHNlXG4gICAgICAgIGRpciA9IHByb2Nlc3MuY3dkKClcbiAgICBcbiAgICBsb2cgc3RhdHVzIGRpclxuICAgICJdfQ==
//# sourceURL=../../coffee/git/status.coffee