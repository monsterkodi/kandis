// koffee 1.14.0

/*
 0000000  00000000   0000000   00000000    0000000  000   000
000       000       000   000  000   000  000       000   000
0000000   0000000   000000000  0000000    000       000000000
     000  000       000   000  000   000  000       000   000
0000000   00000000  000   000  000   000   0000000  000   000
 */
var Command, FileSearcher, Search, Syntax, _, fs, kerror, klor, matchr, post, ref, slash, stream, walker,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf;

ref = require('kxk'), _ = ref._, fs = ref.fs, kerror = ref.kerror, klor = ref.klor, matchr = ref.matchr, post = ref.post, slash = ref.slash;

walker = require('../tools/walker');

Syntax = require('../editor/syntax');

Command = require('../commandline/command');

stream = require('stream');

Search = (function(superClass) {
    extend(Search, superClass);

    function Search(commandline) {
        this.onMetaClick = bind(this.onMetaClick, this);
        this.searchInFile = bind(this.searchInFile, this);
        Search.__super__.constructor.call(this, commandline);
        this.names = ['search', 'Search', '/search/', '/Search/'];
    }

    Search.prototype.historyKey = function() {
        return this.name;
    };

    Search.prototype.execute = function(command) {
        var file, ref1, rngs;
        if (!command.length) {
            return;
        }
        switch (this.name) {
            case '/search/':
            case '/Search/':
                if (command === '^' || command === '$' || command === '.') {
                    return;
                }
                rngs = matchr.ranges(command, '  ');
                if (rngs.length === 2) {
                    return;
                }
        }
        command = Search.__super__.execute.call(this, command);
        file = (ref1 = window.editor.currentFile) != null ? ref1 : _.first(_.keys(post.get('indexer', 'files')));
        if (file == null) {
            return;
        }
        window.terminal.clear();
        this.startSearchInFiles({
            text: command,
            name: this.name,
            file: slash.path(file)
        });
        return {
            focus: 'terminal',
            show: 'terminal',
            text: command,
            select: true
        };
    };

    Search.prototype.startSearchInFiles = function(opt) {
        var dir, terminal;
        terminal = window.terminal;
        terminal.appendMeta({
            clss: 'searchHeader',
            diss: Syntax.dissForTextAndSyntax("▸ Search for '" + opt.text + "':", 'ko')
        });
        terminal.appendMeta({
            clss: 'spacer'
        });
        terminal.singleCursorAtPos([0, terminal.numLines() - 2]);
        dir = slash.pkg(slash.dir(opt.file));
        if (dir != null) {
            dir;
        } else {
            dir = slash.dir(opt.file);
        }
        this.walker = new walker({
            root: dir,
            maxDepth: 12,
            maxFiles: 5000,
            includeDirs: false,
            file: (function(_this) {
                return function(f, stat) {
                    return _this.searchInFile(opt, slash.path(f));
                };
            })(this)
        });
        this.walker.cfg.ignore.push('js');
        this.walker.cfg.ignore.push('lib');
        return this.walker.start();
    };

    Search.prototype.searchInFile = function(opt, file) {
        stream = fs.createReadStream(file, {
            encoding: 'utf8'
        });
        return stream.pipe(new FileSearcher(this, opt, file));
    };

    Search.prototype.onMetaClick = function(meta, event) {
        var command, file, href, split;
        href = meta[2].href;
        if (href.startsWith('>')) {
            split = href.split('>');
            if (window.commandline.commands[split[1]] != null) {
                command = window.commandline.commands[split[1]];
                window.commandline.startCommand(split[1]);
                window.commandline.setText(split[2]);
                command.execute(split[2]);
            }
        } else {
            file = href + ':' + window.terminal.posForEvent(event)[0];
            post.emit('openFiles', [file], {
                newTab: event.metaKey
            });
        }
        return 'unhandled';
    };

    return Search;

})(Command);

FileSearcher = (function(superClass) {
    extend(FileSearcher, superClass);

    function FileSearcher(command1, opt1, file1) {
        var extn;
        this.command = command1;
        this.opt = opt1;
        this.file = file1;
        this.end = bind(this.end, this);
        FileSearcher.__super__.constructor.call(this);
        this.line = 0;
        this.flags = '';
        this.patterns = (function() {
            switch (this.opt.name) {
                case 'search':
                    return [[new RegExp(_.escapeRegExp(this.opt.text), 'i'), 'found']];
                case 'Search':
                    return [[new RegExp(_.escapeRegExp(this.opt.text)), 'found']];
                case '/search/':
                    this.flags = 'i';
                    return this.opt.text;
                case '/Search/':
                    return this.opt.text;
                default:
                    kerror("commands/search FileSearcher -- unhandled '" + this.opt.name + "' command:", this.command.name, 'opt:', this.opt, 'file:', this.file);
                    return [[new RegExp(_.escapeRegExp(this.opt.text), 'i'), 'found']];
            }
        }).call(this);
        this.found = [];
        extn = slash.ext(this.file);
        if (indexOf.call(Syntax.syntaxNames, extn) >= 0) {
            this.syntaxName = extn;
        } else {
            this.syntaxName = null;
        }
    }

    FileSearcher.prototype.write = function(chunk, encoding, cb) {
        var i, l, len, lines, rngs;
        lines = chunk.split('\n');
        if (this.syntaxName == null) {
            this.syntaxName = Syntax.shebang(lines[0]);
        }
        for (i = 0, len = lines.length; i < len; i++) {
            l = lines[i];
            this.line += 1;
            rngs = matchr.ranges(this.patterns, l, this.flags);
            if (rngs.length) {
                this.found.push([this.line, l, rngs]);
            }
        }
        return true;
    };

    FileSearcher.prototype.end = function(chunk, encoding, cb) {
        var dss, f, fi, i, meta, ref1, regions, terminal;
        if (this.found.length) {
            terminal = window.terminal;
            meta = {
                diss: Syntax.dissForTextAndSyntax("" + (slash.tilde(this.file)), 'ko'),
                href: this.file,
                clss: 'gitInfoFile',
                click: this.command.onMetaClick,
                line: '◼'
            };
            terminal.appendMeta(meta);
            terminal.appendMeta({
                clss: 'spacer'
            });
            for (fi = i = 0, ref1 = this.found.length; 0 <= ref1 ? i < ref1 : i > ref1; fi = 0 <= ref1 ? ++i : --i) {
                f = this.found[fi];
                regions = klor.dissect([f[1]], this.syntaxName)[0];
                dss = matchr.merge(regions, matchr.dissect(f[2]));
                meta = {
                    diss: dss,
                    href: this.file + ":" + f[0],
                    clss: 'searchResult',
                    click: this.command.onMetaClick
                };
                if (fi && this.found[fi - 1][0] !== f[0] - 1) {
                    terminal.appendMeta({
                        clss: 'spacer'
                    });
                }
                terminal.appendMeta(meta);
                post.emit('search-result', meta);
            }
            terminal.appendMeta({
                clss: 'spacer'
            });
            return terminal.scroll.cursorToTop();
        }
    };

    return FileSearcher;

})(stream.Writable);

module.exports = Search;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/commands/search.coffee