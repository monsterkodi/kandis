// koffee 0.56.0

/*
00000000  000  000   000  0000000  
000       000  0000  000  000   000
000000    000  000 0 000  000   000
000       000  000  0000  000   000
000       000  000   000  0000000
 */
var Command, Find, empty, os, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

ref = require('kxk'), empty = ref.empty, os = ref.os;

Command = require('../commandline/command');

Find = (function(superClass) {
    extend(Find, superClass);

    function Find(commandline) {
        Find.__super__.constructor.call(this, commandline);
        this.types = ['str', 'Str', 'reg', 'Reg', 'fuzzy', 'glob'];
        this.names = ['find', 'Find', '/find/', '/Find/', 'fiZd', 'f*nd'];
    }

    Find.prototype.historyKey = function() {
        return this.name;
    };

    Find.prototype.start = function(name) {
        var editor;
        if (name === 'find') {
            editor = this.receivingEditor();
            editor.highlightForFind();
            window.split.focus('commandline');
            if (this.getText() !== editor.textOfHighlight() && !empty(editor.textOfHighlight())) {
                this.setText(editor.textOfHighlight());
            }
        }
        this.type = this.types[this.names.indexOf(name)];
        return Find.__super__.start.call(this, name);
    };

    Find.prototype.cancel = function() {
        this.hideList();
        return {
            focus: this.receiver,
            show: 'editor'
        };
    };

    Find.prototype.changed = function(command) {
        var ref1, ref2;
        Find.__super__.changed.call(this, command);
        if (command.length) {
            if (((ref1 = this.type) === 'reg' || ref1 === 'Reg') && ((ref2 = command.trim()) === '^' || ref2 === '$' || ref2 === '^$' || ref2 === '.' || ref2 === '?' || ref2 === '\\' || ref2 === '\\b')) {
                return window.textEditor.clearHighlights();
            } else if (!command.trim().startsWith('|') && !command.trim().endsWith('|')) {
                return window.textEditor.highlightText(command, {
                    type: this.type,
                    select: 'keep'
                });
            }
        } else {
            return window.textEditor.clearHighlights();
        }
    };

    Find.prototype.execute = function(command) {
        command = Find.__super__.execute.call(this, command);
        window.textEditor.highlightText(command, {
            type: this.type,
            select: 'after'
        });
        return {
            text: command,
            select: true
        };
    };

    Find.prototype.handleModKeyComboEvent = function(mod, key, combo, event) {
        switch (combo) {
            case 'shift+enter':
            case 'command+shift+g':
                window.textEditor.highlightText(this.getText(), {
                    type: this.type,
                    select: 'before'
                });
                return;
            case 'command+g':
                this.execute(this.getText());
                return;
            case 'tab':
                window.textEditor.focus();
                return;
        }
        return Find.__super__.handleModKeyComboEvent.call(this, mod, key, combo, event);
    };

    return Find;

})(Command);

module.exports = Find;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/commands/find.coffee