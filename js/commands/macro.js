// koffee 1.4.0

/*
00     00   0000000    0000000  00000000    0000000
000   000  000   000  000       000   000  000   000
000000000  000000000  000       0000000    000   000
000 0 000  000   000  000       000   000  000   000
000   000  000   000   0000000  000   000   0000000
 */
var Command, GitInfo, Macro, Transform, _, args, empty, fs, indexer, kerror, post, prefs, ref, req, reversed, salt, slash, syntax, valid,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf;

ref = require('kxk'), post = ref.post, reversed = ref.reversed, empty = ref.empty, prefs = ref.prefs, slash = ref.slash, valid = ref.valid, args = ref.args, fs = ref.fs, kerror = ref.kerror, _ = ref._;

indexer = require('../main/indexer');

salt = require('../tools/salt');

req = require('../tools/req');

GitInfo = require('../win/gitinfo');

Command = require('../commandline/command');

syntax = require('../editor/syntax');

Transform = require('../editor/actions/transform');

Macro = (function(superClass) {
    extend(Macro, superClass);

    Macro.macroNames = ['clean', 'help', 'dbg', 'class', 'req', 'inv', 'blink', 'color', 'fps', 'cwd', 'git', 'unix'];

    function Macro(commandline) {
        Macro.__super__.constructor.call(this, commandline);
        this.macros = Macro.macroNames;
        this.macros = this.macros.concat(Transform.transformNames);
        this.names = ['macro'];
    }

    Macro.prototype.start = function(name) {
        var text;
        Macro.__super__.start.call(this, name);
        text = this.last();
        if (!(text != null ? text.length : void 0)) {
            text = 'dbg';
        }
        return {
            text: text,
            select: true
        };
    };

    Macro.prototype.listItems = function() {
        var i, items, j, len, results;
        items = _.uniq(_.concat(reversed(this.history), this.macros));
        results = [];
        for (j = 0, len = items.length; j < len; j++) {
            i = items[j];
            results.push({
                text: i,
                line: indexOf.call(this.macros, i) >= 0 && '◼' || '◆',
                type: 'macro'
            });
        }
        return results;
    };

    Macro.prototype.execute = function(command) {
        var cleaned, clss, cmmd, cp, dir, editor, file, indent, insert, j, k, l, len, len1, li, line, lines, lst, m, n, num, ref1, ref2, ref3, ref4, ref5, s, step, t, terminal, text, ti, words, wordsInArgsOrCursorsOrSelection;
        if (empty(command)) {
            return kerror('no command!');
        }
        command = Macro.__super__.execute.call(this, command);
        editor = window.editor;
        cp = editor.cursorPos();
        args = command.split(/\s+/);
        cmmd = args.shift();
        wordsInArgsOrCursorsOrSelection = function(args, opt) {
            var cw, ws;
            if (args.length) {
                return args;
            } else {
                cw = editor.wordsAtCursors(positionsNotInRanges(editor.cursors(), editor.selections()), opt);
                ws = _.uniq(cw.concat(editor.textsInRanges(editor.selections())));
                return ws.filter(function(w) {
                    return w.trim().length;
                });
            }
        };
        switch (cmmd) {
            case 'inv':
                window.textEditor.toggleInvisibles();
                break;
            case 'blink':
                editor.toggleBlink();
                if (prefs.get('blink')) {
                    this.commandline.startBlink();
                } else {
                    this.commandline.stopBlink();
                }
                break;
            case 'color':
                editor.togglePigments();
                break;
            case 'fps':
                if ((ref1 = window.fps) != null) {
                    ref1.toggle();
                }
                break;
            case 'cwd':
                if ((ref2 = window.cwd) != null) {
                    ref2.toggle();
                }
                break;
            case 'git':
                GitInfo.start();
                break;
            case 'err':
                post.toMain('throwError');
                throw new Error('err');
                break;
            case 'help':
                terminal = window.terminal;
                text = fs.readFileSync(__dirname + "/../../bin/cheet.noon", {
                    encoding: 'utf8'
                });
                terminal.clear();
                ref3 = text.split('\n');
                for (j = 0, len = ref3.length; j < len; j++) {
                    l = ref3[j];
                    terminal.appendLineDiss(l, syntax.dissForTextAndSyntax(l, 'noon'));
                }
                terminal.scroll.cursorToTop(1);
                window.split["do"]('show terminal');
                break;
            case 'req':
                if (slash.ext(editor.currentFile) !== 'coffee') {
                    return;
                }
                words = [];
                lines = req(editor.currentFile, editor.lines(), words, editor);
                if (valid(lines)) {
                    editor["do"].start();
                    for (k = 0, len1 = lines.length; k < len1; k++) {
                        line = lines[k];
                        if (line.op === 'insert') {
                            editor["do"].insert(line.index, line.text);
                        } else {
                            editor["do"].change(line.index, line.text);
                        }
                    }
                    editor.moveCursorsDown(false, lines.length);
                    editor["do"].end();
                    return {
                        "do": "focus editor"
                    };
                }
                break;
            case 'dbg':
                li = cp[1];
                indent = editor.indentStringForLineAtIndex(li);
                if (!editor.isCursorInIndent() && !editor.isCursorInLastLine()) {
                    li += 1;
                }
                insert = indent + 'log "';
                insert += editor.funcInfoAtLineIndex(li);
                lst = args.length && parseInt(args[0]) || 0;
                if (lst) {
                    args.shift();
                }
                words = wordsInArgsOrCursorsOrSelection(args, {
                    include: "#@.-"
                });
                for (ti = m = 0, ref4 = words.length - lst; 0 <= ref4 ? m < ref4 : m > ref4; ti = 0 <= ref4 ? ++m : --m) {
                    t = words[ti];
                    insert += t + ":\#{kstr " + t + "} ";
                }
                insert = insert.trimRight();
                insert += '"';
                if (lst) {
                    insert += ((function() {
                        var n, ref5, ref6, results;
                        results = [];
                        for (ti = n = ref5 = words.length - lst, ref6 = words.length; ref5 <= ref6 ? n < ref6 : n > ref6; ti = ref5 <= ref6 ? ++n : --n) {
                            results.push(", kstr(" + words[ti] + ")");
                        }
                        return results;
                    })()).join('');
                }
                editor["do"].start();
                editor["do"].insert(li, insert);
                editor.singleCursorAtPos([editor.line(li).length, li]);
                editor["do"].end();
                ({
                    focus: editor.name
                });
                break;
            case 'class':
                clss = args.length && args[0] || _.last(editor.textsInRanges(editor.selections()));
                if (clss != null) {
                    clss;
                } else {
                    clss = 'Class';
                }
                dir = (editor.currentFile != null) && slash.dir(editor.currentFile) || process.cwd();
                file = slash.join(dir, clss.toLowerCase() + '.coffee');
                if (slash.fileExists(file)) {
                    return {
                        text: "file " + file + " exists!"
                    };
                }
                text = "###\n";
                text += ((function() {
                    var len2, n, ref5, results;
                    ref5 = salt(clss).split('\n');
                    results = [];
                    for (n = 0, len2 = ref5.length; n < len2; n++) {
                        s = ref5[n];
                        results.push(s);
                    }
                    return results;
                })()).join('\n');
                text += "\n###\n";
                text += "\nclass " + clss + "\n\n    @: () ->\n\n\nmodule.exports = " + clss + "\n";
                fs.writeFile(file, text, {
                    encoding: 'utf8'
                }, function(err) {
                    if (err != null) {
                        kerror('writing class skeleton failed', err);
                        return;
                    }
                    return post.emit('newTabWithFile', file);
                });
                return {
                    focus: editor.name
                };
            case 'clean':
                editor["do"].start();
                for (li = n = 0, ref5 = editor.numLines(); 0 <= ref5 ? n < ref5 : n > ref5; li = 0 <= ref5 ? ++n : --n) {
                    line = editor.line(li);
                    cleaned = line.trimRight();
                    if (line !== cleaned) {
                        editor["do"].change(li, cleaned);
                    }
                }
                editor["do"].end();
                break;
            case 'unix':
                editor.newlineCharacters = '\n';
                post.emit('saveFile');
                break;
            case 'header':
                editor.toggleHeader();
                break;
            case 'col':
                num = args.length > 0 && parseInt(args[0]) || 10;
                step = args.length > 1 && parseInt(args[1]) || 1;
                editor.cursorColumns(num, step);
                break;
            case 'line':
                num = args.length > 0 && parseInt(args[0]) || 10;
                step = args.length > 1 && parseInt(args[1]) || 1;
                editor.cursorLines(num, step);
                break;
            default:
                if (Transform.transformNames && indexOf.call(Transform.transformNames, cmmd) >= 0) {
                    window.textEditor.Transform["do"].apply(null, [window.textEditor, cmmd].concat(args));
                } else {
                    kerror('unhandled macro', cmmd, Transform.transformNames);
                    if (_.last(this.history) === command.trim()) {
                        this.history.pop();
                    }
                }
        }
        return {
            select: true
        };
    };

    return Macro;

})(Command);

module.exports = Macro;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/commands/macro.coffee