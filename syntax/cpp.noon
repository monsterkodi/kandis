
#  0000000  00000000   00000000         000   000
# 000       000   000  000   000        000   000
# 000       00000000   00000000         000000000
# 000       000        000              000   000
#  0000000  000        000              000   000

ko
    extnames                 . cpp . cxx . cc . c . hpp . h

[\<\>\+\-\=\/\*]               math

!=                             math

# braces

[\(\)\[\]]                     bracket
[\{\}]                         bracket.marker

# include

# (#)(include)\s+([\<\"])(.*)([\>\"])   . macro.marker . macro.define . string.marker.require . string.require . string.marker.require

# class

(class)\s+(\w+)              . class.keyword . class

# bool

true                           bool.true
false                          bool.false 
([\!])\w+                    . operator.negate

# punctuation

[\,\.\:\/\&\*]                 punctuation
[\;]                           punctuation.marker
(\&\&|\|\|)                    keyword

# null

NULL|false                     keyword.null

# .property

\.(\s*\w+)                     property
\:\:(\w+)                      property

(\w+)(\:\:)                  . namespace . namespace.marker

\:\:(iterator|pair|string)   . namespace.member

# class construction

new\s+(\w+)                    class.callee
(\w+)\s*\=\s*new\s             class.object

^(\w+)(\:\:)(\w+)\s*\(             . class . class.marker . class.method.definition
^\S+[^\:]*\s(\w+)(\:\:)(\w+)\s*\(  . class . class.marker . class.method.definition

(?!\-\>|\.)([\w]+)\s*\(              function.call
(?!\-\>|\.)([\w]+)(?:\<\w+\>)\s*\(   function.call
(?:\-\>|\.)\s*([^\s\(]+)\s*\(        method.call

(\<)([^\<\>\-]+)(\>)         . template.marker . template . template.marker

# keywords
this                           keyword.this
(^|\s)(if|else|then|for|using|namespace|while|do|return|break|continue|new|switch|case|const_cast|static_cast|dynamic_cast|reinterpret_cast|public:?|protected:?|private:?)([\;\s]|$)  . none . keyword . none
    
\b(void|bool|int|uint|auto|float|double|long|unsigned|virtual|typedef|default|enum|struct)\b   keyword
\b(const|static)\b                     . keyword.marker
\b(u?int8|u?int16|u?int32|u?int64)\b   . keyword

# macros

(\#)(else|endif|include)                          . macro.marker . macro.define
(\#)(define|pragma|ifdef|ifndef|if|elif)(\s.*|$)  . macro.marker . macro.define . macro
\b[A-Z_][A-Z0-9\_]+\b                               macro

# unreal

(UFUNCTION|UPROPERTY|UCLASS|USTRUCT|UENUM|GENERATED_BODY|GENERATED_UCLASS_BODY)\s*\(   . comment.marker
(BlueprintCallable|BlueprintPure|Keywords|AdvancedDisplay|DisplayName|Blueprintable|ClassGroup|BlueprintImplementable|EditAnywhere|BlueprintType|BlueprintReadOnly|BlueprintReadWrite|Category|Exec|exec|Meta|meta)  . namespace.marker
\b([UA][A-Z]\w+)   . class
\b(F[A-Z]\w+)      . keyword
\b(E[A-Z]\w+)      . property
\b(TMap|TArray|TSubclassOf)  . template

#number

(?:^|[^\.\"\'\w]|\.\.\.?)([\+\-]?)(\d+\.\d+f?)(?:$|[^\.\"\'\w]|\.\.\.?)   
    number.float.sign
    number.float

(?:^|[^\.\"\'\w]|\.\.\.?)([\+\-]?)(\d+)(?:$|[^\.\"\'\w]|\.\.\.?)   
    number.int.sign
    number.int
    
