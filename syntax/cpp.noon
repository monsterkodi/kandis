
#  0000000  00000000   00000000         000   000
# 000       000   000  000   000        000   000
# 000       00000000   00000000         000000000
# 000       000        000              000   000
#  0000000  000        000              000   000

ko
    extnames                 . cpp . cxx . cc . c . hpp . h

[\<\>\+\-\=\/\*]               math

!=                             math

# braces

[\(\)\{\}\[\]]                 bracket

# include

(#)(include)\s+([\<\"])(.*)([\>\"])   . macro.marker . macro.define . string.marker.require . string.require . string.marker.require

# class

(class)\s+(\w+)              . class.keyword . class

# bool

true                           bool.true
# false                        bool.false 
([\!])\w+                    . operator.negate

# punctuation

[\,\.\;\:\/\&\*]               punctuation
(\&\&|\|\|)                    keyword

# null

NULL|false                     keyword.null

# .property

\.(\s*\w+)                     property
\:\:(\w+)                      property

(\w+)(\:\:)                  . namespace . namespace.marker

\:\:(iterator|pair|string)   . namespace.member

# class construction

new\s+(\w+)                    class.callee
(\w+)\s*\=\s*new\s             class.object

^(\w+)(\:\:)(\w+)\s*\(             . class . class.marker . class.method.definition
^\S+[^\:]*\s(\w+)(\:\:)(\w+)\s*\(  . class . class.marker . class.method.definition

(?!\-\>|\.)([\w]+)\s*\(              function.call
(?!\-\>|\.)([\w]+)(?:\<\w+\>)\s*\(   function.call
(?:\-\>|\.)\s*([^\s\(]+)\s*\(        method.call

(\<)([^\<\>\-]+)(\>)         . template.marker . template . template.marker

# keywords
this                           keyword.this
(^|\s)(if|else|then|for|using|namespace|while|do|return|break|continue|new|switch|case|static|const_cast|static_cast|dynamic_cast|reinterpret_cast|public:?|protected:?|private:?)([\;\s]|$)  . none . keyword . none
    
\b(uint32_t|void|bool|int|uint|auto|float|double|long|unsigned|virtual|typedef|const|default)\b   keyword

# macros

(\#)(else|endif)                                  . macro.marker . macro.define
(\#)(define|pragma|ifdef|ifndef|if|elif)(\s.*|$)  . macro.marker . macro.define . macro
\b[A-Z0-9\_]+\b                                macro
    
#number

(?:^|[^\.\"\'\w]|\.\.\.?)([\+\-]?)(\d+\.\d+f?)(?:$|[^\.\"\'\w]|\.\.\.?)   
    syntax.value.number.float.sign
    value.number.float

(?:^|[^\.\"\'\w]|\.\.\.?)([\+\-]?)(\d+)(?:$|[^\.\"\'\w]|\.\.\.?)   
    syntax.value.number.int.sign
    value.number.int
    
# comments

# (\/\/+)\s*(.*)               . comment.marker . comment
# (\/\*)(.*)(\*\/)             . comment.marker . comment . comment.marker

